{"version":3,"file":"lightning.es5.js","sources":["../src/tree/StageUtils.mjs","../src/tree/Utils.mjs","../src/tree/Base.mjs","../src/flex/layout/SpacingCalculator.mjs","../src/flex/layout/ContentAligner.mjs","../src/flex/FlexUtils.mjs","../src/flex/layout/line/SizeShrinker.mjs","../src/flex/layout/line/SizeGrower.mjs","../src/flex/layout/line/ItemPositioner.mjs","../src/flex/layout/line/ItemAligner.mjs","../src/flex/layout/line/LineLayout.mjs","../src/flex/layout/LineLayouter.mjs","../src/flex/layout/ItemCoordinatesUpdater.mjs","../src/flex/layout/FlexLayout.mjs","../src/flex/FlexContainer.mjs","../src/flex/FlexItem.mjs","../src/flex/FlexTarget.mjs","../src/tree/TextureSource.mjs","../src/tree/core/ElementTexturizer.mjs","../src/tree/core/ElementCore.mjs","../src/EventEmitter.mjs","../src/tree/Shader.mjs","../src/tree/Texture.mjs","../src/textures/ImageTexture.mjs","../src/textures/TextTextureRendererUtils.mjs","../src/textures/TextTextureRenderer.mjs","../src/textures/TextTextureRendererAdvanced.mjs","../src/textures/TextTexture.mjs","../src/textures/SourceTexture.mjs","../src/animation/Transition.mjs","../src/tree/ObjectList.mjs","../src/tree/ElementChildList.mjs","../src/tree/Element.mjs","../src/application/StateMachine.mjs","../src/application/Component.mjs","../src/tree/core/CoreQuadList.mjs","../src/renderer/webgl/WebGLCoreQuadList.mjs","../src/tree/core/CoreQuadOperation.mjs","../src/renderer/webgl/WebGLCoreQuadOperation.mjs","../src/tree/core/CoreRenderExecutor.mjs","../src/renderer/webgl/WebGLCoreRenderExecutor.mjs","../src/tree/core/CoreRenderState.mjs","../src/renderer/webgl/WebGLShaderProgram.mjs","../src/renderer/webgl/WebGLShader.mjs","../src/renderer/webgl/shaders/DefaultShader.mjs","../src/renderer/Renderer.mjs","../src/renderer/webgl/WebGLRenderer.mjs","../src/renderer/c2d/C2dCoreQuadList.mjs","../src/renderer/c2d/C2dCoreQuadOperation.mjs","../src/renderer/c2d/C2dCoreRenderExecutor.mjs","../src/renderer/c2d/C2dShader.mjs","../src/renderer/c2d/shaders/DefaultShader.mjs","../src/renderer/c2d/C2dTextureTintManager.mjs","../src/renderer/c2d/C2dRenderer.mjs","../src/renderer/spark/shaders/SparkShader.mjs","../src/renderer/spark/SparkRenderer.mjs","../src/platforms/browser/ImageWorker.mjs","../src/platforms/browser/WebPlatform.mjs","../src/platforms/PlatformLoader.mjs","../src/tools/WebGLStateManager.mjs","../src/tree/TextureManager.mjs","../src/tree/TextureThrottler.mjs","../src/tree/core/CoreContext.mjs","../src/animation/TransitionSettings.mjs","../src/animation/TransitionManager.mjs","../src/tools/MultiSpline.mjs","../src/animation/AnimationActionSettings.mjs","../src/animation/AnimationSettings.mjs","../src/animation/Animation.mjs","../src/animation/AnimationManager.mjs","../src/textures/RectangleTexture.mjs","../src/tree/Stage.mjs","../src/application/Application.mjs","../src/textures/StaticCanvasTexture.mjs","../src/tools/Tools.mjs","../src/tools/ObjMerger.mjs","../src/tools/ObjectListProxy.mjs","../src/tools/ObjectListWrapper.mjs","../src/textures/NoiseTexture.mjs","../src/textures/HtmlTexture.mjs","../src/textures/StaticTexture.mjs","../src/components/ListComponent.mjs","../src/renderer/webgl/shaders/LinearBlurShader.mjs","../src/renderer/webgl/shaders/BoxBlurShader.mjs","../src/renderer/c2d/shaders/BlurShader.mjs","../src/components/FastBlurComponent.mjs","../src/components/BloomComponent.mjs","../src/components/SmoothScaleComponent.mjs","../src/components/BorderComponent.mjs","../src/renderer/common/shaders/GrayscaleShader.mjs","../src/renderer/webgl/shaders/DitheringShader.mjs","../src/renderer/webgl/shaders/CircularPushShader.mjs","../src/renderer/webgl/shaders/InversionShader.mjs","../src/renderer/webgl/shaders/OutlineShader.mjs","../src/renderer/webgl/shaders/PixelateShader.mjs","../src/renderer/webgl/shaders/RadialFilterShader.mjs","../src/renderer/webgl/shaders/RoundedRectangleShader.mjs","../src/renderer/webgl/shaders/FadeOutShader.mjs","../src/renderer/webgl/shaders/VignetteShader.mjs","../src/renderer/webgl/shaders/SpinnerShader.mjs","../src/renderer/webgl/shaders/HoleShader.mjs","../src/renderer/webgl/shaders/RadialGradientShader.mjs","../src/renderer/webgl/shaders/Light3dShader.mjs","../src/renderer/webgl/shaders/PerspectiveShader.mjs","../src/renderer/webgl/shaders/MagnifierShader.mjs","../src/renderer/webgl/shaders/SpinnerShader2.mjs","../src/lightning.mjs"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StageUtils {\n\n    static mergeNumbers(v1, v2, p) {\n        return v1 * p + v2 * (1 - p);\n    };\n\n    static rgb(r, g, b) {\n        return (r << 16) + (g << 8) + b + (255 * 16777216);\n    };\n\n    static rgba(r, g, b, a) {\n        return (r << 16) + (g << 8) + b + (((a * 255) | 0) * 16777216);\n    };\n\n    static getRgbString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n    };\n\n    static getRgbaString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        let a = ((color / 16777216) | 0) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaStringFromArray(color) {\n        let r = Math.floor(color[0] * 255);\n        let g = Math.floor(color[1] * 255);\n        let b = Math.floor(color[2] * 255);\n        let a = Math.floor(color[3] * 255) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r / 255, g / 255, b / 255, a / 255];\n    };\n\n    static getRgbComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        return [r / 255, g / 255, b / 255];\n    };\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static mergeMultiColors(c, p) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1 * p[i];\n            g += g1 * p[i];\n            b += b1 * p[i];\n            a += a1 * p[i];\n            t += p[i];\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeMultiColorsEqual(c) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1;\n            g += g1;\n            b += b1;\n            a += a1;\n            t += 1.0;\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeColorAlpha(c, alpha) {\n        let a = ((c / 16777216 | 0) * alpha) | 0;\n        return (((((c >> 16) & 0xff) * a) / 255) & 0xff) +\n            ((((c & 0xff00) * a) / 255) & 0xff00) +\n            (((((c & 0xff) << 16) * a) / 255) & 0xff0000) +\n            (a << 24);\n    };\n\n    static rad(deg) {\n        return deg * (Math.PI / 180);\n    };\n\n    static getTimingBezier(a, b, c, d) {\n        let xc = 3.0 * a;\n        let xb = 3.0 * (c - a) - xc;\n        let xa = 1.0 - xc - xb;\n        let yc = 3.0 * b;\n        let yb = 3.0 * (d - b) - yc;\n        let ya = 1.0 - yc - yb;\n\n        return function (time) {\n            if (time >= 1.0) {\n                return 1;\n            }\n            if (time <= 0) {\n                return 0;\n            }\n\n            let t = 0.5, cbx, cbxd, dx;\n\n            for (let it = 0; it < 20; it++) {\n                cbx = t * (t * (t * xa + xb) + xc);\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                // Cubic bezier derivative.\n                cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n                if (cbxd > 1e-10 && cbxd < 1e-10) {\n                    // Problematic. Fall back to binary search method.\n                    break;\n                }\n\n                t += dx / cbxd;\n            }\n\n            // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n            let minT = 0;\n            let maxT = 1;\n            for (let it = 0; it < 20; it++) {\n                t = 0.5 * (minT + maxT);\n\n                cbx = t * (t * (t * xa + xb) + xc);\n\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    // Solution found!\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                if (dx < 0) {\n                    maxT = t;\n                } else {\n                    minT = t;\n                }\n            }\n\n        };\n    };\n\n    static getTimingFunction(str) {\n        switch (str) {\n            case \"linear\":\n                return function (time) {\n                    return time\n                };\n            case \"ease\":\n                return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1.0);\n            case \"ease-in\":\n                return StageUtils.getTimingBezier(0.42, 0, 1.0, 1.0);\n            case \"ease-out\":\n                return StageUtils.getTimingBezier(0, 0, 0.58, 1.0);\n            case \"ease-in-out\":\n                return StageUtils.getTimingBezier(0.42, 0, 0.58, 1.0);\n            case \"step-start\":\n                return function () {\n                    return 1\n                };\n            case \"step-end\":\n                return function (time) {\n                    return time === 1 ? 1 : 0;\n                };\n            default:\n                let s = \"cubic-bezier(\";\n                if (str && str.indexOf(s) === 0) {\n                    let parts = str.substr(s.length, str.length - s.length - 1).split(\",\");\n                    if (parts.length !== 4) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n                    let a = parseFloat(parts[0]);\n                    let b = parseFloat(parts[1]);\n                    let c = parseFloat(parts[2]);\n                    let d = parseFloat(parts[3]);\n                    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n\n                    return StageUtils.getTimingBezier(a, b, c, d);\n                } else {\n                    console.warn(\"[Lightning] Unknown timing function: \" + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time\n                    };\n                }\n        }\n    };\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value === 'string';\n    }\n\n    static clone(v) {\n        if (Utils.isObjectLiteral(v) || Array.isArray(v)) {\n            return Utils.getDeepClone(v);\n        } else {\n            // Copy by value.\n            return v;\n        }\n    }\n\n    static cloneObjShallow(obj) {\n        let keys = Object.keys(obj);\n        let clone = {}\n        for (let i = 0; i < keys.length; i++) {\n            clone[keys[i]] = obj[keys[i]];\n        }\n        return clone;\n    }\n\n    static merge(obj1, obj2) {\n        let keys = Object.keys(obj2);\n        for (let i = 0; i < keys.length; i++) {\n            obj1[keys[i]] = obj2[keys[i]];\n        }\n        return obj1;\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object' || type === 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object;\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static getModuloIndex(index, len) {\n        if (len === 0) return index;\n        while (index < 0) {\n            index += Math.ceil(-index / len) * len;\n        }\n        index = index % len;\n        return index;\n    }\n\n    static getDeepClone(obj) {\n        let i, c;\n        if (Utils.isFunction(obj)) {\n            // Copy functions by reference.\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            c = [];\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else if (Utils.isObject(obj)) {\n            c = {}\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else {\n            return obj;\n        }\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false;\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2);\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2);\n        } else {\n            return v1 === v2;\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false;\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false;\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static setToArray(s) {\n        let result = [];\n        s.forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    }\n\n    static iteratorToArray(iterator) {\n        let result = [];\n        let iteratorResult = iterator.next();\n        while (!iteratorResult.done) {\n            result.push(iteratorResult.value);\n            iteratorResult = iterator.next();\n        }\n        return result;\n    }\n\n    static isUcChar(charcode) {\n        return charcode >= 65 && charcode <= 90;\n    }\n\n}\n\nUtils.isWeb = (typeof window !== \"undefined\") && (typeof sparkscene === \"undefined\");\nUtils.isWPE = Utils.isWeb && (navigator.userAgent.indexOf(\"WPE\") !== -1);\nUtils.isSpark = (typeof sparkscene !== \"undefined\");\nUtils.isNode = (typeof window === \"undefined\") || Utils.isSpark;\nUtils.isPS4 = Utils.isWeb && (navigator.userAgent.indexOf(\"PlayStation 4\") !== -1);\nUtils.isZiggo = Utils.isWeb && (navigator.userAgent.indexOf(\"EOSSTB\") !== -1 || navigator.userAgent.indexOf(\"HZNSTB\") !== -1);\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Base {\n\n    static defaultSetter(obj, name, value) {\n        obj[name] = value;\n    }\n\n    static patchObject(obj, settings) {\n        if (!Utils.isObjectLiteral(settings)) {\n            console.error(\"[Lightning] Settings must be object literal\");\n        } else {\n            let names = Object.keys(settings);\n            for (let i = 0, n = names.length; i < n; i++) {\n                let name = names[i];\n\n                this.patchObjectProperty(obj, name, settings[name]);\n            }\n        }\n    }\n\n    static patchObjectProperty(obj, name, value) {\n        let setter = obj.setSetting || Base.defaultSetter;\n\n        if (name.charAt(0) === \"_\") {\n            // Disallow patching private variables.\n            if (name !== \"__create\") {\n                console.error(\"[Lightning] Patch of private property '\" + name + \"' is not allowed\");\n            }\n        } else if (name !== \"type\") {\n            // Type is a reserved keyword to specify the class type on creation.\n            if (Utils.isFunction(value) && value.__local) {\n                // Local function (Base.local(s => s.something))\n                value = value.__local(obj);\n            }\n\n            setter(obj, name, value);\n        }\n    }\n\n    static local(func) {\n        // This function can be used as an object setting, which is called with the target object.\n        func.__local = true;\n    }\n\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SpacingCalculator {\n\n    static getSpacing(mode, numberOfItems, remainingSpace) {\n        const itemGaps = (numberOfItems - 1);\n        let spacePerGap;\n\n        let spacingBefore, spacingBetween;\n\n        switch(mode) {\n            case \"flex-start\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            case \"flex-end\":\n                spacingBefore = remainingSpace;\n                spacingBetween = 0;\n                break;\n            case \"center\":\n                spacingBefore = remainingSpace / 2;\n                spacingBetween = 0;\n                break;\n            case \"space-between\":\n                spacingBefore = 0;\n                spacingBetween = Math.max(0, remainingSpace) / itemGaps;\n                break;\n            case \"space-around\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 1);\n                    spacingBefore = 0.5 * spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"space-evenly\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 2);\n                    spacingBefore = spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"stretch\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            default:\n                throw new Error(\"Unknown mode: \" + mode);\n        }\n\n        return {spacingBefore, spacingBetween}\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"./SpacingCalculator.mjs\";\n\nexport default class ContentAligner {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._totalCrossAxisSize = 0;\n    }\n\n    get _lines() {\n        return this._layout._lines;\n    }\n\n    init() {\n        this._totalCrossAxisSize = this._getTotalCrossAxisSize();\n    }\n\n    align() {\n        const crossAxisSize = this._layout.crossAxisSize;\n        const remainingSpace = crossAxisSize - this._totalCrossAxisSize;\n\n        const {spacingBefore, spacingBetween} = this._getSpacing(remainingSpace);\n\n        const lines = this._lines;\n\n        const mode = this._layout._flexContainer.alignContent;\n        let growSize = 0;\n        if (mode === \"stretch\" && lines.length && (remainingSpace > 0)) {\n            growSize = remainingSpace / lines.length;\n        }\n\n        let currentPos = spacingBefore;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const crossAxisLayoutOffset = currentPos;\n            const aligner = lines[i].createItemAligner();\n\n            let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;\n\n            aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);\n            aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);\n\n            aligner.align();\n\n            if (aligner.recursiveResizeOccured) {\n                lines[i].setItemPositions();\n            }\n\n            currentPos += finalCrossAxisLayoutSize;\n            currentPos += spacingBetween;\n        }\n    }\n\n    get totalCrossAxisSize() {\n        return this._totalCrossAxisSize;\n    }\n\n    _getTotalCrossAxisSize() {\n        const lines = this._lines;\n        let total = 0;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const line = lines[i];\n            total += line.crossAxisLayoutSize;\n        }\n        return total;\n    }\n\n    _getSpacing(remainingSpace) {\n        const mode = this._layout._flexContainer.alignContent;\n        const numberOfItems = this._lines.length;\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class FlexUtils {\n\n    static getParentAxisSizeWithPadding(item, horizontal) {\n        const target = item.target;\n        const parent = target.getParent();\n        if (!parent) {\n            return 0;\n        } else {\n            const flexParent = item.flexParent;\n            if (flexParent) {\n                // Use pending layout size.\n                return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);\n            } else {\n                // Use 'absolute' size.\n                return horizontal ? parent.w : parent.h;\n            }\n        }\n    }\n\n    static getRelAxisSize(item, horizontal) {\n        if (horizontal) {\n            if (item.funcW) {\n                if (this._allowRelAxisSizeFunction(item, true)) {\n                    return item.funcW(this.getParentAxisSizeWithPadding(item, true));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalWidth;\n            }\n        } else {\n            if (item.funcH) {\n                if (this._allowRelAxisSizeFunction(item, false)) {\n                    return item.funcH(this.getParentAxisSizeWithPadding(item, false));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalHeight;\n            }\n        }\n    }\n\n    static _allowRelAxisSizeFunction(item, horizontal) {\n        const flexParent = item.flexParent;\n        if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {\n            // We don't allow relative width on fit-to-contents because it leads to conflicts.\n            return false;\n        }\n        return true;\n    }\n\n    static isZeroAxisSize(item, horizontal) {\n        if (horizontal) {\n            return !item.originalWidth && !item.funcW;\n        } else {\n            return !item.originalHeight && !item.funcH;\n        }\n    }\n\n    static getAxisLayoutPos(item, horizontal) {\n        return horizontal ? item.x : item.y;\n    }\n\n    static getAxisLayoutSize(item, horizontal) {\n        return horizontal ? item.w : item.h;\n    }\n\n    static setAxisLayoutPos(item, horizontal, pos) {\n        if (horizontal) {\n            item.x = pos;\n        } else {\n            item.y = pos;\n        }\n    }\n\n    static setAxisLayoutSize(item, horizontal, size) {\n        if (horizontal) {\n            item.w = size;\n        } else {\n            item.h = size;\n        }\n    }\n\n    static getAxisMinSize(item, horizontal) {\n        let minSize = this.getPlainAxisMinSize(item, horizontal);\n\n        let flexItemMinSize = 0;\n        if (item.isFlexItemEnabled()) {\n            flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);\n        }\n\n        const hasLimitedMinSize = (flexItemMinSize > 0);\n        if (hasLimitedMinSize) {\n            minSize = Math.max(minSize, flexItemMinSize);\n        }\n        return minSize;\n    }\n\n    static getPlainAxisMinSize(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            return item._flex._layout.getAxisMinSize(horizontal);\n        } else {\n            const isShrinkable = (item.flexItem.shrink !== 0);\n            if (isShrinkable) {\n                return 0;\n            } else {\n                return this.getRelAxisSize(item, horizontal);\n            }\n        }\n    }\n\n    static resizeAxis(item, horizontal, size) {\n        if (item.isFlexEnabled()) {\n            const isMainAxis = (item._flex._horizontal === horizontal);\n            if (isMainAxis) {\n                item._flex._layout.resizeMainAxis(size);\n            } else {\n                item._flex._layout.resizeCrossAxis(size);\n            }\n        } else {\n            this.setAxisLayoutSize(item, horizontal, size);\n        }\n    }\n\n\n    static getPaddingOffset(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingLeft;\n            } else {\n                return flex.paddingTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalPadding(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingRight + flex.paddingLeft;\n            } else {\n                return flex.paddingTop + flex.paddingBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getMarginOffset(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalMargin(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginRight + flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop + flexItem.marginBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeShrinker {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._shrunkSize = 0;\n    }\n\n    shrink(amount) {\n        this._shrunkSize = 0;\n\n        this._amountRemaining = amount;\n        let totalShrinkAmount = this._getTotalShrinkAmount();\n        if (totalShrinkAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerShrink = this._amountRemaining / totalShrinkAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const shrinkAmount = flexItem.shrink;\n                    const isShrinkableItem = (shrinkAmount > 0);\n                    if (isShrinkableItem) {\n                        let shrink = shrinkAmount * amountPerShrink;\n                        const minSize = flexItem._getMainAxisMinSize();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (size > minSize) {\n                            const maxShrink = size - minSize;\n                            const isFullyShrunk = (shrink >= maxShrink);\n                            if (isFullyShrunk) {\n                                shrink = maxShrink;\n\n                                // Destribute remaining amount over the other flex items.\n                                totalShrinkAmount -= shrinkAmount;\n                            }\n\n                            const finalSize = size - shrink;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._shrunkSize += shrink;\n                            this._amountRemaining -= shrink;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalShrinkAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalShrinkAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.shrink) {\n                const minSize = flexItem._getMainAxisMinSize();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully shrunk.\n                if (size > minSize) {\n                    total += flexItem.shrink;\n                }\n            }\n        }\n        return total;\n    }\n\n    getShrunkSize() {\n        return this._shrunkSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeGrower {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._grownSize = 0;\n    }\n\n    grow(amount) {\n        this._grownSize = 0;\n\n        this._amountRemaining = amount;\n        let totalGrowAmount = this._getTotalGrowAmount();\n        if (totalGrowAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerGrow = this._amountRemaining / totalGrowAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const growAmount = flexItem.grow;\n                    const isGrowableItem = (growAmount > 0);\n                    if (isGrowableItem) {\n                        let grow = growAmount * amountPerGrow;\n                        const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (maxSize > 0) {\n                            if (size >= maxSize) {\n                                // Already fully grown.\n                                grow = 0;\n                            } else {\n                                const maxGrow = maxSize - size;\n                                const isFullyGrown = (grow >= maxGrow);\n                                if (isFullyGrown) {\n                                    grow = maxGrow;\n\n                                    // Destribute remaining amount over the other flex items.\n                                    totalGrowAmount -= growAmount;\n                                }\n                            }\n                        }\n\n                        if (grow > 0) {\n                            const finalSize = size + grow;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._grownSize += grow;\n                            this._amountRemaining -= grow;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalGrowAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalGrowAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.grow) {\n                const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully grown.\n                if (maxSize === 0 || size < maxSize) {\n                    total += flexItem.grow;\n                }\n            }\n        }\n        return total;\n    }\n\n    getGrownSize() {\n        return this._grownSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"../SpacingCalculator.mjs\";\n\nexport default class ItemPositioner {\n\n    constructor(lineLayout) {\n        this._line = lineLayout;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    position() {\n        const {spacingBefore, spacingBetween} = this._getSpacing();\n\n        let currentPos = spacingBefore;\n\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n\n            item.flexItem._setMainAxisLayoutPos(currentPos);\n            currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n            currentPos += spacingBetween;\n        }\n    }\n\n    _getSpacing() {\n        const remainingSpace = this._line._availableSpace;\n        let mode = this._layout._flexContainer.justifyContent;\n        const numberOfItems = this._line.numberOfItems;\n\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ItemAligner {\n\n    constructor(line) {\n        this._line = line;\n        this._crossAxisLayoutSize = 0;\n        this._crossAxisLayoutOffset = 0;\n        this._alignItemsSetting = null;\n        this._recursiveResizeOccured = false;\n        this._isCrossAxisFitToContents = false;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    setCrossAxisLayoutSize(size) {\n        this._crossAxisLayoutSize = size;\n    }\n\n    setCrossAxisLayoutOffset(offset) {\n        this._crossAxisLayoutOffset = offset;\n    }\n\n    align() {\n        this._alignItemsSetting = this._flexContainer.alignItems;\n\n        this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);\n\n        this._recursiveResizeOccured = false;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            this._alignItem(item);\n        }\n    }\n\n    get recursiveResizeOccured() {\n        return this._recursiveResizeOccured;\n    }\n\n    _alignItem(item) {\n        const flexItem = item.flexItem;\n        let align = flexItem.alignSelf || this._alignItemsSetting;\n\n        if (align === \"stretch\" && this._preventStretch(flexItem)) {\n            align = \"flex-start\";\n        }\n\n        if (align !== \"stretch\" && !this._isCrossAxisFitToContents) {\n            if (flexItem._hasRelCrossAxisSize()) {\n                // As cross axis size might have changed, we need to recalc the relative flex item's size.\n                flexItem._resetCrossAxisLayoutSize();\n            }\n        }\n\n        switch(align) {\n            case \"flex-start\":\n                this._alignItemFlexStart(flexItem);\n                break;\n            case \"flex-end\":\n                this._alignItemFlexEnd(flexItem);\n                break;\n            case \"center\":\n                this._alignItemFlexCenter(flexItem);\n                break;\n            case \"stretch\":\n                this._alignItemStretch(flexItem);\n                break;\n        }\n    }\n\n    _alignItemFlexStart(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n    }\n\n    _alignItemFlexEnd(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));\n    }\n\n    _alignItemFlexCenter(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);\n    }\n\n    _alignItemStretch(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n\n        const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();\n        let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();\n\n        const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();\n        if (crossAxisMinSizeSetting > 0) {\n            size = Math.max(size, crossAxisMinSizeSetting);\n        }\n\n        const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();\n        const crossAxisMaxSizeSettingEnabled = (crossAxisMaxSizeSetting > 0);\n        if (crossAxisMaxSizeSettingEnabled) {\n            size = Math.min(size, crossAxisMaxSizeSetting);\n        }\n\n        flexItem._resizeCrossAxis(size);\n        const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();\n\n        const recursiveResize = (mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize);\n        if (recursiveResize) {\n            // Recursive resize can happen when this flex item has the opposite direction than the container\n            // and is wrapping and auto-sizing. Due to item/content stretching the main axis size of the flex\n            // item may decrease. If it does so, we must re-justify-content the complete line.\n            // Notice that we don't account for changes to the (if autosized) main axis size caused by recursive\n            // resize, which may cause the container's main axis to not shrink to the contents properly.\n            // This is by design, because if we had re-run the main axis layout, we could run into issues such\n            // as slow layout or endless loops.\n            this._recursiveResizeOccured = true;\n        }\n    }\n\n    _preventStretch(flexItem) {\n        const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();\n        const forceStretch = (flexItem.alignSelf === \"stretch\");\n        return hasFixedCrossAxisSize && !forceStretch;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SizeShrinker from \"./SizeShrinker.mjs\";\nimport SizeGrower from \"./SizeGrower.mjs\";\nimport ItemPositioner from \"./ItemPositioner.mjs\";\nimport ItemAligner from \"./ItemAligner.mjs\";\n\nexport default class LineLayout {\n\n    constructor(layout, startIndex, endIndex, availableSpace) {\n        this._layout = layout;\n        this.items = layout.items;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this._availableSpace = availableSpace;\n    }\n\n    performLayout() {\n        this._setItemSizes();\n        this.setItemPositions();\n        this._calcLayoutInfo();\n    }\n\n    _setItemSizes() {\n        if (this._availableSpace > 0) {\n            this._growItemSizes(this._availableSpace);\n        } else if (this._availableSpace < 0) {\n            this._shrinkItemSizes(-this._availableSpace);\n        }\n    }\n\n    _growItemSizes(amount) {\n        const grower = new SizeGrower(this);\n        grower.grow(amount);\n        this._availableSpace -= grower.getGrownSize();\n    }\n\n    _shrinkItemSizes(amount) {\n        const shrinker = new SizeShrinker(this);\n        shrinker.shrink(amount);\n        this._availableSpace += shrinker.getShrunkSize();\n    }\n\n    setItemPositions() {\n        const positioner = new ItemPositioner(this);\n        positioner.position();\n    }\n\n    createItemAligner() {\n        return new ItemAligner(this);\n    }\n\n    _calcLayoutInfo() {\n        this._calcCrossAxisMaxLayoutSize();\n    }\n\n    getMainAxisMinSize() {\n        let mainAxisMinSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();\n        }\n        return mainAxisMinSize;\n    }\n    \n    get numberOfItems() {\n        return this.endIndex - this.startIndex + 1;\n    }\n\n    get crossAxisLayoutSize() {\n        const noSpecifiedCrossAxisSize = (this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis);\n        const shouldFitToContents = (this._layout.isWrapping() || noSpecifiedCrossAxisSize);\n        if (shouldFitToContents) {\n            return this._crossAxisMaxLayoutSize;\n        } else {\n            return this._layout.crossAxisSize;\n        }\n    }\n\n    _calcCrossAxisMaxLayoutSize() {\n        this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();\n    }\n\n    _getCrossAxisMaxLayoutSize() {\n        let crossAxisMaxSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());\n        }\n        return crossAxisMaxSize;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport LineLayout from \"./line/LineLayout.mjs\";\n\n/**\n * Distributes items over layout lines.\n */\nexport default class LineLayouter {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    get lines() {\n        return this._lines;\n    }\n\n    get mainAxisMinSize() {\n        if (this._mainAxisMinSize === -1) {\n            this._mainAxisMinSize = this._getMainAxisMinSize();\n        }\n        return this._mainAxisMinSize;\n    }\n\n    get crossAxisMinSize() {\n        if (this._crossAxisMinSize === -1) {\n            this._crossAxisMinSize = this._getCrossAxisMinSize();\n        }\n        return this._crossAxisMinSize;\n    }\n\n    get mainAxisContentSize() {\n        return this._mainAxisContentSize;\n    }\n\n    layoutLines() {\n        this._setup();\n        const items = this._layout.items;\n        const wrap = this._layout.isWrapping();\n\n        let startIndex = 0;\n        let i;\n        const n = items.length;\n        for (i = 0; i < n; i++) {\n            const item = items[i];\n\n            this._layoutFlexItem(item);\n\n            // Get predicted main axis size.\n            const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n\n            if (wrap && (i > startIndex)) {\n                const isOverflowing = (this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize);\n                if (isOverflowing) {\n                    this._layoutLine(startIndex, i - 1);\n                    this._curMainAxisPos = 0;\n                    startIndex = i;\n                }\n            }\n\n            this._addToMainAxisPos(itemMainAxisSize);\n        }\n\n        if (startIndex < i) {\n            this._layoutLine(startIndex, i - 1);\n        }\n    }\n\n    _layoutFlexItem(item) {\n        if (item.isFlexEnabled()) {\n            item.flexLayout.updateTreeLayout();\n        } else {\n            item.flexItem._resetLayoutSize();\n        }\n    }\n\n    _setup() {\n        this._mainAxisSize = this._layout.mainAxisSize;\n        this._curMainAxisPos = 0;\n        this._maxMainAxisPos = 0;\n        this._lines = [];\n\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    _addToMainAxisPos(itemMainAxisSize) {\n        this._curMainAxisPos += itemMainAxisSize;\n        if (this._curMainAxisPos > this._maxMainAxisPos) {\n            this._maxMainAxisPos = this._curMainAxisPos;\n        }\n    }\n\n    _layoutLine(startIndex, endIndex) {\n        const availableSpace = this._getAvailableMainAxisLayoutSpace();\n        const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);\n        line.performLayout();\n        this._lines.push(line);\n\n        if (this._mainAxisContentSize === 0 || (this._curMainAxisPos > this._mainAxisContentSize)) {\n            this._mainAxisContentSize = this._curMainAxisPos;\n        }\n    }\n\n    _getAvailableMainAxisLayoutSpace() {\n        if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {\n            return 0;\n        } else {\n            return this._mainAxisSize - this._curMainAxisPos;\n        }\n    }\n\n    _getCrossAxisMinSize() {\n        let crossAxisMinSize = 0;\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();\n            crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);\n        }\n        return crossAxisMinSize;\n    }\n\n    _getMainAxisMinSize() {\n        if (this._lines.length === 1) {\n            return this._lines[0].getMainAxisMinSize();\n        } else {\n            // Wrapping lines: specified width is used as min width (in accordance to W3C flexbox).\n            return this._layout.mainAxisSize;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexUtils from \"../FlexUtils.mjs\";\n\nexport default class ItemCoordinatesUpdater {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._isReverse = this._flexContainer._reverse;\n        this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();\n        this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    finalize() {\n        const parentFlex = this._layout.getParentFlexContainer();\n        if (parentFlex) {\n            // We must update it from the parent to set padding offsets and reverse position.\n            const updater = new ItemCoordinatesUpdater(parentFlex._layout);\n            updater._finalizeItemAndChildren(this._flexContainer.item);\n        } else {\n            this._finalizeRoot();\n            this._finalizeItems();\n        }\n    }\n\n    _finalizeRoot() {\n        const item = this._flexContainer.item;\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        w += this._layout._getHorizontalPadding();\n        h += this._layout._getVerticalPadding();\n\n        item.clearRecalcFlag();\n\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItems() {\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const validCache = this._validateItemCache(item);\n\n            // Notice that we must also finalize a cached items, as it's coordinates may have changed.\n            this._finalizeItem(item);\n\n            if (!validCache) {\n                this._finalizeItemChildren(item);\n            }\n        }\n    }\n\n    _validateItemCache(item) {\n        if (item.recalc === 0) {\n            if (item.isFlexEnabled()) {\n                const layout = item._flex._layout;\n\n                const dimensionsMatchPreviousResult = (item.w === item.target.w && item.h === item.target.h);\n                if (dimensionsMatchPreviousResult) {\n                    // Cache is valid.\n                    return true;\n                } else {\n                    const crossAxisSize = layout.crossAxisSize;\n                    layout.performResizeMainAxis(layout.mainAxisSize);\n                    layout.performResizeCrossAxis(crossAxisSize);\n                }\n            }\n        }\n        return false;\n    }\n\n    _finalizeItemAndChildren(item) {\n        this._finalizeItem(item);\n        this._finalizeItemChildren(item);\n    }\n\n    _finalizeItem(item) {\n        if (this._isReverse) {\n            this._reverseMainAxisLayoutPos(item);\n        }\n\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        x += this._horizontalPaddingOffset;\n        y += this._verticalPaddingOffset;\n\n        const flex = item.flex;\n        if (flex) {\n            w += item._flex._layout._getHorizontalPadding();\n            h += item._flex._layout._getVerticalPadding();\n        }\n\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            x += flexItem._getHorizontalMarginOffset();\n            y += flexItem._getVerticalMarginOffset();\n        }\n\n        item.clearRecalcFlag();\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItemChildren(item) {\n        const flex = item._flex;\n        if (flex) {\n            const updater = new ItemCoordinatesUpdater(flex._layout);\n            updater._finalizeItems();\n        }\n    }\n\n    _reverseMainAxisLayoutPos(item) {\n        const endPos = (item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin());\n        const reversedPos = this._layout.mainAxisSize - endPos;\n        item.flexItem._setMainAxisLayoutPos(reversedPos);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ContentAligner from \"./ContentAligner.mjs\";\nimport FlexUtils from \"../FlexUtils.mjs\";\nimport LineLayouter from \"./LineLayouter.mjs\";\nimport ItemCoordinatesUpdater from \"./ItemCoordinatesUpdater.mjs\";\n\n/**\n * Layouts a flex container (and descendants).\n */\nexport default class FlexLayout {\n\n    constructor(flexContainer) {\n        this._flexContainer = flexContainer;\n\n        this._lineLayouter = new LineLayouter(this);\n\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n\n        this._cachedMainAxisSizeAfterLayout = 0;\n        this._cachedCrossAxisSizeAfterLayout = 0;\n\n        this._shrunk = false;\n    }\n\n    get shrunk() {\n        return this._shrunk;\n    }\n\n    get recalc() {\n        return this.item.recalc;\n    }\n\n    layoutTree() {\n        const isSubTree = (this.item.flexParent !== null);\n        if (isSubTree) {\n            // Use the dimensions set by the parent flex tree.\n            this._updateSubTreeLayout();\n        } else {\n            this.updateTreeLayout();\n        }\n        this.updateItemCoords();\n    }\n\n    updateTreeLayout() {\n        if (this.recalc) {\n            this._performUpdateLayoutTree();\n        } else {\n            this._performUpdateLayoutTreeFromCache();\n        }\n    }\n\n    _performUpdateLayoutTree() {\n        this._setInitialAxisSizes();\n        this._layoutAxes();\n        this._refreshLayoutCache();\n    }\n\n    _refreshLayoutCache() {\n        this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;\n        this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;\n    }\n\n    _performUpdateLayoutTreeFromCache() {\n        const sizeMightHaveChanged = (this.item.funcW || this.item.funcH);\n        if (sizeMightHaveChanged) {\n            // Update after all.\n            this.item.enableLocalRecalcFlag();\n            this._performUpdateLayoutTree();\n        } else {\n            this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;\n            this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;\n        }\n    }\n\n    updateItemCoords() {\n        const updater = new ItemCoordinatesUpdater(this);\n        updater.finalize();\n    }\n\n    _updateSubTreeLayout() {\n        // The dimensions of this container are guaranteed not to have changed.\n        // That's why we can safely 'reuse' those and re-layout the contents.\n        const crossAxisSize = this.crossAxisSize;\n        this._layoutMainAxis();\n        this.performResizeCrossAxis(crossAxisSize);\n    }\n\n    _setInitialAxisSizes() {\n        if (this.item.isFlexItemEnabled()) {\n            this.item.flexItem._resetLayoutSize();\n        } else {\n            this.mainAxisSize = this._getMainAxisBasis();\n            this.crossAxisSize = this._getCrossAxisBasis();\n        }\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n        this._shrunk = false;\n    }\n\n    _layoutAxes() {\n        this._layoutMainAxis();\n        this._layoutCrossAxis();\n    }\n\n    /**\n     * @pre mainAxisSize should exclude padding.\n     */\n    _layoutMainAxis() {\n        this._layoutLines();\n        this._fitMainAxisSizeToContents();\n    }\n\n    _layoutLines() {\n        this._lineLayouter.layoutLines();\n    }\n\n    get _lines() {\n        return this._lineLayouter.lines;\n    }\n\n    _fitMainAxisSizeToContents() {\n        if (!this._resizingMainAxis) {\n            if (this.isMainAxisFitToContents()) {\n                this.mainAxisSize = this._lineLayouter.mainAxisContentSize;\n            }\n        }\n    }\n\n    /**\n     * @pre crossAxisSize should exclude padding.\n     */\n    _layoutCrossAxis() {\n        const aligner = new ContentAligner(this);\n        aligner.init();\n        this._totalCrossAxisSize = aligner.totalCrossAxisSize;\n        this._fitCrossAxisSizeToContents();\n        aligner.align();\n    }\n\n    _fitCrossAxisSizeToContents() {\n        if (!this._resizingCrossAxis) {\n            if (this.isCrossAxisFitToContents()) {\n                this.crossAxisSize = this._totalCrossAxisSize;\n            }\n        }\n    }\n\n    isWrapping() {\n        return this._flexContainer.wrap;\n    }\n\n    isAxisFitToContents(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this.isMainAxisFitToContents();\n        } else {\n            return this.isCrossAxisFitToContents();\n        }\n    }\n\n    isMainAxisFitToContents() {\n        return !this.isWrapping() && !this._hasFixedMainAxisBasis();\n    }\n\n    isCrossAxisFitToContents() {\n        return !this._hasFixedCrossAxisBasis();\n    }\n\n    _hasFixedMainAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);\n    }\n\n    _hasFixedCrossAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);\n    }\n\n    getAxisMinSize(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this._getMainAxisMinSize();\n        } else {\n            return this._getCrossAxisMinSize();\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return this._lineLayouter.mainAxisMinSize;\n    }\n\n    _getCrossAxisMinSize() {\n        return this._lineLayouter.crossAxisMinSize;\n    }\n\n    resizeMainAxis(size) {\n        if (this.mainAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeMainAxis(size);\n            } else {\n                if (this._checkValidCacheMainAxisResize()) {\n                    this.mainAxisSize = size;\n                    this._fitCrossAxisSizeToContents();\n                } else {\n                    // Cache miss.\n                    this.item.enableLocalRecalcFlag();\n                    this.performResizeMainAxis(size);\n                }\n            }\n        }\n    }\n\n    _checkValidCacheMainAxisResize(size) {\n        const isFinalMainAxisSize = (size === this.targetMainAxisSize);\n        if (isFinalMainAxisSize) {\n            return true;\n        }\n        const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();\n        if (canIgnoreCacheMiss) {\n            // Allow other main axis resizes and check if final resize matches the target main axis size\n            //  (ItemCoordinatesUpdater).\n            return true;\n        }\n        return false;\n    }\n\n    performResizeMainAxis(size) {\n        const isShrinking = (size < this.mainAxisSize);\n        this._shrunk = isShrinking;\n\n        this.mainAxisSize = size;\n\n        this._resizingMainAxis = true;\n        this._layoutAxes();\n        this._resizingMainAxis = false;\n    }\n\n    resizeCrossAxis(size) {\n        if (this.crossAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeCrossAxis(size);\n            } else {\n                this.crossAxisSize = size;\n            }\n        }\n    }\n\n    performResizeCrossAxis(size) {\n        this.crossAxisSize = size;\n\n        this._resizingCrossAxis = true;\n        this._layoutCrossAxis();\n        this._resizingCrossAxis = false;\n    }\n\n    get targetMainAxisSize() {\n        return this._horizontal ? this.item.target.w : this.item.target.h;\n    }\n\n    get targetCrossAxisSize() {\n        return this._horizontal ? this.item.target.h : this.item.target.w;\n    }\n\n    getParentFlexContainer() {\n        return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;\n    }\n\n    _getHorizontalPadding() {\n        return FlexUtils.getTotalPadding(this.item, true);\n    }\n\n    _getVerticalPadding() {\n        return FlexUtils.getTotalPadding(this.item, false);\n    }\n\n    _getHorizontalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, true);\n    }\n\n    _getVerticalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, false);\n    }\n\n    _getMainAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, this._horizontal);\n    }\n\n    _getCrossAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, !this._horizontal);\n    }\n\n    get _horizontal() {\n        return this._flexContainer._horizontal;\n    }\n\n    get _reverse() {\n        return this._flexContainer._reverse;\n    }\n\n    get item() {\n        return this._flexContainer.item;\n    }\n\n    get items() {\n        return this.item.items;\n    }\n\n    get resizingMainAxis() {\n        return this._resizingMainAxis;\n    }\n\n    get resizingCrossAxis() {\n        return this._resizingCrossAxis;\n    }\n\n    get numberOfItems() {\n        return this.items.length;\n    }\n\n    get mainAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);\n    }\n\n    get crossAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);\n    }\n\n    set mainAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);\n    }\n\n    set crossAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport Layout from \"./layout/FlexLayout.mjs\";\n\nexport default class FlexContainer {\n\n\n    constructor(item) {\n        this._item = item;\n\n        this._layout = new Layout(this);\n        this._horizontal = true;\n        this._reverse = false;\n        this._wrap = false;\n        this._alignItems = 'stretch';\n        this._justifyContent = 'flex-start';\n        this._alignContent = 'flex-start';\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    _changedDimensions() {\n        this._item.changedDimensions();\n    }\n\n    _changedContents() {\n        this._item.changedContents();\n    }\n\n    get direction() {\n        return (this._horizontal ? \"row\" : \"column\") + (this._reverse ? \"-reverse\" : \"\");\n    }\n\n    set direction(f) {\n        if (this.direction === f) return;\n\n        this._horizontal = (f === 'row' || f === 'row-reverse');\n        this._reverse = (f === 'row-reverse' || f === 'column-reverse');\n\n        this._changedContents();\n    }\n\n    set wrap(v) {\n        this._wrap = v;\n        this._changedContents();\n    }\n\n    get wrap() {\n        return this._wrap;\n    }\n\n    get alignItems() {\n        return this._alignItems;\n    }\n\n    set alignItems(v) {\n        if (this._alignItems === v) return;\n        if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignItems, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n        }\n        this._alignItems = v;\n\n        this._changedContents();\n    }\n\n    get alignContent() {\n        return this._alignContent;\n    }\n\n    set alignContent(v) {\n        if (this._alignContent === v) return;\n        if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignContent, options: \" + FlexContainer.ALIGN_CONTENT.join(\",\"));\n        }\n        this._alignContent = v;\n\n        this._changedContents();\n    }\n\n    get justifyContent() {\n        return this._justifyContent;\n    }\n\n    set justifyContent(v) {\n        if (this._justifyContent === v) return;\n\n        if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown justifyContent, options: \" + FlexContainer.JUSTIFY_CONTENT.join(\",\"));\n        }\n        this._justifyContent = v;\n\n        this._changedContents();\n    }\n\n    set padding(v) {\n        this.paddingLeft = v;\n        this.paddingTop = v;\n        this.paddingRight = v;\n        this.paddingBottom = v;\n    }\n\n    get padding() {\n        return this.paddingLeft;\n    }\n    \n    set paddingLeft(v) {\n        this._paddingLeft = v;\n        this._changedDimensions();\n    }\n    \n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingTop(v) {\n        this._paddingTop = v;\n        this._changedDimensions();\n    }\n\n    get paddingTop() {\n        return this._paddingTop;\n    }\n\n    set paddingRight(v) {\n        this._paddingRight = v;\n        this._changedDimensions();\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingBottom(v) {\n        this._paddingBottom = v;\n        this._changedDimensions();\n    }\n\n    get paddingBottom() {\n        return this._paddingBottom;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nFlexContainer.ALIGN_ITEMS = [\"flex-start\", \"flex-end\", \"center\", \"stretch\"];\nFlexContainer.ALIGN_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\", \"stretch\"];\nFlexContainer.JUSTIFY_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\"];\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\nimport FlexContainer from \"./FlexContainer.mjs\";\n\nexport default class FlexItem {\n\n    constructor(item) {\n        this._ctr = null;\n        this._item = item;\n        this._grow = 0;\n        this._shrink = FlexItem.SHRINK_AUTO;\n        this._alignSelf = undefined;\n        this._minWidth = 0;\n        this._minHeight = 0;\n        this._maxWidth = 0;\n        this._maxHeight = 0;\n\n        this._marginLeft = 0;\n        this._marginTop = 0;\n        this._marginRight = 0;\n        this._marginBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    get grow() {\n        return this._grow;\n    }\n\n    set grow(v) {\n        if (this._grow === v) return;\n\n        this._grow = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get shrink() {\n        if (this._shrink === FlexItem.SHRINK_AUTO) {\n            return this._getDefaultShrink();\n        }\n        return this._shrink;\n    }\n\n    _getDefaultShrink() {\n        if (this.item.isFlexEnabled()) {\n            return 1;\n        } else {\n            // All non-flex containers are absolutely positioned items with fixed dimensions, and by default not shrinkable.\n            return 0;\n        }\n    }\n\n    set shrink(v) {\n        if (this._shrink === v) return;\n\n        this._shrink = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get alignSelf() {\n        return this._alignSelf;\n    }\n\n    set alignSelf(v) {\n        if (this._alignSelf === v) return;\n\n        if (v === undefined) {\n            this._alignSelf = undefined;\n        } else {\n            if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n                throw new Error(\"Unknown alignSelf, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n            }\n            this._alignSelf = v;\n        }\n\n        this._changed();\n    }\n\n    get minWidth() {\n        return this._minWidth;\n    }\n\n    set minWidth(v) {\n        this._minWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get minHeight() {\n        return this._minHeight;\n    }\n\n    set minHeight(v) {\n        this._minHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    get maxWidth() {\n        return this._maxWidth;\n    }\n\n    set maxWidth(v) {\n        this._maxWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get maxHeight() {\n        return this._maxHeight;\n    }\n\n    set maxHeight(v) {\n        this._maxHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    /**\n     * @note margins behave slightly different than in HTML with regard to shrinking.\n     * In HTML, (outer) margins can be removed when shrinking. In this engine, they will not shrink at all.\n     */\n    set margin(v) {\n        this.marginLeft = v;\n        this.marginTop = v;\n        this.marginRight = v;\n        this.marginBottom = v;\n    }\n\n    get margin() {\n        return this.marginLeft;\n    }\n\n    set marginLeft(v) {\n        this._marginLeft = v;\n        this._changed();\n    }\n\n    get marginLeft() {\n        return this._marginLeft;\n    }\n\n    set marginTop(v) {\n        this._marginTop = v;\n        this._changed();\n    }\n\n    get marginTop() {\n        return this._marginTop;\n    }\n\n    set marginRight(v) {\n        this._marginRight = v;\n        this._changed();\n    }\n\n    get marginRight() {\n        return this._marginRight;\n    }\n\n    set marginBottom(v) {\n        this._marginBottom = v;\n        this._changed();\n    }\n\n    get marginBottom() {\n        return this._marginBottom;\n    }\n    \n    _changed() {\n        if (this.ctr) this.ctr._changedContents();\n    }\n\n    set ctr(v) {\n        this._ctr = v;\n    }\n\n    get ctr() {\n        return this._ctr;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    _resetLayoutSize() {\n        this._resetHorizontalAxisLayoutSize();\n        this._resetVerticalAxisLayoutSize();\n    }\n\n    _resetCrossAxisLayoutSize() {\n        if (this.ctr._horizontal) {\n            this._resetVerticalAxisLayoutSize();\n        } else {\n            this._resetHorizontalAxisLayoutSize();\n        }\n    }\n\n    _resetHorizontalAxisLayoutSize() {\n        let w = FlexUtils.getRelAxisSize(this.item, true);\n        if (this._minWidth) {\n            w = Math.max(this._minWidth, w);\n        }\n        if (this._maxWidth) {\n            w = Math.min(this._maxWidth, w);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, true, w);\n    }\n\n    _resetVerticalAxisLayoutSize() {\n        let h = FlexUtils.getRelAxisSize(this.item, false);\n        if (this._minHeight) {\n            h = Math.max(this._minHeight, h);\n        }\n        if (this._maxHeight) {\n            h = Math.min(this._maxHeight, h);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, false, h);\n    }\n\n    _getCrossAxisMinSizeSetting() {\n        return this._getMinSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getCrossAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getMainAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(this.ctr._horizontal);\n    }\n\n    _getMinSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._minWidth;\n        } else {\n            return this._minHeight;\n        }\n    }\n\n    _getMaxSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._maxWidth;\n        } else {\n            return this._maxHeight;\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutPos() {\n        return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);\n    }\n\n    _setMainAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);\n    }\n\n    _setCrossAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);\n    }\n\n    _getCrossAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);\n    }\n\n    _resizeCrossAxis(size) {\n        return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);\n    }\n\n    _resizeMainAxis(size) {\n        return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);\n    }\n\n    _getMainAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);\n    }\n\n    _getHorizontalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, true);\n    }\n\n    _getVerticalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, false);\n    }\n\n    _getMainAxisMinSizeWithPaddingAndMargin() {\n        return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisMinSizeWithPaddingAndMargin() {\n        return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _getMainAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _hasFixedCrossAxisSize() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);\n    }\n\n    _hasRelCrossAxisSize() {\n        return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);\n    }\n\n}\n\n\nFlexItem.SHRINK_AUTO = -1;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexContainer from \"./FlexContainer.mjs\";\nimport FlexItem from \"./FlexItem.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\n\n/**\n * This is the connection between the render tree with the layout tree of this flex container/item.\n */\nexport default class FlexTarget {\n\n    constructor(target) {\n        this._target = target;\n\n        /**\n         * Possible values (only in case of container):\n         * bit 0: has changed or contains items with changes\n         * bit 1: width changed\n         * bit 2: height changed\n         */\n        this._recalc = 0;\n        \n        this._enabled = false;\n\n        this.x = 0;\n        this.y = 0;\n        this.w = 0;\n        this.h = 0;\n\n        this._originalX = 0;\n        this._originalY = 0;\n        this._originalWidth = 0;\n        this._originalHeight = 0;\n\n        this._flex = null;\n        this._flexItem = null;\n        this._flexItemDisabled = false;\n\n        this._items = null;\n    }\n\n    get flexLayout() {\n        return this.flex ? this.flex._layout : null;\n    }\n\n    layoutFlexTree() {\n        if (this.isFlexEnabled() && this.isChanged()) {\n            this.flexLayout.layoutTree();\n        }\n    }\n\n    get target() {\n        return this._target;\n    }\n\n    get flex() {\n        return this._flex;\n    }\n\n    set flex(v) {\n        if (!v) {\n            if (this.isFlexEnabled()) {\n                this._disableFlex();\n            }\n        } else {\n            if (!this.isFlexEnabled()) {\n                this._enableFlex();\n            }\n            this._flex.patch(v);\n        }\n    }\n\n    get flexItem() {\n        if (this._flexItemDisabled) {\n            return false;\n        }\n        this._ensureFlexItem();\n        return this._flexItem;\n    }\n\n    set flexItem(v) {\n        if (v === false) {\n            if (!this._flexItemDisabled) {\n                const parent = this.flexParent;\n                this._flexItemDisabled = true;\n                this._checkEnabled();\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        } else {\n            this._ensureFlexItem();\n\n            this._flexItem.patch(v);\n\n            if (this._flexItemDisabled) {\n                this._flexItemDisabled = false;\n                this._checkEnabled();\n                const parent = this.flexParent;\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        }\n    }\n\n    _enableFlex() {\n        this._flex = new FlexContainer(this);\n        this._checkEnabled();\n        this.changedDimensions();\n        this._enableChildrenAsFlexItems();\n    }\n\n    _disableFlex() {\n        this.changedDimensions();\n        this._flex = null;\n        this._checkEnabled();\n        this._disableChildrenAsFlexItems();\n    }\n\n    _enableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._enableFlexItem();\n            }\n        }\n    }\n\n    _disableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._disableFlexItem();\n            }\n        }\n    }\n\n    _enableFlexItem() {\n        this._ensureFlexItem();\n        const flexParent = this._target._parent._layout;\n        this._flexItem.ctr = flexParent._flex;\n        flexParent.changedContents();\n        this._checkEnabled();\n    }\n\n    _disableFlexItem() {\n        if (this._flexItem) {\n            this._flexItem.ctr = null;\n        }\n\n        // We keep the flexItem object because it may contain custom settings.\n        this._checkEnabled();\n\n        // Offsets have been changed. We can't recover them, so we'll just clear them instead.\n        this._resetOffsets();\n    }\n\n    _resetOffsets() {\n        this.x = 0;\n        this.y = 0;\n    }\n\n    _ensureFlexItem() {\n        if (!this._flexItem) {\n            this._flexItem = new FlexItem(this);\n        }\n    }\n\n    _checkEnabled() {\n        const enabled = this.isEnabled();\n        if (this._enabled !== enabled) {\n            if (enabled) {\n                this._enable();\n            } else {\n                this._disable();\n            }\n            this._enabled = enabled;\n        }\n    }\n    \n    _enable() {\n        this._setupTargetForFlex();\n        this._target.enableFlexLayout();\n    }\n\n    _disable() {\n        this._restoreTargetToNonFlex();\n        this._target.disableFlexLayout();\n    }\n\n    isEnabled() {\n        return this.isFlexEnabled() || this.isFlexItemEnabled();\n    }\n\n    isFlexEnabled() {\n        return this._flex !== null;\n    }\n\n    isFlexItemEnabled() {\n        return this.flexParent !== null;\n    }\n\n    _restoreTargetToNonFlex() {\n        const target = this._target;\n        target.x = this._originalX;\n        target.y = this._originalY;\n        target.setDimensions(this._originalWidth, this._originalHeight);\n    }\n\n    _setupTargetForFlex() {\n        const target = this._target;\n        this._originalX = target._x;\n        this._originalY = target._y;\n        this._originalWidth = target._w;\n        this._originalHeight = target._h;\n    }\n    \n    setParent(from, to) {\n        if (from && from.isFlexContainer()) {\n            from._layout._changedChildren();\n        }\n\n        if (to && to.isFlexContainer()) {\n            this._enableFlexItem();\n            to._layout._changedChildren();\n        }\n        this._checkEnabled();\n    }\n\n    get flexParent() {\n        if (this._flexItemDisabled) {\n            return null;\n        }\n\n        const parent = this._target._parent;\n        if (parent && parent.isFlexContainer()) {\n            return parent._layout;\n        }\n        return null;\n    }\n\n    setVisible(v) {\n        const parent = this.flexParent;\n        if (parent) {\n            parent._changedChildren();\n        }\n    }\n\n    get items() {\n        if (!this._items) {\n            this._items = this._getFlexItems();\n        }\n        return this._items;\n    }\n\n    _getFlexItems() {\n        const items = [];\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const item = children[i];\n                if (item.visible) {\n                    if (item.isFlexItem()) {\n                        items.push(item.layout);\n                    }\n                }\n            }\n        }\n        return items;\n    }\n\n    _changedChildren() {\n        this._clearFlexItemsCache();\n        this.changedContents();\n    }\n\n    _clearFlexItemsCache() {\n        this._items = null;\n    }\n\n    setLayout(x, y, w, h) {\n        let originalX = this._originalX;\n        let originalY = this._originalY;\n        if (this.funcX) {\n            originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));\n        }\n        if (this.funcY) {\n            originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));\n        }\n\n        if (this.isFlexItemEnabled()) {\n            this.target.setLayout(x + originalX, y + originalY, w, h);\n        } else {\n            // Reuse the x,y 'settings'.\n            this.target.setLayout(originalX, originalY, w, h);\n        }\n    }\n\n    changedDimensions(changeWidth = true, changeHeight = true) {\n        this._updateRecalc(changeWidth, changeHeight);\n    }\n\n    changedContents() {\n        this._updateRecalc();\n    }\n\n    forceLayout() {\n        this._updateRecalc();\n    }\n\n    isChanged() {\n        return this._recalc > 0;\n    }\n\n    _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {\n        if (this.isFlexEnabled()) {\n            const layout = this._flex._layout;\n\n            // When something internal changes, it can have effect on the external dimensions.\n            changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);\n            changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);\n        }\n\n        const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);\n        const newRecalcFlags = this.getNewRecalcFlags(recalc);\n        this._recalc |= recalc;\n        if (newRecalcFlags > 1) {\n            if (this.flexParent) {\n                this.flexParent._updateRecalcBottomUp(recalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    getNewRecalcFlags(flags) {\n        return (7 - this._recalc) & flags;\n    }\n\n    _updateRecalcBottomUp(childRecalc) {\n        const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);\n        const newRecalcFlags = this.getNewRecalcFlags(newRecalc);\n        this._recalc |= newRecalc;\n        if (newRecalcFlags > 1) {\n            const flexParent = this.flexParent;\n            if (flexParent) {\n                flexParent._updateRecalcBottomUp(newRecalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    _getRecalcFromChangedChildRecalc(childRecalc) {\n        const layout = this._flex._layout;\n\n        const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;\n        const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;\n\n        const crossAxisDimensionsChangedInChild = (childRecalc & crossAxisRecalcFlag);\n        if (!crossAxisDimensionsChangedInChild) {\n            const mainAxisDimensionsChangedInChild = (childRecalc & mainAxisRecalcFlag);\n            if (mainAxisDimensionsChangedInChild) {\n                const mainAxisIsWrapping = layout.isWrapping();\n                if (mainAxisIsWrapping) {\n                    const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();\n                    if (crossAxisIsFitToContents) {\n                        // Special case: due to wrapping, the cross axis size may be changed.\n                        childRecalc += crossAxisRecalcFlag;\n                    }\n                }\n            }\n        }\n\n        let isWidthDynamic = layout.isAxisFitToContents(true);\n        let isHeightDynamic = layout.isAxisFitToContents(false);\n\n        if (layout.shrunk) {\n            // If during previous layout this container was 'shrunk', any changes may change the 'min axis size' of the\n            // contents, leading to a different axis size on this container even when it was not 'fit to contents'.\n            if (layout._horizontal) {\n                isWidthDynamic = true;\n            } else {\n                isHeightDynamic = true;\n            }\n        }\n\n        const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);\n\n        const combinedRecalc = childRecalc & localRecalc;\n        return combinedRecalc;\n    }\n\n    get recalc() {\n        return this._recalc;\n    }\n\n    clearRecalcFlag() {\n        this._recalc = 0;\n    }\n\n    enableLocalRecalcFlag() {\n        this._recalc = 1;\n    }\n\n    get originalX() {\n        return this._originalX;\n    }\n\n    setOriginalXWithoutUpdatingLayout(v) {\n        this._originalX = v;\n    }\n\n    get originalY() {\n        return this._originalY;\n    }\n\n    setOriginalYWithoutUpdatingLayout(v) {\n        this._originalY = v;\n    }\n\n    get originalWidth() {\n        return this._originalWidth;\n    }\n\n    set originalWidth(v) {\n        if (this._originalWidth !== v) {\n            this._originalWidth = v;\n            this.changedDimensions(true, false);\n        }\n    }\n\n    get originalHeight() {\n        return this._originalHeight;\n    }\n\n    set originalHeight(v) {\n        if (this._originalHeight !== v) {\n            this._originalHeight = v;\n            this.changedDimensions(false, true);\n        }\n    }\n\n    get funcX() {\n        return this._target.funcX;\n    }\n\n    get funcY() {\n        return this._target.funcY;\n    }\n\n    get funcW() {\n        return this._target.funcW;\n    }\n\n    get funcH() {\n        return this._target.funcH;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TextureSource {\n\n    constructor(manager, loader = null) {\n        this.id = TextureSource.id++;\n\n        this.manager = manager;\n\n        this.stage = manager.stage;\n\n        /**\n         * All enabled textures (textures that are used by visible elements).\n         * @type {Set<Texture>}\n         */\n        this.textures = new Set();\n\n        /**\n         * The number of active textures (textures that have at least one active element).\n         * @type {number}\n         * @private\n         */\n        this._activeTextureCount = 0;\n\n        /**\n         * The factory for the source of this texture.\n         * @type {Function}\n         */\n        this.loader = loader;\n\n        /**\n         * Identifier for reuse.\n         * @type {String}\n         */\n        this.lookupId = null;\n\n        /**\n         * If set, this.is called when the texture source is no longer displayed (this.components.size becomes 0).\n         * @type {Function}\n         */\n        this._cancelCb = null;\n\n        /**\n         * Loading since timestamp in millis.\n         * @type {number}\n         */\n        this.loadingSince = 0;\n\n        this.w = 0;\n        this.h = 0;\n\n        this._nativeTexture = null;\n\n        /**\n         * If true, then this.texture source is never freed from memory during garbage collection.\n         * @type {boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Sub-object with texture-specific rendering information.\n         * For images, contains the src property, for texts, contains handy rendering information.\n         * @type {Object}\n         */\n        this.renderInfo = null;\n\n        /**\n         * Generated for 'renderToTexture'.\n         * @type {boolean}\n         * @private\n         */\n        this._isResultTexture = !this.loader;\n\n        /**\n         * Contains the load error, if the texture source could previously not be loaded.\n         * @type {object}\n         * @private\n         */\n        this._loadError = null;\n\n        /**\n         *  Hold a reference to the javascript variable which contains the texture, this is not required for WebGL in WebBrowsers but is required for Spark runtime.\n         * @type {object}\n         * @private\n         */\n        this._imageRef = null;\n\n\n        /**\n         * Track whether or not there is an alpha channel in this source\n         * @type {boolean}\n         * @private\n         */\n         this._hasAlpha = false;\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    get loadError() {\n        return this._loadError;\n    }\n\n    addTexture(v) {\n        if (!this.textures.has(v)) {\n            this.textures.add(v);\n        }\n    }\n\n    removeTexture(v) {\n        this.textures.delete(v);\n    }\n\n    incActiveTextureCount() {\n        this._activeTextureCount++;\n        if (this._activeTextureCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveTextureCount() {\n        this._activeTextureCount--;\n        if (this._activeTextureCount === 0) {\n            this.becomesUnused();\n        }\n    }\n\n    get isResultTexture() {\n        return this._isResultTexture;\n    }\n\n    set isResultTexture(v) {\n        this._isResultTexture = v;\n    }\n\n    forEachEnabledElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(cb);\n        });\n    }\n\n    hasEnabledElements() {\n        return this.textures.size > 0;\n    }\n\n    forEachActiveElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(element => {\n                if (element.active) {\n                    cb(element);\n                }\n            });\n        });\n    }\n\n    getRenderWidth() {\n        return this.w;\n    }\n\n    getRenderHeight() {\n        return this.h;\n    }\n\n    allowCleanup() {\n        return !this.permanent && !this.isUsed();\n    }\n\n    becomesUsed() {\n        // Even while the texture is being loaded, make sure it is on the lookup map so that others can reuse it.\n        this.load();\n    }\n\n    becomesUnused() {\n        this.cancel();\n    }\n\n    cancel() {\n        if (this.isLoading()) {\n            if (this._cancelCb) {\n                this._cancelCb(this);\n\n                // Clear callback to avoid memory leaks.\n                this._cancelCb = null;\n            }\n            this.loadingSince = 0;\n        }\n    }\n\n    isLoaded() {\n        return !!this._nativeTexture;\n    }\n\n    isLoading() {\n        return (this.loadingSince > 0);\n    }\n\n    isError() {\n        return !!this._loadError;\n    }\n\n    reload() {\n        this.free();\n        if (this.isUsed()) {\n            this.load();\n        }\n    }\n\n    load(forceSync = false) {\n        // From the moment of loading (when a texture source becomes used by active elements)\n        if (this.isResultTexture) {\n            // Element result texture source, for which the loading is managed by the core.\n            return;\n        }\n\n        if (!this._nativeTexture && !this.isLoading()) {\n            this.loadingSince = (new Date()).getTime();\n            this._cancelCb = this.loader((err, options) => {\n                // Ignore loads that come in after a cancel.\n                if (this.isLoading()) {\n                    // Clear callback to avoid memory leaks.\n                    this._cancelCb = null;\n\n                    if (this.manager.stage.destroyed) {\n                        // Ignore async load when stage is destroyed.\n                        return;\n                    }\n                    if (err) {\n                        // Emit txError.\n                        this.onError(err);\n                    } else if (options && options.source) {\n                        if (!this.stage.isUpdatingFrame() && !forceSync && (options.throttle !== false)) {\n                            const textureThrottler = this.stage.textureThrottler;\n                            this._cancelCb = textureThrottler.genericCancelCb;\n                            textureThrottler.add(this, options);\n                        } else {\n                            this.processLoadedSource(options);\n                        }\n                    }\n                }\n            }, this);\n        }\n    }\n\n    processLoadedSource(options) {\n        this.loadingSince = 0;\n        this.setSource(options);\n    }\n\n    setSource(options) {\n        const source = options.source;\n\n        this._hasAlpha = (options ? (options.hasAlpha || false) : false);\n        this.w = source.width || (options && options.w) || 0;\n        this.h = source.height || (options && options.h) || 0;\n\n        if (options && options.renderInfo) {\n            // Assign to id in cache so that it can be reused.\n            this.renderInfo = options.renderInfo;\n        }\n\n        this.permanent = !!options.permanent;\n\n        if (options && options.imageRef)\n            this._imageRef = options.imageRef;\n        if (options && options.flipTextureY) {\n            this._flipTextureY = options.flipTextureY;\n        } else {\n            this._flipTextureY = false;\n        }\n\n        if (this._isNativeTexture(source)) {\n            // Texture managed by caller.\n            this._nativeTexture = source;\n\n            this.w = this.w || source.w;\n            this.h = this.h || source.h;\n\n            // WebGLTexture objects are by default;\n            this.permanent = options.hasOwnProperty('permanent') ? options.permanent : true;\n        } else {\n            this.manager.uploadTextureSource(this, options);\n        }\n\n        // Must be cleared when reload is succesful.\n        this._loadError = null;\n\n        this.onLoad();\n    }\n\n    isUsed() {\n        return this._activeTextureCount > 0;\n    }\n\n    onLoad() {\n        if (this.isUsed()) {\n            this.textures.forEach(texture => {\n                texture.onLoad();\n            });\n        }\n    }\n\n    forceRenderUpdate() {\n        // Userland should call this method after changing the nativeTexture manually outside of the framework\n        //  (using tex[Sub]Image2d for example).\n\n        if (this._nativeTexture) {\n            // Change 'update' flag. This is currently not used by the framework but is handy in userland.\n            this._nativeTexture.update = this.stage.frameCounter;\n        }\n\n        this.forEachActiveElement(function (element) {\n            element.forceRenderUpdate();\n        });\n\n    }\n\n    forceUpdateRenderCoords() {\n        this.forEachActiveElement(function (element) {\n            element._updateTextureCoords();\n        });\n    }\n\n    get nativeTexture() {\n        return this._nativeTexture;\n    }\n\n    clearNativeTexture() {\n        this._nativeTexture = null;\n        //also clear the reference to the texture variable.\n        this._imageRef = null;\n    }\n\n    /**\n     * Used for result textures.\n     */\n    replaceNativeTexture(newNativeTexture, w, h) {\n        let prevNativeTexture = this._nativeTexture;\n        // Loaded by core.\n        this._nativeTexture = newNativeTexture;\n        this.w = w;\n        this.h = h;\n\n        if (!prevNativeTexture && this._nativeTexture) {\n            this.forEachActiveElement(element => element.onTextureSourceLoaded());\n        }\n\n        if (!this._nativeTexture) {\n            this.forEachActiveElement(element => element._setDisplayedTexture(null));\n        }\n\n        // Dimensions must be updated also on enabled elements, as it may force it to go within bounds.\n        this.forEachEnabledElement(element => element._updateDimensions());\n\n        // Notice that the sprite map must never contain render textures.\n    }\n\n    onError(e) {\n        this._loadError = e;\n        this.loadingSince = 0;\n        console.error('[Lightning] texture load error', e, this.lookupId);\n        this.forEachActiveElement(element => element.onTextureSourceLoadError(e));\n    }\n\n    free() {\n        if (this.isLoaded()) {\n            this.manager.freeTextureSource(this);\n        }\n    }\n\n    _isNativeTexture(source) {\n        if (Utils.isNode) {\n            return source.constructor.name === \"WebGLTexture\";\n        }\n\n        if ('WebGLTexture' in window) {\n            return source instanceof WebGLTexture;\n        }\n\n        return false;\n    }\n\n}\n\nTextureSource.prototype.isTextureSource = true;\n\nTextureSource.id = 1;\n\nimport Utils from \"./Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from '../TextureSource.mjs';\n\nexport default class ElementTexturizer {\n\n    constructor(elementCore) {\n\n        this._element = elementCore.element;\n        this._core = elementCore;\n\n        this.ctx = this._core.ctx;\n\n        this._enabled = false;\n        this.lazy = false;\n        this._colorize = false;\n\n        this._renderTexture = null;\n\n        this._renderTextureReused = false;\n\n        this._resultTextureSource = null;\n\n        this._renderOffscreen = false;\n\n        this.empty = false;\n    }\n\n    get enabled() {\n        return this._enabled;\n    }\n\n    set enabled(v) {\n        this._enabled = v;\n        this._core.updateRenderToTextureEnabled();\n    }\n\n    get renderOffscreen() {\n        return this._renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this._renderOffscreen = v;\n        this._core.setHasRenderUpdates(1);\n\n        // This enforces rechecking the 'within bounds'.\n        this._core._setRecalc(6);\n    }\n\n    get colorize() {\n        return this._colorize;\n    }\n\n    set colorize(v) {\n        if (this._colorize !== v) {\n            this._colorize = v;\n\n            // Only affects the finally drawn quad.\n            this._core.setHasRenderUpdates(1);\n        }\n    }\n\n    _getTextureSource() {\n        if (!this._resultTextureSource) {\n            this._resultTextureSource = new TextureSource(this._element.stage.textureManager);\n            this.updateResultTexture();\n        }\n        return this._resultTextureSource;\n    }\n\n    hasResultTexture() {\n        return !!this._resultTextureSource;\n    }\n\n    resultTextureInUse() {\n        return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();\n    }\n\n    updateResultTexture() {\n        let resultTexture = this.getResultTexture();\n        if (this._resultTextureSource) {\n            if (this._resultTextureSource.nativeTexture !== resultTexture) {\n                let w = resultTexture ? resultTexture.w : 0;\n                let h = resultTexture ? resultTexture.h : 0;\n                this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);\n            }\n\n            // Texture will be updated: all elements using the source need to be updated as well.\n            this._resultTextureSource.forEachEnabledElement(element => {\n                element._updateDimensions();\n                element.core.setHasRenderUpdates(3);\n            });\n        }\n    }\n\n    mustRenderToTexture() {\n        // Check if we must really render as texture.\n        if (this._enabled && !this.lazy) {\n            return true;\n        } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {\n            // Static-only: if renderToTexture did not need to update during last drawn frame, generate it as a cache.\n            return true;\n        }\n        return false;\n    }\n\n    deactivate() {\n        this.release();\n    }\n\n    get renderTextureReused() {\n        return this._renderTextureReused;\n    }\n\n    release() {\n        this.releaseRenderTexture();\n    }\n\n    releaseRenderTexture() {\n        if (this._renderTexture) {\n            if (!this._renderTextureReused) {\n                this.ctx.releaseRenderTexture(this._renderTexture);\n            }\n            this._renderTexture = null;\n            this._renderTextureReused = false;\n            this.updateResultTexture();\n        }\n    }\n\n    // Reuses the specified texture as the render texture (in ancestor).\n    reuseTextureAsRenderTexture(nativeTexture) {\n        if (this._renderTexture !== nativeTexture) {\n            this.releaseRenderTexture();\n            this._renderTexture = nativeTexture;\n            this._renderTextureReused = true;\n        }\n    }\n\n    hasRenderTexture() {\n        return !!this._renderTexture;\n    }\n\n    getRenderTexture() {\n        if (!this._renderTexture) {\n            this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);\n            this._renderTextureReused = false;\n        }\n        return this._renderTexture;\n    }\n\n    getResultTexture() {\n        return this._renderTexture;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexTarget from \"../../flex/FlexTarget.mjs\";\n\nexport default class ElementCore {\n\n    constructor(element) {\n        this._element = element;\n\n        this.ctx = element.stage.ctx;\n\n        // The memory layout of the internal variables is affected by their position in the constructor.\n        // It boosts performance to order them by usage of cpu-heavy functions (renderSimple and update).\n\n        this._recalc = 0;\n\n        this._parent = null;\n\n        this._onUpdate = null;\n\n        this._pRecalc = 0;\n\n        this._worldContext = new ElementCoreContext();\n\n        this._hasUpdates = false;\n\n        this._localAlpha = 1;\n\n        this._onAfterCalcs = null;\n\n        this._onAfterUpdate = null;\n\n        // All local translation/transform updates: directly propagated from x/y/w/h/scale/whatever.\n        this._localPx = 0;\n        this._localPy = 0;\n\n        this._localTa = 1;\n        this._localTb = 0;\n        this._localTc = 0;\n        this._localTd = 1;\n\n        this._isComplex = false;\n\n        this._dimsUnknown = false;\n\n        this._clipping = false;\n\n        // Used by both update and render.\n        this._zSort = false;\n\n        this._outOfBounds = 0;\n\n        /**\n         * The texture source to be displayed.\n         * @type {TextureSource}\n         */\n        this._displayedTextureSource = null;\n\n        this._zContextUsage = 0;\n\n        this._children = null;\n\n        this._hasRenderUpdates = 0;\n\n        this._zIndexedChildren = null;\n\n        this._renderContext = this._worldContext;\n\n        this.renderState = this.ctx.renderState;\n\n        this._scissor = null;\n\n        // The ancestor ElementCore that owns the inherited shader. Null if none is active (default shader).\n        this._shaderOwner = null;\n\n\n        this._updateTreeOrder = 0;\n\n        this._colorUl = this._colorUr = this._colorBl = this._colorBr = 0xFFFFFFFF;\n\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n\n        this._optFlags = 0;\n        this._funcX = null;\n        this._funcY = null;\n        this._funcW = null;\n        this._funcH = null;\n\n        this._scaleX = 1;\n        this._scaleY = 1;\n        this._pivotX = 0.5;\n        this._pivotY = 0.5;\n        this._mountX = 0;\n        this._mountY = 0;\n        this._rotation = 0;\n\n        this._alpha = 1;\n        this._visible = true;\n\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n\n        this._zIndex = 0;\n        this._forceZIndexContext = false;\n        this._zParent = null;\n\n        this._isRoot = false;\n\n        /**\n         * Iff true, during zSort, this element should be 're-sorted' because either:\n         * - zIndex did chang\n         * - zParent did change\n         * - element was moved in the render tree\n         * @type {boolean}\n         */\n        this._zIndexResort = false;\n\n        this._shader = null;\n\n        // Element is rendered on another texture.\n        this._renderToTextureEnabled = false;\n\n        this._texturizer = null;\n\n        this._useRenderToTexture = false;\n\n        this._boundsMargin = null;\n\n        this._recBoundsMargin = null;\n\n        this._withinBoundsMargin = false;\n\n        this._viewport = null;\n\n        this._clipbox = true;\n\n        this.render = this._renderSimple;\n\n        this._layout = null;\n    }\n\n    get offsetX() {\n        if (this._funcX) {\n            return this._funcX;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalX;\n            } else {\n                return this._x;\n            }\n        }\n    }\n\n    set offsetX(v) {\n        if (Utils.isFunction(v)) {\n            this.funcX = v;\n        } else {\n            this._disableFuncX();\n            if (this.hasFlexLayout()) {\n                this.x += (v - this._layout.originalX);\n                this._layout.setOriginalXWithoutUpdatingLayout(v);\n            } else {\n                this.x = v;\n            }\n        }\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        if (v !== this._x) {\n            this._updateLocalTranslateDelta(v - this._x, 0);\n            this._x = v;\n        }\n    }\n\n    get funcX() {\n        return (this._optFlags & 1 ? this._funcX : null);\n    }\n\n    set funcX(v) {\n        if (this._funcX !== v) {\n            this._optFlags |= 1;\n            this._funcX = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalXWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._x = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncX() {\n        this._optFlags = this._optFlags & (0xFFFF - 1);\n        this._funcX = null;\n    }\n\n    get offsetY() {\n        if (this._funcY) {\n            return this._funcY;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalY;\n            } else {\n                return this._y;\n            }\n        }\n    }\n\n    set offsetY(v) {\n        if (Utils.isFunction(v)) {\n            this.funcY = v;\n        } else {\n            this._disableFuncY();\n            if (this.hasFlexLayout()) {\n                this.y += (v - this._layout.originalY);\n                this._layout.setOriginalYWithoutUpdatingLayout(v);\n            } else {\n                this.y = v;\n            }\n        }\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        if (v !== this._y) {\n            this._updateLocalTranslateDelta(0, v - this._y);\n            this._y = v;\n        }\n    }\n\n    get funcY() {\n        return (this._optFlags & 2 ? this._funcY : null);\n    }\n\n    set funcY(v) {\n        if (this._funcY !== v) {\n            this._optFlags |= 2;\n            this._funcY = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalYWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._y = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncY() {\n        this._optFlags = this._optFlags & (0xFFFF - 2);\n        this._funcY = null;\n    }\n\n    get funcW() {\n        return (this._optFlags & 4 ? this._funcW : null);\n    }\n\n    set funcW(v) {\n        if (this._funcW !== v) {\n            this._optFlags |= 4;\n            this._funcW = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalWidth = 0;\n                this.layout.changedDimensions(true, false);\n            } else {\n                this._w = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncW() {\n        this._optFlags = this._optFlags & (0xFFFF - 4);\n        this._funcW = null;\n    }\n\n    get funcH() {\n        return (this._optFlags & 8 ? this._funcH : null);\n    }\n\n    set funcH(v) {\n        if (this._funcH !== v) {\n            this._optFlags |= 8;\n            this._funcH = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalHeight = 0;\n                this.layout.changedDimensions(false, true);\n            } else {\n                this._h = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncH() {\n        this._optFlags = this._optFlags & (0xFFFF - 8);\n        this._funcH = null;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    getRenderWidth() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalWidth;\n        } else {\n            return this._w;\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    getRenderHeight() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalHeight;\n        } else {\n            return this._h;\n        }\n    }\n\n    get scaleX() {\n        return this._scaleX;\n    }\n\n    set scaleX(v) {\n        if (this._scaleX !== v) {\n            this._scaleX = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scaleY() {\n        return this._scaleY;\n    }\n\n    set scaleY(v) {\n        if (this._scaleY !== v) {\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scale() {\n        return this.scaleX;\n    }\n\n    set scale(v) {\n        if (this._scaleX !== v || this._scaleY !== v) {\n            this._scaleX = v;\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        if (this._pivotX !== v) {\n            this._pivotX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        if (this._pivotY !== v) {\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivot() {\n        return this._pivotX;\n    }\n\n    set pivot(v) {\n        if (this._pivotX !== v || this._pivotY !== v) {\n            this._pivotX = v;\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountX() {\n        return this._mountX;\n    }\n\n    set mountX(v) {\n        if (this._mountX !== v) {\n            this._mountX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountY() {\n        return this._mountY;\n    }\n\n    set mountY(v) {\n        if (this._mountY !== v) {\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mount() {\n        return this._mountX;\n    }\n\n    set mount(v) {\n        if (this._mountX !== v || this._mountY !== v) {\n            this._mountX = v;\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(v) {\n        if (this._rotation !== v) {\n            this._rotation = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get alpha() {\n        return this._alpha;\n    }\n\n    set alpha(v) {\n        // Account for rounding errors.\n        v = (v > 1 ? 1 : (v < 1e-14 ? 0 : v));\n        if (this._alpha !== v) {\n            let prev = this._alpha;\n            this._alpha = v;\n            this._updateLocalAlpha();\n            if ((prev === 0) !== (v === 0)) {\n                this._element._updateEnabledFlag();\n            }\n        }\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    set visible(v) {\n        if (this._visible !== v) {\n            this._visible = v;\n            this._updateLocalAlpha();\n            this._element._updateEnabledFlag();\n\n            if (this.hasFlexLayout()) {\n                this.layout.setVisible(v);\n            }\n        }\n    }\n\n    _updateLocalTransform() {\n        if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {\n            // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes\n            let _sr = Math.sin(this._rotation);\n            let _cr = Math.cos(this._rotation);\n\n            this._setLocalTransform(\n                _cr * this._scaleX,\n                -_sr * this._scaleY,\n                _sr * this._scaleX,\n                _cr * this._scaleY\n            );\n        } else {\n            this._setLocalTransform(\n                this._scaleX,\n                0,\n                0,\n                this._scaleY\n            );\n        }\n        this._updateLocalTranslate();\n    };\n\n    _updateLocalTranslate() {\n        this._recalcLocalTranslate();\n        this._triggerRecalcTranslate();\n    };\n\n    _recalcLocalTranslate() {\n        let pivotXMul = this._pivotX * this._w;\n        let pivotYMul = this._pivotY * this._h;\n        let px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;\n        let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;\n        px -= this._mountX * this._w;\n        py -= this._mountY * this._h;\n        this._localPx = px;\n        this._localPy = py;\n    }\n\n    _updateLocalTranslateDelta(dx, dy) {\n        this._addLocalTranslate(dx, dy);\n    };\n\n    _updateLocalAlpha() {\n        this._setLocalAlpha(this._visible ? this._alpha : 0);\n    };\n\n    /**\n     * @param {number} type\n     * 0: no updates\n     * 1: re-invoke shader\n     * 3: re-create render texture and re-invoke shader\n     */\n    setHasRenderUpdates(type) {\n        if (this._worldContext.alpha) {\n            // Ignore if 'world invisible'. Render updates will be reset to 3 for every element that becomes visible.\n            let p = this;\n            p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);\n            while ((p = p._parent) && (p._hasRenderUpdates !== 3)) {\n                p._hasRenderUpdates = 3;\n            }\n        }\n    }\n\n    /**\n     * @param {Number} type\n     *   1: alpha\n     *   2: translate\n     *   4: transform\n     * 128: becomes visible\n     * 256: flex layout updated\n     */\n    _setRecalc(type) {\n        this._recalc |= type;\n\n        this._setHasUpdates();\n\n        // Any changes in descendants should trigger texture updates.\n        if (this._parent) {\n            this._parent.setHasRenderUpdates(3);\n        }\n    }\n\n    _setHasUpdates() {\n        let p = this;\n        while (p && !p._hasUpdates) {\n            p._hasUpdates = true;\n            p = p._parent;\n        }\n    }\n\n    getParent() {\n        return this._parent;\n    }\n\n    setParent(parent) {\n        if (parent !== this._parent) {\n            let prevIsZContext = this.isZContext();\n            let prevParent = this._parent;\n            this._parent = parent;\n\n            // Notify flex layout engine.\n            if (this._layout || (parent && parent.isFlexContainer())) {\n                this.layout.setParent(prevParent, parent);\n            }\n\n            if (prevParent) {\n                // When elements are deleted, the render texture must be re-rendered.\n                prevParent.setHasRenderUpdates(3);\n            }\n\n            this._setRecalc(1 + 2 + 4);\n\n            if (this._parent) {\n                // Force parent to propagate hasUpdates flag.\n                this._parent._setHasUpdates();\n            }\n\n            if (this._zIndex === 0) {\n                this.setZParent(parent);\n            } else {\n                this.setZParent(parent ? parent.findZContext() : null);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(prevParent.findZContext());\n                }\n            }\n\n            // Tree order did change: even if zParent stays the same, we must resort.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n\n            if (!this._shader) {\n                let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;\n                if (newShaderOwner !== this._shaderOwner) {\n                    this.setHasRenderUpdates(1);\n                    this._setShaderOwnerRecursive(newShaderOwner);\n                }\n            }\n        }\n    };\n\n    enableZSort(force = false) {\n        if (!this._zSort && this._zContextUsage > 0) {\n            this._zSort = true;\n            if (force) {\n                // ZSort must be done, even if this element is invisible.\n                // This is done to prevent memory leaks when removing element from inactive render branches.\n                this.ctx.forceZSort(this);\n            }\n        }\n    }\n\n    addChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children.splice(index, 0, child);\n        child.setParent(this);\n    };\n\n    setChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children[index].setParent(null);\n        this._children[index] = child;\n        child.setParent(this);\n    }\n\n    removeChildAt(index) {\n        let child = this._children[index];\n        this._children.splice(index, 1);\n        child.setParent(null);\n    };\n\n    removeChildren() {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i].setParent(null);\n            }\n\n            this._children.splice(0);\n\n            if (this._zIndexedChildren) {\n                this._zIndexedChildren.splice(0);\n            }\n        }\n    };\n\n    syncChildren(removed, added, order) {\n        this._children = order;\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i].setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            added[i].setParent(this);\n        }\n    }\n\n    moveChild(fromIndex, toIndex) {\n        let c = this._children[fromIndex];\n        this._children.splice(fromIndex, 1);\n        this._children.splice(toIndex, 0, c);\n\n        // Tree order changed: must resort!;\n        this._zIndexResort = true;\n        if (this._zParent) {\n            this._zParent.enableZSort();\n        }\n    }\n\n    _setLocalTransform(a, b, c, d) {\n        this._setRecalc(4);\n        this._localTa = a;\n        this._localTb = b;\n        this._localTc = c;\n        this._localTd = d;\n\n        // We also regard negative scaling as a complex case, so that we can optimize the non-complex case better.\n        this._isComplex = (b !== 0) || (c !== 0) || (a < 0) || (d < 0);\n    };\n\n    _addLocalTranslate(dx, dy) {\n        this._localPx += dx;\n        this._localPy += dy;\n        this._triggerRecalcTranslate();\n    }\n\n    _setLocalAlpha(a) {\n        if (!this._worldContext.alpha && ((this._parent && this._parent._worldContext.alpha) && a)) {\n            // Element is becoming visible. We need to force update.\n            this._setRecalc(1 + 128);\n        } else {\n            this._setRecalc(1);\n        }\n\n        if (a < 1e-14) {\n            // Tiny rounding errors may cause failing visibility tests.\n            a = 0;\n        }\n\n        this._localAlpha = a;\n    };\n\n    setDimensions(w, h, isEstimate = this._dimsUnknown) {\n        // In case of an estimation, the update loop should perform different bound checks.\n        this._dimsUnknown = isEstimate;\n\n        if (this.hasFlexLayout()) {\n            this._layout.originalWidth = w;\n            this._layout.originalHeight = h;\n        } else {\n            if (this._w !== w || this._h !== h) {\n                this._updateDimensions(w, h);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _updateDimensions(w, h) {\n        if (this._w !== w || this._h !== h) {\n            this._w = w;\n            this._h = h;\n\n            this._triggerRecalcTranslate();\n\n            if (this._texturizer) {\n                this._texturizer.releaseRenderTexture();\n                this._texturizer.updateResultTexture();\n            }\n            // Due to width/height change: update the translation vector.\n            this._updateLocalTranslate();\n        }\n    }\n\n    setTextureCoords(ulx, uly, brx, bry) {\n        this.setHasRenderUpdates(3);\n\n        this._ulx = ulx;\n        this._uly = uly;\n        this._brx = brx;\n        this._bry = bry;\n    };\n\n    get displayedTextureSource() {\n        return this._displayedTextureSource;\n    }\n\n    setDisplayedTextureSource(textureSource) {\n        this.setHasRenderUpdates(3);\n        this._displayedTextureSource = textureSource;\n    };\n\n    get isRoot() {\n        return this._isRoot;\n    }\n\n    setAsRoot() {\n        // Use parent dummy.\n        this._parent = new ElementCore(this._element);\n\n        // After setting root, make sure it's updated.\n        this._parent._hasRenderUpdates = 3;\n        this._parent._hasUpdates = true;\n\n        // Root is, and will always be, the primary zContext.\n        this._isRoot = true;\n\n        this.ctx.root = this;\n\n        // Set scissor area of 'fake parent' to stage's viewport.\n        this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];\n        this._parent._scissor = this._parent._viewport;\n\n        // When recBoundsMargin is null, the defaults are used (100 for all sides).\n        this._parent._recBoundsMargin = null;\n\n        this._setRecalc(1 + 2 + 4);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while (p = p._parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    isZContext() {\n        return (this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent);\n    };\n\n    findZContext() {\n        if (this.isZContext()) {\n            return this;\n        } else {\n            return this._parent.findZContext();\n        }\n    };\n\n    setZParent(newZParent) {\n        if (this._zParent !== newZParent) {\n            if (this._zParent !== null) {\n                if (this._zIndex !== 0) {\n                    this._zParent.decZContextUsage();\n                }\n\n                // We must filter out this item upon the next resort.\n                this._zParent.enableZSort();\n            }\n\n            if (newZParent !== null) {\n                let hadZContextUsage = (newZParent._zContextUsage > 0);\n\n                // @pre: new parent's children array has already been modified.\n                if (this._zIndex !== 0) {\n                    newZParent.incZContextUsage();\n                }\n\n                if (newZParent._zContextUsage > 0) {\n                    if (!hadZContextUsage && (this._parent === newZParent)) {\n                        // This child was already in the children list.\n                        // Do not add double.\n                    } else {\n                        // Add new child to array.\n                        newZParent._zIndexedChildren.push(this);\n                    }\n\n                    // Order should be checked.\n                    newZParent.enableZSort();\n                }\n            }\n\n            this._zParent = newZParent;\n\n            // Newly added element must be marked for resort.\n            this._zIndexResort = true;\n        }\n    };\n\n    incZContextUsage() {\n        this._zContextUsage++;\n        if (this._zContextUsage === 1) {\n            if (!this._zIndexedChildren) {\n                this._zIndexedChildren = [];\n            }\n            if (this._children) {\n                // Copy.\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._zIndexedChildren.push(this._children[i]);\n                }\n                // Initially, children are already sorted properly (tree order).\n                this._zSort = false;\n            }\n        }\n    };\n\n    decZContextUsage() {\n        this._zContextUsage--;\n        if (this._zContextUsage === 0) {\n            this._zSort = false;\n            this._zIndexedChildren.splice(0);\n        }\n    };\n\n    get zIndex() {\n        return this._zIndex;\n    }\n\n    set zIndex(zIndex) {\n        if (this._zIndex !== zIndex) {\n            this.setHasRenderUpdates(1);\n\n            let newZParent = this._zParent;\n\n            let prevIsZContext = this.isZContext();\n            if (zIndex === 0 && this._zIndex !== 0) {\n                if (this._parent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.decZContextUsage();\n                    }\n                } else {\n                    newZParent = this._parent;\n                }\n            } else if (zIndex !== 0 && this._zIndex === 0) {\n                newZParent = this._parent ? this._parent.findZContext() : null;\n                if (newZParent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.incZContextUsage();\n                        this._zParent.enableZSort();\n                    }\n                }\n            } else if (zIndex !== this._zIndex) {\n                if (this._zParent && this._zParent._zContextUsage) {\n                    this._zParent.enableZSort();\n                }\n            }\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(null);\n            }\n\n            this._zIndex = zIndex;\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(newZParent);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(this._parent.findZContext());\n                }\n            }\n\n            // Make sure that resort is done.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n        }\n    };\n\n    get forceZIndexContext() {\n        return this._forceZIndexContext;\n    }\n\n    set forceZIndexContext(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevIsZContext = this.isZContext();\n        this._forceZIndexContext = v;\n\n        if (prevIsZContext !== this.isZContext()) {\n            if (!this.isZContext()) {\n                this.disableZContext();\n            } else {\n                this.enableZContext(this._parent.findZContext());\n            }\n        }\n    };\n\n    enableZContext(prevZContext) {\n        if (prevZContext && prevZContext._zContextUsage > 0) {\n            // Transfer from upper z context to this z context.\n            const results = this._getZIndexedDescs();\n            results.forEach((c) => {\n                if (this.isAncestorOf(c) && c._zIndex !== 0) {\n                    c.setZParent(this);\n                }\n            });\n        }\n    }\n\n    _getZIndexedDescs() {\n        const results = [];\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n        return results;\n    }\n\n    _getZIndexedDescsRec(results) {\n        if (this._zIndex) {\n            results.push(this);\n        } else if (this._children && !this.isZContext()) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n    }\n\n    disableZContext() {\n        // Transfer from this z context to upper z context.\n        if (this._zContextUsage > 0) {\n            let newZParent = this._parent.findZContext();\n\n            // Make sure that z-indexed children are up to date (old ones removed).\n            if (this._zSort) {\n                this.sortZIndexedChildren();\n            }\n\n            this._zIndexedChildren.slice().forEach(function (c) {\n                if (c._zIndex !== 0) {\n                    c.setZParent(newZParent);\n                }\n            });\n        }\n    };\n\n    get colorUl() {\n        return this._colorUl;\n    }\n\n    set colorUl(color) {\n        if (this._colorUl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUl = color;\n        }\n    }\n\n    get colorUr() {\n        return this._colorUr;\n    }\n\n    set colorUr(color) {\n        if (this._colorUr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUr = color;\n        }\n    };\n\n    get colorBl() {\n        return this._colorBl;\n    }\n\n    set colorBl(color) {\n        if (this._colorBl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBl = color;\n        }\n    };\n\n    get colorBr() {\n        return this._colorBr;\n    }\n\n    set colorBr(color) {\n        if (this._colorBr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBr = color;\n        }\n    };\n\n\n    set onUpdate(f) {\n        this._onUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterUpdate(f) {\n        this._onAfterUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterCalcs(f) {\n        this._onAfterCalcs = f;\n        this._setRecalc(7);\n    }\n\n    get shader() {\n        return this._shader;\n    }\n\n    set shader(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevShader = this._shader;\n        this._shader = v;\n        if (!v && prevShader) {\n            // Disabled shader.\n            let newShaderOwner = (this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null);\n            this._setShaderOwnerRecursive(newShaderOwner);\n        } else if (v) {\n            // Enabled shader.\n            this._setShaderOwnerRecursive(this);\n        }\n    }\n\n    get activeShader() {\n        return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;\n    }\n\n    get activeShaderOwner() {\n        return this._shaderOwner;\n    }\n\n    get clipping() {\n        return this._clipping;\n    }\n\n    set clipping(v) {\n        if (this._clipping !== v) {\n            this._clipping = v;\n\n            // Force update of scissor by updating translate.\n            // Alpha must also be updated because the scissor area may have been empty.\n            this._setRecalc(1 + 2);\n        }\n    }\n\n    get clipbox() {\n        return this._clipbox;\n    }\n\n    set clipbox(v) {\n        // In case of out-of-bounds element, all children will also be ignored.\n        // It will save us from executing the update/render loops for those.\n        // The optimization will be used immediately during the next frame.\n        this._clipbox = v;\n    }\n\n    _setShaderOwnerRecursive(elementCore) {\n        this._shaderOwner = elementCore;\n\n        if (this._children && !this._renderToTextureEnabled) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _setShaderOwnerChildrenRecursive(elementCore) {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _hasRenderContext() {\n        return this._renderContext !== this._worldContext;\n    }\n\n    get renderContext() {\n        return this._renderContext;\n    }\n\n    updateRenderToTextureEnabled() {\n        // Enforce texturizer initialisation.\n        let v = this.texturizer._enabled;\n\n        if (v) {\n            this._enableRenderToTexture();\n        } else {\n            this._disableRenderToTexture();\n            this._texturizer.releaseRenderTexture();\n        }\n    }\n\n    _enableRenderToTexture() {\n        if (!this._renderToTextureEnabled) {\n            let prevIsZContext = this.isZContext();\n\n            this._renderToTextureEnabled = true;\n\n            this._renderContext = new ElementCoreContext();\n\n            // If render to texture is active, a new shader context is started.\n            this._setShaderOwnerChildrenRecursive(null);\n\n            if (!prevIsZContext) {\n                // Render context forces z context.\n                this.enableZContext(this._parent ? this._parent.findZContext() : null);\n            }\n\n            this.setHasRenderUpdates(3);\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.render = this._renderAdvanced;\n        }\n    }\n\n    _disableRenderToTexture() {\n        if (this._renderToTextureEnabled) {\n            this._renderToTextureEnabled = false;\n\n            this._setShaderOwnerChildrenRecursive(this._shaderOwner);\n\n            this._renderContext = this._worldContext;\n\n            if (!this.isZContext()) {\n                this.disableZContext();\n            }\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.setHasRenderUpdates(3);\n\n            this.render = this._renderSimple;\n        }\n    }\n\n    isWhite() {\n        return (this._colorUl === 0xFFFFFFFF) && (this._colorUr === 0xFFFFFFFF) && (this._colorBl === 0xFFFFFFFF) && (this._colorBr === 0xFFFFFFFF);\n    }\n\n    hasSimpleTexCoords() {\n        return (this._ulx === 0) && (this._uly === 0) && (this._brx === 1) && (this._bry === 1);\n    }\n\n    _stashTexCoords() {\n        this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n    }\n\n    _unstashTexCoords() {\n        this._ulx = this._stashedTexCoords[0];\n        this._uly = this._stashedTexCoords[1];\n        this._brx = this._stashedTexCoords[2];\n        this._bry = this._stashedTexCoords[3];\n        this._stashedTexCoords = null;\n    }\n\n    _stashColors() {\n        this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];\n        this._colorUl = 0xFFFFFFFF;\n        this._colorUr = 0xFFFFFFFF;\n        this._colorBr = 0xFFFFFFFF;\n        this._colorBl = 0xFFFFFFFF;\n    }\n\n    _unstashColors() {\n        this._colorUl = this._stashedColors[0];\n        this._colorUr = this._stashedColors[1];\n        this._colorBr = this._stashedColors[2];\n        this._colorBl = this._stashedColors[3];\n        this._stashedColors = null;\n    }\n\n    isVisible() {\n        return (this._localAlpha > 1e-14);\n    };\n\n    get outOfBounds() {\n        return this._outOfBounds;\n    }\n\n    set boundsMargin(v) {\n\n        /**\n         *  null: inherit from parent.\n         *  number[4]: specific margins: left, top, right, bottom.\n         */\n        this._boundsMargin = v ? v.slice() : null;\n\n        // We force recalc in order to set all boundsMargin recursively during the next update.\n        this._triggerRecalcTranslate();\n    }\n\n    get boundsMargin() {\n        return this._boundsMargin;\n    }\n\n    update() {\n        this._recalc |= this._parent._pRecalc;\n\n        if (this._layout && this._layout.isEnabled()) {\n            if (this._recalc & 256) {\n                this._layout.layoutFlexTree();\n            }\n        } else if ((this._recalc & 2) && this._optFlags) {\n            this._applyRelativeDimFuncs();\n        }\n\n        if (this._onUpdate) {\n            // Block all 'upwards' updates when changing things in this branch.\n            this._hasUpdates = true;\n            this._onUpdate(this.element, this);\n        }\n\n        const pw = this._parent._worldContext;\n        let w = this._worldContext;\n        const visible = (pw.alpha && this._localAlpha);\n\n        /**\n         * We must update if:\n         * - branch contains updates (even when invisible because it may contain z-indexed descendants)\n         * - there are (inherited) updates and this branch is visible\n         * - this branch becomes invisible (descs may be z-indexed so we must update all alpha values)\n         */\n        if (this._hasUpdates || (this._recalc && visible) || (w.alpha && !visible)) {\n            let recalc = this._recalc;\n\n            // Update world coords/alpha.\n            if (recalc & 1) {\n                if (!w.alpha && visible) {\n                    // Becomes visible.\n                    this._hasRenderUpdates = 3;\n                }\n                w.alpha = pw.alpha * this._localAlpha;\n\n                if (w.alpha < 1e-14) {\n                    // Tiny rounding errors may cause failing visibility tests.\n                    w.alpha = 0;\n                }\n            }\n\n            if (recalc & 6) {\n                w.px = pw.px + this._localPx * pw.ta;\n                w.py = pw.py + this._localPy * pw.td;\n                if (pw.tb !== 0) w.px += this._localPy * pw.tb;\n                if (pw.tc !== 0) w.py += this._localPx * pw.tc;\n            }\n\n            if (recalc & 4) {\n                w.ta = this._localTa * pw.ta;\n                w.tb = this._localTd * pw.tb;\n                w.tc = this._localTa * pw.tc;\n                w.td = this._localTd * pw.td;\n\n                if (this._isComplex) {\n                    w.ta += this._localTc * pw.tb;\n                    w.tb += this._localTb * pw.ta;\n                    w.tc += this._localTc * pw.td;\n                    w.td += this._localTb * pw.tc;\n                }\n            }\n\n            // Update render coords/alpha.\n            const pr = this._parent._renderContext;\n            if (this._parent._hasRenderContext()) {\n                const init = this._renderContext === this._worldContext;\n                if (init) {\n                    // First render context build: make sure that it is fully initialized correctly.\n                    // Otherwise, if we get into bounds later, the render context would not be initialized correctly.\n                    this._renderContext = new ElementCoreContext();\n                }\n\n                const r = this._renderContext;\n\n                // Update world coords/alpha.\n                if (init || (recalc & 1)) {\n                    r.alpha = pr.alpha * this._localAlpha;\n\n                    if (r.alpha < 1e-14) {\n                        r.alpha = 0;\n                    }\n                }\n\n                if (init || (recalc & 6)) {\n                    r.px = pr.px + this._localPx * pr.ta;\n                    r.py = pr.py + this._localPy * pr.td;\n                    if (pr.tb !== 0) r.px += this._localPy * pr.tb;\n                    if (pr.tc !== 0) r.py += this._localPx * pr.tc;\n                }\n\n                if (init) {\n                    // We set the recalc toggle, because we must make sure that the scissor is updated.\n                    recalc |= 2;\n                }\n\n                if (init || (recalc & 4)) {\n                    r.ta = this._localTa * pr.ta;\n                    r.tb = this._localTd * pr.tb;\n                    r.tc = this._localTa * pr.tc;\n                    r.td = this._localTd * pr.td;\n\n                    if (this._isComplex) {\n                        r.ta += this._localTc * pr.tb;\n                        r.tb += this._localTb * pr.ta;\n                        r.tc += this._localTc * pr.td;\n                        r.td += this._localTb * pr.tc;\n                    }\n                }\n            } else {\n                this._renderContext = this._worldContext;\n            }\n\n            if (this.ctx.updateTreeOrder === -1) {\n                this.ctx.updateTreeOrder = this._updateTreeOrder + 1;\n            } else {\n                this._updateTreeOrder = this.ctx.updateTreeOrder++;\n            }\n\n            // Determine whether we must use a 'renderTexture'.\n            const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();\n            if (this._useRenderToTexture !== useRenderToTexture) {\n                // Coords must be changed.\n                this._recalc |= 2 + 4;\n\n                // Scissor may change: force update.\n                recalc |= 2;\n\n                if (!this._useRenderToTexture) {\n                    // We must release the texture.\n                    this._texturizer.release();\n                }\n            }\n            this._useRenderToTexture = useRenderToTexture;\n\n            const r = this._renderContext;\n\n            const bboxW = this._dimsUnknown ? 2048 : this._w;\n            const bboxH = this._dimsUnknown ? 2048 : this._h;\n\n            // Calculate a bbox for this element.\n            let sx, sy, ex, ey;\n            const rComplex = (r.tb !== 0) || (r.tc !== 0) || (r.ta < 0) || (r.td < 0);\n            if (rComplex) {\n                sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n            } else {\n                sx = r.px;\n                ex = r.px + r.ta * bboxW;\n                sy = r.py;\n                ey = r.py + r.td * bboxH;\n            }\n\n            if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                // If we are dealing with a non-identity matrix, we must extend the bbox so that withinBounds and\n                //  scissors will include the complete range of (positive) dimensions up to ,lh.\n                const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                if (nx < sx) sx = nx;\n                if (ny < sy) sy = ny;\n                if (nx > ex) ex = nx;\n                if (ny > ey) ey = ny;\n            }\n\n            if (recalc & 6 || !this._scissor /* initial */) {\n                // Determine whether we must 'clip'.\n                if (this._clipping && r.isSquare()) {\n                    // If the parent renders to a texture, it's scissor should be ignored;\n                    const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                    if (area) {\n                        // Merge scissor areas.\n                        const lx = Math.max(area[0], sx);\n                        const ly = Math.max(area[1], sy);\n                        this._scissor = [\n                            lx,\n                            ly,\n                            Math.min(area[2] + area[0], ex) - lx,\n                            Math.min(area[3] + area[1], ey) - ly\n                        ];\n                    } else {\n                        this._scissor = [sx, sy, ex - sx, ey - sy];\n                    }\n                } else {\n                    // No clipping: reuse parent scissor.\n                    this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                }\n            }\n\n            // Calculate the outOfBounds margin.\n            if (this._boundsMargin) {\n                this._recBoundsMargin = this._boundsMargin;\n            } else {\n                this._recBoundsMargin = this._parent._recBoundsMargin;\n            }\n\n            if (this._onAfterCalcs) {\n                // After calcs may change render coords, scissor and/or recBoundsMargin.\n                if (this._onAfterCalcs(this.element)) {\n                    // Recalculate bbox.\n                    if (rComplex) {\n                        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                    } else {\n                        sx = r.px;\n                        ex = r.px + r.ta * bboxW;\n                        sy = r.py;\n                        ey = r.py + r.td * bboxH;\n                    }\n\n                    if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                        const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                        if (nx < sx) sx = nx;\n                        if (ny < sy) sy = ny;\n                        if (nx > ex) ex = nx;\n                        if (ny > ey) ey = ny;\n                    }\n                }\n            }\n\n            if (this._parent._outOfBounds === 2) {\n                // Inherit parent out of boundsness.\n                this._outOfBounds = 2;\n\n                if (this._withinBoundsMargin) {\n                    this._withinBoundsMargin = false;\n                    this.element._disableWithinBoundsMargin();\n                }\n            } else {\n                if (recalc & 6) {\n                    // Recheck if element is out-of-bounds (all settings that affect this should enable recalc bit 2 or 4).\n                    this._outOfBounds = 0;\n                    let withinMargin = true;\n\n                    // Offscreens are always rendered as long as the parent is within bounds.\n                    if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {\n                        if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {\n                            // Empty scissor area.\n                            this._outOfBounds = 2;\n                        } else {\n                            // Use bbox to check out-of-boundness.\n                            if ((this._scissor[0] > ex) ||\n                                (this._scissor[1] > ey) ||\n                                (sx > (this._scissor[0] + this._scissor[2])) ||\n                                (sy > (this._scissor[1] + this._scissor[3]))\n                            ) {\n                                this._outOfBounds = 1;\n                            }\n\n                            if (this._outOfBounds) {\n                                if (this._clipping || this._useRenderToTexture || (this._clipbox && (bboxW && bboxH))) {\n                                    this._outOfBounds = 2;\n                                }\n                            }\n                        }\n\n                        withinMargin = (this._outOfBounds === 0);\n                        if (!withinMargin) {\n                            // Re-test, now with margins.\n                            if (this._recBoundsMargin) {\n                                withinMargin = !((ex < this._scissor[0] - this._recBoundsMargin[2]) ||\n                                    (ey < this._scissor[1] - this._recBoundsMargin[3]) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0]) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]));\n                            } else {\n                                withinMargin = !((ex < this._scissor[0] - 100) ||\n                                    (ey < this._scissor[1] - 100) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + 100) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + 100));\n                            }\n                            if (withinMargin && this._outOfBounds === 2) {\n                                // Children must be visited because they may contain elements that are within margin, so must be visible.\n                                this._outOfBounds = 1;\n                            }\n                        }\n                    }\n\n                    if (this._withinBoundsMargin !== withinMargin) {\n                        this._withinBoundsMargin = withinMargin;\n\n                        if (this._withinBoundsMargin) {\n                            // This may update things (txLoaded events) in the element itself, but also in descendants and ancestors.\n\n                            // Changes in ancestors should be executed during the next call of the stage update. But we must\n                            // take care that the _recalc and _hasUpdates flags are properly registered. That's why we clear\n                            // both before entering the children, and use _pRecalc to transfer inherited updates instead of\n                            // _recalc directly.\n\n                            // Changes in descendants are automatically executed within the current update loop, though we must\n                            // take care to not update the hasUpdates flag unnecessarily in ancestors. We achieve this by making\n                            // sure that the hasUpdates flag of this element is turned on, which blocks it for ancestors.\n                            this._hasUpdates = true;\n\n                            const recalc = this._recalc;\n                            this._recalc = 0;\n                            this.element._enableWithinBoundsMargin();\n\n                            if (this._recalc) {\n                                // This element needs to be re-updated now, because we want the dimensions (and other changes) to be updated.\n                                return this.update();\n                            }\n\n                            this._recalc = recalc;\n                        } else {\n                            this.element._disableWithinBoundsMargin();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                // Set viewport necessary for children scissor calculation.\n                if (this._viewport) {\n                    this._viewport[2] = bboxW;\n                    this._viewport[3] = bboxH;\n                } else {\n                    this._viewport = [0, 0, bboxW, bboxH];\n                }\n            }\n\n            // Filter out bits that should not be copied to the children (currently all are).\n            this._pRecalc = (this._recalc & 135);\n\n            // Clear flags so that future updates are properly detected.\n            this._recalc = 0;\n            this._hasUpdates = false;\n\n            if (this._outOfBounds < 2) {\n                if (this._useRenderToTexture) {\n                    if (this._worldContext.isIdentity()) {\n                        // Optimization.\n                        // The world context is already identity: use the world context as render context to prevents the\n                        // ancestors from having to update the render context.\n                        this._renderContext = this._worldContext;\n                    } else {\n                        // Temporarily replace the render coord attribs by the identity matrix.\n                        // This allows the children to calculate the render context.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n                    }\n                }\n\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        this._children[i].update();\n                    }\n                }\n\n                if (this._useRenderToTexture) {\n                    this._renderContext = r;\n                }\n            } else {\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._hasUpdates) {\n                            this._children[i].update();\n                        } else {\n                            // Make sure we don't lose the 'inherited' updates.\n                            this._children[i]._recalc |= this._pRecalc;\n                            this._children[i].updateOutOfBounds();\n                        }\n                    }\n                }\n            }\n\n            if (this._onAfterUpdate) {\n                this._onAfterUpdate(this.element);\n            }\n        } else {\n            if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {\n                // If new tree order does not interfere with the current (gaps allowed) there's no need to traverse the branch.\n                this.ctx.updateTreeOrder = -1;\n            } else {\n                this.updateTreeOrder();\n            }\n        }\n    }\n\n    _applyRelativeDimFuncs() {\n        if (this._optFlags & 1) {\n            const x = this._funcX(this._parent.w);\n            if (x !== this._x) {\n                this._localPx += (x - this._x);\n                this._x = x;\n            }\n        }\n        if (this._optFlags & 2) {\n            const y = this._funcY(this._parent.h);\n            if (y !== this._y) {\n                this._localPy += (y - this._y);\n                this._y = y;\n            }\n        }\n\n        let changedDims = false;\n        if (this._optFlags & 4) {\n            const w = this._funcW(this._parent.w);\n            if (w !== this._w) {\n                this._w = w;\n                changedDims = true;\n            }\n        }\n        if (this._optFlags & 8) {\n            const h = this._funcH(this._parent.h);\n            if (h !== this._h) {\n                this._h = h;\n                changedDims = true;\n            }\n        }\n\n        if (changedDims) {\n            // Recalc mount, scale position.\n            this._recalcLocalTranslate();\n\n            this.element.onDimensionsChanged(this._w, this._h);\n        }\n    }\n\n    updateOutOfBounds() {\n        // Propagate outOfBounds flag to descendants (necessary because of z-indexing).\n        // Invisible elements are not drawn anyway. When alpha is updated, so will _outOfBounds.\n        if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {\n\n            // Inherit parent out of boundsness.\n            this._outOfBounds = 2;\n\n            if (this._withinBoundsMargin) {\n                this._withinBoundsMargin = false;\n                this.element._disableWithinBoundsMargin();\n            }\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateOutOfBounds();\n                }\n            }\n        }\n    }\n\n    updateTreeOrder() {\n        if (this._localAlpha && (this._outOfBounds !== 2)) {\n            this._updateTreeOrder = this.ctx.updateTreeOrder++;\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateTreeOrder();\n                }\n            }\n        }\n    }\n\n    _renderSimple() {\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                renderState.setShader(this.activeShader, this._shaderOwner);\n                renderState.setScissor(this._scissor);\n                this.renderState.addQuad(this);\n            }\n\n            // Also add children to the VBO.\n            if (this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n\n    _renderAdvanced() {\n        const hasRenderUpdates = this._hasRenderUpdates;\n\n        // We must clear the hasRenderUpdates flag before rendering, because updating result textures in combination\n        // with z-indexing may trigger render updates on a render branch that is 'half done'.\n        // We need to ensure that the full render branch is marked for render updates, not only half (leading to freeze).\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            let mustRenderChildren = true;\n            let renderTextureInfo;\n            let prevRenderTextureInfo;\n            if (this._useRenderToTexture) {\n                if (this._w === 0 || this._h === 0) {\n                    // Ignore this branch and don't draw anything.\n                    return;\n                } else if (!this._texturizer.hasRenderTexture() || (hasRenderUpdates >= 3)) {\n                    // Tell the renderer we're rendering a renderToTexture element in this frame\n                    this.ctx.renderToTextureCount++;\n                    // Switch to default shader for building up the render texture.\n                    renderState.setShader(renderState.defaultShader, this);\n\n                    prevRenderTextureInfo = renderState.renderTextureInfo;\n\n                    renderTextureInfo = {\n                        nativeTexture: null,\n                        offset: 0,  // Set by CoreRenderState.\n                        w: this._w,\n                        h: this._h,\n                        empty: true,\n                        cleared: false,\n                        ignore: false,\n                        cache: false\n                    };\n\n                    if (this._texturizer.hasResultTexture() || (!renderState.isCachingTexturizer && (hasRenderUpdates < 3))) {\n                        /**\n                         * We don't always cache render textures.\n                         *\n                         * The rule is, that caching for a specific render texture is only enabled if:\n                         * - There is a result texture to be updated.\n                         * - There were no render updates -within the contents- since last frame (ElementCore.hasRenderUpdates < 3)\n                         * - AND there are no ancestors that are being cached during this frame (CoreRenderState.isCachingTexturizer)\n                         *   If an ancestor is cached anyway, it's probably not necessary to keep deeper caches. If the top level is to\n                         *   change while a lower one is not, that lower level will be cached instead.\n                         *\n                         * In case of the fast blur element, this prevents having to cache all blur levels and stages, saving a huge amount\n                         * of GPU memory!\n                         *\n                         * Especially when using multiple stacked layers of the same dimensions that are RTT this will have a very\n                         * noticable effect on performance as less render textures need to be allocated.\n                         */\n                        renderTextureInfo.cache = true;\n                        renderState.isCachingTexturizer = true;\n                    }\n\n                    if (!this._texturizer.hasResultTexture()) {\n                        // We can already release the current texture to the pool, as it will be rebuild anyway.\n                        // In case of multiple layers of 'filtering', this may save us from having to create one\n                        //  render-to-texture layer.\n                        // Notice that we don't do this when there is a result texture, as any other element may rely on\n                        //  that result texture being filled.\n                        this._texturizer.releaseRenderTexture();\n                    }\n\n                    renderState.setRenderTextureInfo(renderTextureInfo);\n                    renderState.setScissor(null);\n\n                    if (this._displayedTextureSource) {\n                        let r = this._renderContext;\n\n                        // Use an identity context for drawing the displayed texture to the render texture.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n\n                        // Add displayed texture source in local coordinates.\n                        this.renderState.addQuad(this);\n\n                        this._renderContext = r;\n                    }\n                } else {\n                    mustRenderChildren = false;\n                }\n            } else {\n                if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                    renderState.setShader(this.activeShader, this._shaderOwner);\n                    renderState.setScissor(this._scissor);\n                    this.renderState.addQuad(this);\n                }\n            }\n\n            // Also add children to the VBO.\n            if (mustRenderChildren && this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                let updateResultTexture = false;\n                if (mustRenderChildren) {\n                    // Finished refreshing renderTexture.\n                    renderState.finishedRenderTexture();\n\n                    // If nothing was rendered, we store a flag in the texturizer and prevent unnecessary\n                    //  render-to-texture and filtering.\n                    this._texturizer.empty = renderTextureInfo.empty;\n\n                    if (renderTextureInfo.empty) {\n                        // We ignore empty render textures and do not draw the final quad.\n\n                        // The following cleans up memory and enforces that the result texture is also cleared.\n                        this._texturizer.releaseRenderTexture();\n                    } else if (renderTextureInfo.nativeTexture) {\n                        // If nativeTexture is set, we can reuse that directly instead of creating a new render texture.\n                        this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);\n\n                        renderTextureInfo.ignore = true;\n                    } else {\n                        if (this._texturizer.renderTextureReused) {\n                            // Quad operations must be written to a render texture actually owned.\n                            this._texturizer.releaseRenderTexture();\n                        }\n                        // Just create the render texture.\n                        renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();\n                    }\n\n                    // Restore the parent's render texture.\n                    renderState.setRenderTextureInfo(prevRenderTextureInfo);\n\n                    updateResultTexture = true;\n                }\n\n                if (!this._texturizer.empty) {\n                    let resultTexture = this._texturizer.getResultTexture();\n                    if (updateResultTexture) {\n                        if (resultTexture) {\n                            // Logging the update frame can be handy for userland.\n                            resultTexture.update = renderState.stage.frameCounter;\n                        }\n                        this._texturizer.updateResultTexture();\n                    }\n\n                    if (!this._texturizer.renderOffscreen) {\n                        // Render result texture to the actual render target.\n                        renderState.setShader(this.activeShader, this._shaderOwner);\n                        renderState.setScissor(this._scissor);\n\n                        // If no render texture info is set, the cache can be reused.\n                        const cache = !renderTextureInfo || renderTextureInfo.cache;\n\n                        renderState.setTexturizer(this._texturizer, cache);\n                        this._stashTexCoords();\n                        if (!this._texturizer.colorize) this._stashColors();\n                        this.renderState.addQuad(this, true);\n                        if (!this._texturizer.colorize) this._unstashColors();\n                        this._unstashTexCoords();\n                        renderState.setTexturizer(null);\n                    }\n                }\n            }\n\n            if (renderTextureInfo && renderTextureInfo.cache) {\n                // Allow siblings to cache.\n                renderState.isCachingTexturizer = false;\n            }\n        }\n    }\n\n    get zSort() {\n        return this._zSort;\n    }\n\n    sortZIndexedChildren() {\n        /**\n         * We want to avoid resorting everything. Instead, we do a single pass of the full array:\n         * - filtering out elements with a different zParent than this (were removed)\n         * - filtering out, but also gathering (in a temporary array) the elements that have zIndexResort flag\n         * - then, finally, we merge-sort both the new array and the 'old' one\n         * - element may have been added 'double', so when merge-sorting also check for doubles.\n         * - if the old one is larger (in size) than it should be, splice off the end of the array.\n         */\n\n        const n = this._zIndexedChildren.length;\n        let ptr = 0;\n        const a = this._zIndexedChildren;\n\n        // Notice that items may occur multiple times due to z-index changing.\n        const b = [];\n        for (let i = 0; i < n; i++) {\n            if (a[i]._zParent === this) {\n                if (a[i]._zIndexResort) {\n                    b.push(a[i]);\n                } else {\n                    if (ptr !== i) {\n                        a[ptr] = a[i];\n                    }\n                    ptr++;\n                }\n            }\n        }\n\n        const m = b.length;\n        if (m) {\n            for (let j = 0; j < m; j++) {\n                b[j]._zIndexResort = false;\n            }\n\n            b.sort(ElementCore.sortZIndexedChildren);\n            const n = ptr;\n            if (!n) {\n                ptr = 0;\n                let j = 0;\n                do {\n                    a[ptr++] = b[j++];\n                } while (j < m);\n\n                if (a.length > ptr) {\n                    // Slice old (unnecessary) part off array.\n                    a.splice(ptr);\n                }\n            } else {\n                // Merge-sort arrays;\n                ptr = 0;\n                let i = 0;\n                let j = 0;\n                const mergeResult = [];\n                do {\n                    const v = (a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex);\n\n                    const add = v > 0 ? b[j++] : a[i++];\n\n                    if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                        mergeResult[ptr++] = add;\n                    }\n\n                    if (i >= n) {\n                        do {\n                            const add = b[j++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (j < m);\n                        break;\n                    } else if (j >= m) {\n                        do {\n                            const add = a[i++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (i < n);\n                        break;\n                    }\n                } while (true);\n\n                this._zIndexedChildren = mergeResult;\n            }\n        } else {\n            if (a.length > ptr) {\n                // Slice old (unnecessary) part off array.\n                a.splice(ptr);\n            }\n        }\n\n        this._zSort = false;\n    };\n\n    get localTa() {\n        return this._localTa;\n    };\n\n    get localTb() {\n        return this._localTb;\n    };\n\n    get localTc() {\n        return this._localTc;\n    };\n\n    get localTd() {\n        return this._localTd;\n    };\n\n    get element() {\n        return this._element;\n    }\n\n    get renderUpdates() {\n        return this._hasRenderUpdates;\n    }\n\n    get texturizer() {\n        if (!this._texturizer) {\n            this._texturizer = new ElementTexturizer(this);\n        }\n        return this._texturizer;\n    }\n\n    getCornerPoints() {\n        let w = this._worldContext;\n\n        return [\n            w.px,\n            w.py,\n            w.px + this._w * w.ta,\n            w.py + this._w * w.tc,\n            w.px + this._w * w.ta + this._h * w.tb,\n            w.py + this._w * w.tc + this._h * w.td,\n            w.px + this._h * w.tb,\n            w.py + this._h * w.td\n        ];\n    };\n\n    getRenderTextureCoords(relX, relY) {\n        let r = this._renderContext;\n        return [\n            r.px + r.ta * relX + r.tb * relY,\n            r.py + r.tc * relX + r.td * relY\n        ];\n    }\n\n    getAbsoluteCoords(relX, relY) {\n        let w = this._renderContext;\n        return [\n            w.px + w.ta * relX + w.tb * relY,\n            w.py + w.tc * relX + w.td * relY\n        ];\n    }\n\n    collectAtCoord(x, y, children) {\n        // return when branch is hidden\n        if (this._renderContext.alpha === 0) {\n            return;\n        }\n\n        if (this.inBound(x, y)) {\n            if (this._scissor) {\n                if (this.inScissor()) {\n                    children.push(this);\n                }\n            } else {\n                children.push(this);\n            }\n        }\n\n        if (this._children) {\n            const j = this._children.length;\n            for (let i = 0; i < j; i++) {\n                this._children[i].collectAtCoord(x, y, children);\n            }\n        }\n\n        return children.sort(ElementCore.sortZIndexedChildren);\n    }\n\n    inBound(tx, ty) {\n        const c = this.getCornerPoints();\n        return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];\n    }\n\n    inScissor() {\n        const sc = this._scissor;\n        const c = this.getCornerPoints();\n\n        return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];\n    }\n\n    get layout() {\n        this._ensureLayout();\n        return this._layout;\n    }\n\n    get flex() {\n        return this._layout ? this._layout.flex : null;\n    }\n\n    set flex(v) {\n        this.layout.flex = v;\n    }\n\n    get flexItem() {\n        return this._layout ? this._layout.flexItem : null;\n    }\n\n    set flexItem(v) {\n        this.layout.flexItem = v;\n    }\n\n    isFlexItem() {\n        return !!this._layout && this._layout.isFlexItemEnabled();\n    }\n\n    isFlexContainer() {\n        return !!this._layout && this._layout.isFlexEnabled();\n    }\n\n    enableFlexLayout() {\n        this._ensureLayout();\n    }\n\n    _ensureLayout() {\n        if (!this._layout) {\n            this._layout = new FlexTarget(this);\n        }\n    }\n\n    disableFlexLayout() {\n        this._triggerRecalcTranslate();\n    }\n\n    hasFlexLayout() {\n        return (this._layout && this._layout.isEnabled());\n    }\n\n    setLayout(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this._updateDimensions(w, h);\n    }\n\n    triggerLayout() {\n        this._setRecalc(256);\n    }\n\n    _triggerRecalcTranslate() {\n        this._setRecalc(2);\n    }\n\n}\n\nclass ElementCoreContext {\n\n    constructor() {\n        this.alpha = 1;\n\n        this.px = 0;\n        this.py = 0;\n\n        this.ta = 1;\n        this.tb = 0;\n        this.tc = 0;\n        this.td = 1;\n    }\n\n    isIdentity() {\n        return this.alpha === 1 &&\n            this.px === 0 &&\n            this.py === 0 &&\n            this.ta === 1 &&\n            this.tb === 0 &&\n            this.tc === 0 &&\n            this.td === 1;\n    }\n\n    isSquare() {\n        return this.tb === 0 && this.tc === 0;\n    }\n\n}\n\nElementCoreContext.IDENTITY = new ElementCoreContext();\nElementCore.sortZIndexedChildren = function (a, b) {\n    return (a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex);\n};\n\nimport ElementTexturizer from \"./ElementTexturizer.mjs\";\nimport Utils from \"../Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is a partial (and more efficient) implementation of the event emitter.\n * It attempts to maintain a one-to-one mapping between events and listeners, skipping an array lookup.\n * Only if there are multiple listeners, they are combined in an array.\n */\nexport default class EventEmitter {\n\n    constructor() {\n        // This is set (and kept) to true when events are used at all.\n        this._hasEventListeners = false;\n    }\n\n    on(name, listener) {\n        if (!this._hasEventListeners) {\n            this._eventFunction = {}\n            this._eventListeners = {}\n            this._hasEventListeners = true;\n        }\n\n        const current = this._eventFunction[name];\n        if (!current) {\n            this._eventFunction[name] = listener;\n        } else {\n            if (this._eventFunction[name] !== EventEmitter.combiner) {\n                this._eventListeners[name] = [this._eventFunction[name], listener];\n                this._eventFunction[name] = EventEmitter.combiner;\n            } else {\n                this._eventListeners[name].push(listener);\n            }\n        }\n    }\n\n    once(name, listener) {\n        const wrapper = (arg1, arg2, arg3) => {\n            listener(arg1, arg2, arg3);\n            this.off(name, wrapper);\n        }\n        wrapper.__originalFunc = listener;\n        this.on(name, wrapper);\n    }\n\n    has(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    for (const l of listeners) {\n                        if (l === listener || l.__originalFunc == listener) {\n                            return true;\n                        }\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    off(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    let index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    index = listeners.map((l) => l.__originalFunc).indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    if (listeners.length === 1) {\n                        this._eventFunction[name] = listeners[0];\n                        this._eventListeners[name] = undefined;\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    this._eventFunction[name] = undefined;\n                }\n            }\n        }\n    }\n\n    removeListener(name, listener) {\n        this.off(name, listener);\n    }\n\n    emit(name, arg1, arg2, arg3) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    func(this, name, arg1, arg2, arg3);\n                } else {\n                    func(arg1, arg2, arg3);\n                }\n            }\n        }\n    }\n\n    listenerCount(name) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    return this._eventListeners[name].length;\n                } else {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    removeAllListeners(name) {\n        if (this._hasEventListeners) {\n            delete this._eventFunction[name];\n            delete this._eventListeners[name];\n        }\n    }\n\n}\n\nEventEmitter.combiner = function(object, name, arg1, arg2, arg3) {\n    const listeners = object._eventListeners[name];\n    if (listeners) {\n        /* Because listener may detach itself while being invoked and therefore invalidate the iterator,\n           we need to create a copy to loop over it */\n        for (const listener of [...listeners]) {\n            listener(arg1, arg2, arg3);\n        }\n    }\n}\n\nEventEmitter.addAsMixin = function(cls) {\n    cls.prototype.on = EventEmitter.prototype.on;\n    cls.prototype.once = EventEmitter.prototype.once;\n    cls.prototype.has = EventEmitter.prototype.has;\n    cls.prototype.off = EventEmitter.prototype.off;\n    cls.prototype.removeListener = EventEmitter.prototype.removeListener;\n    cls.prototype.emit = EventEmitter.prototype.emit;\n    cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n    cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"./Utils.mjs\";\nimport Base from \"./Base.mjs\";\n\nexport default class Shader {\n\n    constructor(coreContext) {\n        this._initialized = false;\n\n        this.ctx = coreContext;\n\n        /**\n         * The (enabled) elements that use this shader.\n         * @type {Set<ElementCore>}\n         */\n        this._elements = new Set();\n    }\n\n    static create(stage, v) {\n        let shader;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                shader = stage.renderer.createShader(stage.ctx, v);\n            } else {\n                shader = this.shader;\n            }\n\n            if (shader) {\n                Base.patchObject(shader, v);\n            }\n        } else if (v === null) {\n            shader = stage.ctx.renderState.defaultShader;\n        } else if (v === undefined) {\n            shader = null;\n        } else {\n            if (v.isShader) {\n                if (!stage.renderer.isValidShaderType(v.constructor)) {\n                    console.error(\"[Lightning] Invalid shader type\");\n                    v = null;\n                }\n                shader = v;\n            } else {\n                console.error(\"[Lightning] Please specify a shader type.\");\n                return;\n            }\n        }\n\n        return shader;\n    }\n\n    static getWebGL() {\n        return undefined;\n    }\n\n    static getC2d() {\n        return undefined;\n    }\n\n    addElement(elementCore) {\n        this._elements.add(elementCore);\n    }\n\n    removeElement(elementCore) {\n        this._elements.delete(elementCore);\n        if (!this._elements) {\n            this.cleanup();\n        }\n    }\n\n    redraw() {\n        this._elements.forEach(elementCore => {\n            elementCore.setHasRenderUpdates(2);\n        });\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    useDefault() {\n        // Should return true if this shader is configured (using it's properties) to not have any effect.\n        // This may allow the render engine to avoid unnecessary shader program switches or even texture copies.\n        return false;\n    }\n\n    addEmpty() {\n        // Draws this shader even if there are no quads to be added.\n        // This is handy for custom shaders.\n        return false;\n    }\n\n    cleanup() {\n        // Called when no more enabled elements have this shader.\n    }\n\n    get isShader() {\n        return true;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Texture {\n\n    /**\n     * @param {Stage} stage\n     */\n    constructor(stage) {\n        this.stage = stage;\n\n        this.manager = this.stage.textureManager;\n\n        this.id = Texture.id++;\n\n        /**\n         * All enabled elements that use this texture object (either as texture or displayedTexture).\n         * @type {Set<Element>}\n         */\n        this.elements = new Set();\n\n        /**\n         * The number of enabled elements that are active.\n         * @type {number}\n         */\n        this._activeCount = 0;\n\n        /**\n         * The associated texture source.\n         * Should not be changed.\n         * @type {TextureSource}\n         */\n        this._source = null;\n\n        /**\n         * A resize mode can be set to cover or contain a certain area.\n         * It will reset the texture clipping settings.\n         * When manual texture clipping is performed, the resizeMode is reset.\n         * @type {{type: string, width: number, height: number}}\n         * @private\n         */\n        this._resizeMode = null;\n\n        /**\n         * The texture clipping x-offset.\n         * @type {number}\n         */\n        this._x = 0;\n\n        /**\n         * The texture clipping y-offset.\n         * @type {number}\n         */\n        this._y = 0;\n\n        /**\n         * The texture clipping width. If 0 then full width.\n         * @type {number}\n         */\n        this._w = 0;\n\n        /**\n         * The texture clipping height. If 0 then full height.\n         * @type {number}\n         */\n        this._h = 0;\n\n        /**\n         * Render precision (0.5 = fuzzy, 1 = normal, 2 = sharp even when scaled twice, etc.).\n         * @type {number}\n         * @private\n         */\n        this._precision = 1;\n\n        /**\n         * The (maximum) expected texture source width. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mw = 0;\n\n        /**\n         * The (maximum) expected texture source height. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mh = 0;\n\n        /**\n         * Indicates if Texture.prototype.texture uses clipping.\n         * @type {boolean}\n         */\n        this.clipping = false;\n\n        /**\n         * Indicates whether this texture must update (when it becomes used again).\n         * @type {boolean}\n         * @private\n         */\n        this._mustUpdate = true;\n\n    }\n\n    get source() {\n        if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {\n            this._performUpdateSource(true);\n            this.stage.removeUpdateSourceTexture(this);\n        }\n        return this._source;\n    }\n\n    addElement(v) {\n        if (!this.elements.has(v)) {\n            this.elements.add(v);\n\n            if (this.elements.size === 1) {\n                if (this._source) {\n                    this._source.addTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.incActiveCount();\n            }\n        }\n    }\n\n    removeElement(v) {\n        if (this.elements.delete(v)) {\n            if (this.elements.size === 0) {\n                if (this._source) {\n                    this._source.removeTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.decActiveCount();\n            }\n        }\n    }\n\n    incActiveCount() {\n        // Ensure that texture source's activeCount has transferred ownership.\n        const source = this.source;\n\n        if (source) {\n            this._checkForNewerReusableTextureSource();\n        }\n\n        this._activeCount++;\n        if (this._activeCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveCount() {\n        const source = this.source; // Force updating the source.\n        this._activeCount--;\n        if (!this._activeCount) {\n            this.becomesUnused();\n        }\n    }\n\n    becomesUsed() {\n        if (this.source) {\n            this.source.incActiveTextureCount();\n        }\n    }\n\n    onLoad() {\n        if (this._resizeMode) {\n            this._applyResizeMode();\n        }\n\n        this.elements.forEach(element => {\n            if (element.active) {\n                element.onTextureSourceLoaded();\n            }\n        });\n    }\n\n    _checkForNewerReusableTextureSource() {\n        // When this source became unused and cleaned up, it may have disappeared from the reusable texture map.\n        // In the meantime another texture may have been generated loaded with the same lookup id.\n        // If this is the case, use that one instead to make sure only one active texture source per lookup id exists.\n        const source = this.source;\n        if (!source.isLoaded()) {\n            const reusable = this._getReusableTextureSource();\n            if (reusable && reusable.isLoaded() && (reusable !== source)) {\n                this._replaceTextureSource(reusable);\n            }\n        } else {\n            if (this._resizeMode) {\n                this._applyResizeMode();\n            }\n        }\n    }\n\n    becomesUnused() {\n        if (this.source) {\n            this.source.decActiveTextureCount();\n        }\n    }\n\n    isUsed() {\n        return this._activeCount > 0;\n    }\n\n    /**\n     * Returns the lookup id for the current texture settings, to be able to reuse it.\n     * @returns {string|null}\n     */\n    _getLookupId() {\n        // Default: do not reuse texture.\n        return null;\n    }\n\n    /**\n     * Generates a loader function that is able to generate the texture for the current settings of this texture.\n     * It should return a function that receives a single callback argument.\n     * That callback should be called with the following arguments:\n     *   - err\n     *   - options: object\n     *     - source: ArrayBuffer|WebGlTexture|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap\n     *     - w: Number\n     *     - h: Number\n     *     - permanent: Boolean\n     *     - hasAlpha: boolean\n     *     - permultiplyAlpha: boolean\n     *     - flipBlueRed: boolean\n     *     - renderInfo: object\n     * The loader itself may return a Function that is called when loading of the texture is cancelled. This can be used\n     * to stop fetching an image when it is no longer in element, for example.\n     */\n    _getSourceLoader() {\n        throw new Error(\"Texture.generate must be implemented.\");\n    }\n\n    get isValid() {\n        return this._getIsValid();\n    }\n\n    /**\n     * If texture is not 'valid', no source can be created for it.\n     * @returns {boolean}\n     */\n    _getIsValid() {\n        return true;\n    }\n\n    /**\n     * This must be called when the texture source must be re-generated.\n     */\n    _changed() {\n        // If no element is actively using this texture, ignore it altogether.\n        if (this.isUsed()) {\n            this._updateSource();\n        } else {\n            this._mustUpdate = true;\n        }\n    }\n\n    _updateSource() {\n        // We delay all updateSource calls to the next drawFrame, so that we can bundle them.\n        // Otherwise we may reload a texture more often than necessary, when, for example, patching multiple text\n        // properties.\n        this.stage.addUpdateSourceTexture(this);\n    }\n\n    _performUpdateSource(force = false) {\n        // If, in the meantime, the texture was no longer used, just remember that it must update until it becomes used\n        // again.\n        if (force || this.isUsed()) {\n            this._mustUpdate = false;\n            let source = this._getTextureSource();\n            this._replaceTextureSource(source);\n        }\n    }\n\n    _getTextureSource() {\n        let source = null;\n        if (this._getIsValid()) {\n            const lookupId = this._getLookupId();\n            source = this._getReusableTextureSource(lookupId);\n            if (!source) {\n                source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);\n            }\n        }\n        return source;\n    }\n\n    _getReusableTextureSource(lookupId = this._getLookupId()) {\n        if (this._getIsValid()) {\n            if (lookupId) {\n                return this.manager.getReusableTextureSource(lookupId);\n            }\n        }\n        return null;\n    }\n\n    _replaceTextureSource(newSource = null) {\n        let oldSource = this._source;\n\n        this._source = newSource;\n\n        if (this.elements.size) {\n            if (oldSource) {\n                if (this._activeCount) {\n                    oldSource.decActiveTextureCount();\n                }\n\n                oldSource.removeTexture(this);\n\n                // free up unused TextTextures immediately as they are not reused anyway\n                if(this['text'] && !oldSource.isUsed()) {\n                    this.manager.freeTextureSource(oldSource);\n                }\n            }\n\n            if (newSource) {\n                // Must happen before setDisplayedTexture to ensure sprite map texcoords are used.\n                newSource.addTexture(this);\n                if (this._activeCount) {\n                    newSource.incActiveTextureCount();\n                }\n            }\n        }\n\n        if (this.isUsed()) {\n            if (newSource) {\n                if (newSource.isLoaded()) {\n\n                    // Apply resizeMode\n                    if (this._resizeMode) {\n                        this._applyResizeMode();\n                    }\n\n                    this.elements.forEach(element => {\n                        if (element.active) {\n                            element._setDisplayedTexture(this);\n                        }\n                    });\n                } else {\n                    const loadError = newSource.loadError;\n                    if (loadError) {\n                        this.elements.forEach(element => {\n                            if (element.active) {\n                                element.onTextureSourceLoadError(loadError);\n                            }\n                        });\n                    }\n                }\n            } else {\n                this.elements.forEach(element => {\n                    if (element.active) {\n                        element._setDisplayedTexture(null);\n                    }\n                });\n            }\n        }\n    }\n\n    load() {\n        // Make sure that source is up to date.\n        if (this.source) {\n            if (!this.isLoaded()) {\n                this.source.load(true);\n            }\n        }\n    }\n\n    isLoaded() {\n        return this._source && this._source.isLoaded();\n    }\n\n    get loadError() {\n        return this._source && this._source.loadError;\n    }\n\n    free() {\n        if (this._source) {\n            this._source.free();\n        }\n    }\n\n    set resizeMode({type = \"cover\", w = 0, h = 0, clipX = 0.5, clipY = 0.5}) {\n        this._resizeMode = {type, w, h, clipX, clipY};\n        if (this.isLoaded()) {\n            this._applyResizeMode();\n        }\n    }\n\n    get resizeMode() {\n        return this._resizeMode;\n    }\n\n    _clearResizeMode() {\n        this._resizeMode = null;\n    }\n\n    _applyResizeMode() {\n        if (this._resizeMode.type === \"cover\") {\n            this._applyResizeCover();\n        } else if (this._resizeMode.type === \"contain\") {\n            this._applyResizeContain();\n        }\n        this._updatePrecision();\n        this._updateClipping();\n    }\n\n    _applyResizeCover() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = Math.max(scaleX, scaleY);\n        if (!scale) return;\n        this._precision = 1/scale;\n        if (scaleX && scaleX < scale) {\n            const desiredSize = this._precision * this._resizeMode.w;\n            const choppedOffPixels = this._source.w - desiredSize;\n            this._x = choppedOffPixels * this._resizeMode.clipX;\n            this._w = this._source.w - choppedOffPixels;\n        }\n        if (scaleY && scaleY < scale) {\n            const desiredSize = this._precision * this._resizeMode.h;\n            const choppedOffPixels = this._source.h - desiredSize;\n            this._y = choppedOffPixels * this._resizeMode.clipY;\n            this._h = this._source.h - choppedOffPixels;\n        }\n    }\n\n    _applyResizeContain() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = scaleX;\n        if (!scale || scaleY < scale) {\n            scale = scaleY;\n        }\n        if (!scale) return;\n        this._precision = 1/scale;\n    }\n\n    enableClipping(x, y, w, h) {\n        this._clearResizeMode();\n\n        x *= this._precision;\n        y *= this._precision;\n        w *= this._precision;\n        h *= this._precision;\n        if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {\n            this._x = x;\n            this._y = y;\n            this._w = w;\n            this._h = h;\n\n            this._updateClipping(true);\n        }\n    }\n\n    disableClipping() {\n        this._clearResizeMode();\n\n        if (this._x || this._y || this._w || this._h) {\n            this._x = 0;\n            this._y = 0;\n            this._w = 0;\n            this._h = 0;\n\n            this._updateClipping();\n        }\n    }\n\n    _updateClipping() {\n        this.clipping = !!(this._x || this._y || this._w || this._h);\n\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onDisplayedTextureClippingChanged();\n            }\n        });\n    }\n\n    _updatePrecision() {\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onPrecisionChanged();\n            }\n        });\n    }\n\n    getNonDefaults() {\n        let nonDefaults = {};\n        nonDefaults['type'] = this.constructor.name;\n        if (this.x !== 0) nonDefaults['x'] = this.x;\n        if (this.y !== 0) nonDefaults['y'] = this.y;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.precision !== 1) nonDefaults['precision'] = this.precision;\n        return nonDefaults;\n    }\n\n    get px() {\n        return this._x;\n    }\n\n    get py() {\n        return this._y;\n    }\n\n    get pw() {\n        return this._w;\n    }\n\n    get ph() {\n        return this._h;\n    }\n\n    get x() {\n        return this._x / this._precision;\n    }\n    set x(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._x !== v) {\n            this._x = v;\n            this._updateClipping();\n        }\n    }\n\n    get y() {\n        return this._y / this._precision;\n    }\n    set y(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._y !== v) {\n            this._y = v;\n            this._updateClipping();\n        }\n    }\n\n    get w() {\n        return this._w / this._precision;\n    }\n\n    set w(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._w !== v) {\n            this._w = v;\n            this._updateClipping();\n        }\n    }\n\n    get h() {\n        return this._h / this._precision;\n    }\n\n    set h(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._h !== v) {\n            this._h = v;\n            this._updateClipping();\n        }\n    }\n\n    get precision() {\n        return this._precision;\n    }\n\n    set precision(v) {\n        this._clearResizeMode();\n        if (this._precision !== v) {\n            this._precision = v;\n            this._updatePrecision();\n        }\n    }\n\n    isAutosizeTexture() {\n        return true;\n    }\n\n    getRenderWidth() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        // If dimensions are unknown (texture not yet loaded), use maximum width as a fallback as render width to allow proper bounds checking.\n        return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;\n    }\n\n    getRenderHeight() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nTexture.prototype.isTexture = true;\n\nTexture.id = 0;\n\nimport Base from \"./Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class ImageTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._src = undefined;\n        this._hasAlpha = false;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set src(v) {\n        if (this._src !== v) {\n            this._src = v;\n            this._changed();\n        }\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    set hasAlpha(v) {\n        if (this._hasAlpha !== v) {\n            this._hasAlpha = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this._src;\n    }\n\n    _getLookupId() {\n        return this._src;\n    }\n\n    _getSourceLoader() {\n        let src = this._src;\n        let hasAlpha = this._hasAlpha;\n        if (this.stage.getOption('srcBasePath')) {\n            var fc = src.charCodeAt(0);\n            if ((src.indexOf(\"//\") === -1) && ((fc >= 65 && fc <= 90) || (fc >= 97 && fc <= 122) || fc == 46)) {\n                // Alphabetical or dot: prepend base path.\n                src = this.stage.getOption('srcBasePath') + src;\n            }\n        }\n\n        return (cb) => {\n            return this.stage.platform.loadSrcTexture({src: src, hasAlpha: hasAlpha}, cb);\n        }\n    }\n\n    getNonDefaults() {\n        const obj = super.getNonDefaults();\n        if (this._src) {\n            obj.src = this._src;\n        }\n        return obj;\n    }\n\n}\n\n","/**\n * Returns CSS font setting string for use in canvas context.\n *\n * @private\n * @param {string | string[]} fontFace\n * @param {string} fontStyle\n * @param {number} fontSize\n * @param {number} precision\n * @param {string} defaultFontFace\n * @returns {string}\n */\nexport function getFontSetting(fontFace, fontStyle, fontSize, precision, defaultFontFace) {\n    let ff = fontFace;\n\n    if (!Array.isArray(ff)) {\n        ff = [ff];\n    }\n\n    let ffs = [];\n    for (let i = 0, n = ff.length; i < n; i++) {\n        let curFf = ff[i];\n        // Replace the default font face `null` with the actual default font face set\n        // on the stage.\n        if (curFf === null) {\n            curFf = defaultFontFace;\n        }\n        if (curFf === \"serif\" || curFf === \"sans-serif\") {\n            ffs.push(curFf);\n        } else {\n            ffs.push(`\"${curFf}\"`);\n        }\n    }\n\n    return `${fontStyle} ${fontSize * precision}px ${ffs.join(\",\")}`\n}\n\n/**\n * Splits a string into an array of spaces and words.\n *\n * @remarks\n * This method always returns an array with an even length.\n *\n * - The **even indices** are the group of spaces that occur before the word at the\n *   next (odd) index.\n * - The **odd indices** are the words.\n *\n * If the string does not begin with a space, the first element of the array will\n * be an empty string (\"\").\n *\n * @param {string} text\n * @returns\n */\nexport function splitWords(text) {\n    const regexp = /([ \\u200B]+)?([^ \\u200B]+)/g;\n    const arr = [];\n    let match;\n    while ((match = regexp.exec(text)) !== null) {\n        arr.push(match[1] || '');\n        arr.push(match[2]);\n    }\n    return arr;\n}\n\n/**\n * Returns true if the given character is a zero-width space.\n *\n * @param {string} space\n * @returns {boolean}\n */\nexport function isZeroWidthSpace(space) {\n    return space === '' || space === '\\u200B';\n}\n\n/**\n * Returns true if the given character is a zero-width space or a regular space.\n *\n * @param {string} space\n * @returns {boolean}\n */\nexport function isSpace(space) {\n    return isZeroWidthSpace(space) || space === ' ';\n}","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, isZeroWidthSpace, splitWords } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRenderer {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        this._context.font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n        );\n        this._context.textBaseline = this._settings.textBaseline;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace')\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('[Lightning] Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('[Lightning] Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"[Lightning] Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        let offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        let lineHeight = this._settings.lineHeight * precision;\n        const w = this._settings.w * precision;\n        const h = this._settings.h * precision;\n        let wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = (this._settings.letterSpacing || 0) * precision;\n        const textIndent = this._settings.textIndent * precision;\n\n        // Set font properties.\n        this.setFontProperties();\n\n        // Total width.\n        let width = w || this._stage.getOption('w');\n\n        // Inner width.\n        let innerWidth = width - (paddingLeft);\n        if (innerWidth < 10) {\n            width += (10 - innerWidth);\n            innerWidth = 10;\n        }\n\n        if (!wordWrapWidth) {\n            wordWrapWidth = innerWidth\n        }\n\n        // Text overflow\n        if (this._settings.textOverflow && !this._settings.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix)\n        }\n\n        // word wrap\n        // preserve original text\n        let linesInfo;\n        if (this._settings.wordWrap) {\n            linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);\n        } else {\n            linesInfo = {l: this._settings.text.split(/(?:\\r\\n|\\r|\\n)/), n: []};\n            let i, n = linesInfo.l.length;\n            for (let i = 0; i < n - 1; i++) {\n                linesInfo.n.push(i);\n            }\n        }\n        let lines = linesInfo.l;\n\n        if (this._settings.maxLines && lines.length > this._settings.maxLines) {\n            let usedLines = lines.slice(0, this._settings.maxLines);\n\n            let otherLines = null;\n            if (this._settings.maxLinesSuffix) {\n                // Wrap again with max lines suffix enabled.\n                let w = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;\n                let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w, letterSpacing, textIndent);\n                usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;\n                otherLines = [al.l.length > 1 ? al.l[1] : ''];\n            } else {\n                otherLines = [''];\n            }\n\n            // Re-assemble the remaining text.\n            let i, n = lines.length;\n            let j = 0;\n            let m = linesInfo.n.length;\n            for (i = this._settings.maxLines; i < n; i++) {\n                otherLines[j] += (otherLines[j] ? \" \" : \"\") + lines[i];\n                if (i + 1 < m && linesInfo.n[i + 1]) {\n                    j++;\n                }\n            }\n\n            renderInfo.remainingText = otherLines.join(\"\\n\");\n\n            renderInfo.moreTextLines = true;\n\n            lines = usedLines;\n        } else {\n            renderInfo.moreTextLines = false;\n            renderInfo.remainingText = \"\";\n        }\n\n        // calculate text width\n        let maxLineWidth = 0;\n        let lineWidths = [];\n        for (let i = 0; i < lines.length; i++) {\n            let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);\n            lineWidths.push(lineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        renderInfo.lineWidths = lineWidths;\n\n        if (!w) {\n            // Auto-set width to max text length.\n            width = maxLineWidth + paddingLeft + paddingRight;\n            innerWidth = maxLineWidth;\n        }\n\n        // calculate text height\n        lineHeight = lineHeight || fontSize;\n\n        let height;\n        if (h) {\n            height = h;\n        } else {\n            const baselineOffset = (this._settings.textBaseline != 'bottom') ? 0.5 * fontSize : 0;\n            height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;\n        }\n\n        if (offsetY === null) {\n            offsetY = fontSize;\n        }\n\n        renderInfo.w = width;\n        renderInfo.h = height;\n        renderInfo.lines = lines;\n        renderInfo.precision = precision;\n\n        if (!width) {\n            // To prevent canvas errors.\n            width = 1;\n        }\n\n        if (!height) {\n            // To prevent canvas errors.\n            height = 1;\n        }\n\n        if (cutSx || cutEx) {\n            width = Math.min(width, cutEx - cutSx);\n        }\n\n        if (cutSy || cutEy) {\n            height = Math.min(height, cutEy - cutSy);\n        }\n\n        renderInfo.width = width;\n        renderInfo.innerWidth = innerWidth;\n        renderInfo.height = height;\n        renderInfo.fontSize = fontSize;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutEy = cutEy;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.lineWidths = lineWidths;\n        renderInfo.offsetY = offsetY;\n        renderInfo.paddingLeft = paddingLeft;\n        renderInfo.paddingRight = paddingRight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textIndent = textIndent;\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n\n        // Add extra margin to prevent issue with clipped text when scaling.\n        this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(renderInfo.height);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        let linePositionX;\n        let linePositionY;\n\n        let drawLines = [];\n\n        // Draw lines line by line.\n        for (let i = 0, n = renderInfo.lines.length; i < n; i++) {\n            linePositionX = i === 0 ? renderInfo.textIndent : 0;\n\n            // By default, text is aligned to top\n            linePositionY = (i * renderInfo.lineHeight) + renderInfo.offsetY;\n\n            if (this._settings.verticalAlign == 'middle') {\n                linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;\n            } else if (this._settings.verticalAlign == 'bottom') {\n                linePositionY += renderInfo.lineHeight - renderInfo.fontSize;\n            }\n\n            if (this._settings.textAlign === 'right') {\n                linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]);\n            } else if (this._settings.textAlign === 'center') {\n                linePositionX += ((renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2);\n            }\n            linePositionX += renderInfo.paddingLeft;\n\n            drawLines.push({text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i]});\n        }\n\n        // Highlight.\n        if (this._settings.highlight) {\n            let color = this._settings.highlightColor || 0x00000000;\n\n            let hlHeight = (this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5);\n            const offset = this._settings.highlightOffset * precision;\n            const hlPaddingLeft = (this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(color);\n            for (let i = 0; i < drawLines.length; i++) {\n                let drawLine = drawLines[i];\n                this._context.fillRect((drawLine.x - hlPaddingLeft), (drawLine.y - renderInfo.offsetY + offset), (drawLine.w + hlPaddingRight + hlPaddingLeft), hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);\n        for (let i = 0, n = drawLines.length; i < n; i++) {\n            let drawLine = drawLines[i];\n\n            if (renderInfo.letterSpacing === 0) {\n                this._context.fillText(drawLine.text, drawLine.x, drawLine.y);\n            } else {\n                const textSplit = drawLine.text.split('');\n                let x = drawLine.x;\n                for (let i = 0, j = textSplit.length; i < j; i++) {\n                    this._context.fillText(textSplit[i], x, drawLine.y);\n                    x += this.measureText(textSplit[i], renderInfo.letterSpacing);\n                }\n            }\n        }\n\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        this.renderInfo = renderInfo;\n    };\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this._context.measureText(suffix).width;\n        const wordLen = word.length\n        const wordWidth = this._context.measureText(word).width;\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     */\n    wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {\n        // Greedy wrapping algorithm that will wrap words as the line grows longer.\n        // than its horizontal bounds.\n        let lines = text.split(/\\r?\\n/g);\n        let allLines = [];\n        let realNewlines = [];\n        for (let i = 0; i < lines.length; i++) {\n            let resultLines = [];\n            let result = '';\n            let spaceLeft = wordWrapWidth - indent;\n            let words = splitWords(lines[i]);\n            for (let j = 0; j < words.length; j += 2) {\n                const space = words[j];\n                const word = words[j + 1];\n                const wordWidth = this.measureText(word, letterSpacing);\n                const spaceWidth = isZeroWidthSpace(space) ? 0 : this.measureText(space, letterSpacing);\n                const wordWidthWithSpace = wordWidth + spaceWidth;\n                if (j === 0 || wordWidthWithSpace > spaceLeft) {\n                    // Skip printing the newline if it's the first word of the line that is.\n                    // greater than the word wrap width.\n                    if (j > 0) {\n                        resultLines.push(result);\n                        result = '';\n                    }\n                    result += word;\n                    spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);\n                }\n                else {\n                    spaceLeft -= wordWidthWithSpace;\n                    result += space + word;\n                }\n            }\n\n            resultLines.push(result);\n            result = '';\n\n            allLines = allLines.concat(resultLines);\n\n            if (i < lines.length - 1) {\n                realNewlines.push(allLines.length);\n            }\n        }\n\n        return {l: allLines, n: realNewlines};\n    };\n\n    measureText(word, space = 0) {\n        if (!space) {\n            return this._context.measureText(word).width;\n        }\n        return word.split('').reduce((acc, char) => {\n            return acc + this._context.measureText(char).width + space;\n        }, 0);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, isSpace } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRendererAdvanced {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        const font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace')\n        );\n        this._context.font = font;\n        this._context.textBaseline = this._settings.textBaseline;\n        return font;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace')\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        // const offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        const lineHeight = this._settings.lineHeight * precision || fontSize;\n        const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption('w');\n        // const h = this._settings.h * precision;\n        const wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = this._settings.letterSpacing || 0;\n\n        // Set font properties.\n        renderInfo.baseFont = this.setFontProperties();\n\n        renderInfo.w = w;\n        renderInfo.width = w;\n        renderInfo.text = this._settings.text;\n        renderInfo.precision = precision;\n        renderInfo.fontSize = fontSize;\n        renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textAlign = this._settings.textAlign;\n        renderInfo.textColor = this._settings.textColor;\n        renderInfo.verticalAlign = this._settings.verticalAlign;\n        renderInfo.highlight = this._settings.highlight;\n        renderInfo.highlightColor = this._settings.highlightColor;\n        renderInfo.highlightHeight = this._settings.highlightHeight;\n        renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;\n        renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;\n        renderInfo.highlightOffset = this._settings.highlightOffset;\n        renderInfo.paddingLeft = this._settings.paddingLeft;\n        renderInfo.paddingRight = this._settings.paddingRight;\n        renderInfo.maxLines = this._settings.maxLines;\n        renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;\n        renderInfo.textOverflow = this._settings.textOverflow;\n        renderInfo.wordWrap = this._settings.wordWrap;\n        renderInfo.wordWrapWidth = wordWrapWidth;\n        renderInfo.shadow = this._settings.shadow;\n        renderInfo.shadowColor = this._settings.shadowColor;\n        renderInfo.shadowOffsetX = this._settings.shadowOffsetX;\n        renderInfo.shadowOffsetY = this._settings.shadowOffsetY;\n        renderInfo.shadowBlur = this._settings.shadowBlur;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEy = cutEy;\n        renderInfo.textIndent = this._settings.textIndent * precision;\n        renderInfo.wordBreak = this._settings.wordBreak;\n\n        let text = renderInfo.text;\n        let wrapWidth = renderInfo.wordWrap ? (renderInfo.wordWrapWidth || renderInfo.width) : renderInfo.width;\n\n        // Text overflow\n        if (renderInfo.textOverflow && !renderInfo.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);\n        }\n\n        text = this.tokenize(text);\n        text = this.parse(text);\n        text = this.measure(text, letterSpacing, renderInfo.baseFont);\n\n        if (renderInfo.textIndent) {\n            text = this.indent(text, renderInfo.textIndent);\n        }\n\n        if (renderInfo.wordBreak) {\n            text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), [])\n            this.resetFontStyle()\n        }\n\n        // Calculate detailed drawing information\n        let x = paddingLeft;\n        let lineNo = 0;\n\n        for (const t of text) {\n            // Wrap text\n            if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == '\\n') {\n                x = paddingLeft;\n                lineNo += 1;\n            }\n            t.lineNo = lineNo;\n\n            if (t.text == '\\n') {\n                continue;\n            }\n\n            t.x = x;\n            x += t.width;\n        }\n        renderInfo.lineNum = lineNo + 1;\n\n        if (this._settings.h) {\n            renderInfo.h = this._settings.h;\n        } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {\n            renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;\n        } else {\n            renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;\n        }\n\n        // This calculates the baseline offset in pixels from the font size.\n        // To retrieve this ratio, you would do this calculation:\n        //     (FontUnitsPerEm − hhea.Ascender − hhea.Descender) / (2 × FontUnitsPerEm)\n        //\n        // This give you the ratio for the baseline, which is then used to figure out\n        // where the baseline is relative to the bottom of the text bounding box.\n        const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;\n\n        // Vertical align\n        let vaOffset = 0;\n        if (renderInfo.verticalAlign == 'top' && this._context.textBaseline == 'alphabetic') {\n            vaOffset = -baselineOffsetInPx;\n        } else if (renderInfo.verticalAlign == 'middle') {\n            vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;\n        } else if (this._settings.verticalAlign == 'bottom') {\n            vaOffset = renderInfo.lineHeight - renderInfo.fontSize;\n        }\n\n        // Calculate lines information\n        renderInfo.lines = []\n        for (let i = 0; i < renderInfo.lineNum; i++) {\n            renderInfo.lines[i] = {\n                width: 0,\n                x: 0,\n                y: renderInfo.lineHeight * i + vaOffset,\n                text: [],\n            }\n        }\n\n        for (let t of text) {\n            renderInfo.lines[t.lineNo].text.push(t);\n        }\n\n        // Filter out white spaces at beginning and end of each line\n        for (const l of renderInfo.lines) {\n            if (l.text.length == 0) {\n                continue;\n            }\n\n            const firstWord = l.text[0].text;\n            const lastWord = l.text[l.text.length - 1].text;\n\n            if (firstWord == '\\n') {\n                l.text.shift();\n            }\n            if (isSpace(lastWord) || lastWord == '\\n') {\n                l.text.pop();\n            }\n        }\n\n\n        // Calculate line width\n        for (let l of renderInfo.lines) {\n            l.width = l.text.reduce((acc, t) => acc + t.width, 0);\n        }\n\n        renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;\n        renderInfo.w = renderInfo.width;\n\n        // Apply maxLinesSuffix\n        if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {\n            const index = renderInfo.maxLines - 1;\n            let lastLineText = text.filter((t) => t.lineNo == index)\n            let suffix = renderInfo.maxLinesSuffix;\n            suffix = this.tokenize(suffix);\n            suffix = this.parse(suffix);\n            suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);\n            for (const s of suffix) {\n                s.lineNo = index;\n                s.x = 0;\n                lastLineText.push(s)\n            }\n\n            const spl = suffix.length + 1\n            let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n            while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {\n                lastLineText.splice(lastLineText.length - spl, 1);\n                _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n                if (lastLineText.length < spl) {\n                    break;\n                }\n            }\n            this.alignLine(lastLineText, lastLineText[0].x)\n\n            renderInfo.lines[index].text = lastLineText;\n            renderInfo.lines[index].width = _w;\n        }\n\n        // Horizontal alignment offset\n        if (renderInfo.textAlign == 'center') {\n            for (let l of renderInfo.lines) {\n                l.x = (renderInfo.width - l.width - paddingLeft) / 2;\n            }\n        } else if (renderInfo.textAlign == 'right') {\n            for (let l of renderInfo.lines) {\n                l.x = renderInfo.width - l.width - paddingLeft;\n            }\n        }\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n        const paddingLeft = renderInfo.paddingLeft * precision;\n\n        // Set canvas dimensions\n        let canvasWidth = renderInfo.w || renderInfo.width;\n        if (renderInfo.cutSx || renderInfo.cutEx) {\n            canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);\n        }\n\n        let canvasHeight = renderInfo.h;\n        if (renderInfo.cutSy || renderInfo.cutEy) {\n            canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);\n        }\n\n        this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(canvasHeight);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        // Cut\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        // Highlight\n        if (renderInfo.highlight) {\n            const hlColor = renderInfo.highlightColor || 0x00000000;\n            const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision :  renderInfo.fontSize * 1.5;\n            const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;\n            const hlPaddingLeft = (renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(hlColor);\n            const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;\n            for (let i = 0; i < lineNum; i++) {\n                const l = renderInfo.lines[i];\n                this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        // Draw text\n        const defaultColor = StageUtils.getRgbaString(this._settings.textColor);\n        let currentColor = defaultColor;\n        this._context.fillStyle = defaultColor;\n        for (const line of renderInfo.lines) {\n            for (const t of line.text) {\n                let lx = 0;\n\n                if (t.text == '\\n') {\n                    continue;\n                }\n\n                if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {\n                    continue;\n                }\n\n                if (t.color != currentColor) {\n                    currentColor = t.color;\n                    this._context.fillStyle = currentColor;\n                }\n\n                this._context.font = t.fontStyle;\n\n                // Draw with letter spacing\n                if (t.letters) {\n                    for (let l of t.letters) {\n                        const _x = renderInfo.lines[t.lineNo].x + t.x + lx;\n                        this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                        lx += l.width;\n                    }\n                // Standard drawing\n                } else {\n                    const _x = renderInfo.lines[t.lineNo].x + t.x;\n                    this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                }\n            }\n        }\n\n        // Reset text shadow\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        // Reset cut translation\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        // Postprocess renderInfo.lines to be compatible with standard version\n        renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ''));\n        if (renderInfo.maxLines) {\n            renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);\n        }\n\n\n        this.renderInfo = renderInfo;\n\n    };\n\n    measureText(word, space = 0) {\n        if (!space) {\n            return this._context.measureText(word).width;\n        }\n        return word.split('').reduce((acc, char) => {\n            return acc + this._context.measureText(char).width + space;\n        }, 0);\n    }\n\n    tokenize(text) {\n        const re =/ |\\u200B|\\n|<i>|<\\/i>|<b>|<\\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\\/color>/g\n\n        const delimeters = text.match(re) || [];\n        const words = text.split(re) || [];\n\n        let final = [];\n        for (let i = 0; i < words.length; i++) {\n            final.push(words[i], delimeters[i])\n        }\n        final.pop()\n        return final.filter((word) => word != '');\n\n    }\n\n    parse(tokens) {\n        let italic = 0;\n        let bold = 0;\n        let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];\n        let color = 0;\n\n        const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;\n\n        return tokens.map((t) => {\n            if (t == '<i>') {\n                italic += 1;\n                t = '';\n            } else if (t == '</i>' && italic > 0) {\n                italic -= 1;\n                t = '';\n            } else if (t == '<b>') {\n                bold += 1;\n                t = '';\n            } else if (t == '</b>' && bold > 0) {\n                bold -= 1;\n                t = '';\n            } else if (t == '</color>') {\n                if (colorStack.length > 1) {\n                    color -= 1;\n                    colorStack.pop();\n                }\n                t = '';\n            } else if (colorRegexp.test(t)) {\n                const matched = colorRegexp.exec(t);\n                colorStack.push(\n                    StageUtils.getRgbaString(parseInt(matched[1]))\n                );\n                color += 1;\n                t = '';\n\n            }\n\n            return {\n                text: t,\n                italic: italic,\n                bold: bold,\n                color: colorStack[color],\n            }\n        })\n        .filter((o) => o.text != '');\n    }\n\n    applyFontStyle(word, baseFont) {\n        let font = baseFont;\n        if (word.bold) {\n            font = 'bold ' + font;\n        }\n        if (word.italic) {\n            font = 'italic ' + font;\n        }\n        this._context.font = font\n        word.fontStyle = font;\n    }\n\n    resetFontStyle(baseFont) {\n        this._context.font = baseFont;\n    }\n\n    measure(parsed, letterSpacing = 0, baseFont) {\n        for (const p of parsed) {\n            this.applyFontStyle(p, baseFont);\n            p.width = this.measureText(p.text, letterSpacing);\n\n            // Letter by letter detail for letter spacing\n            if (letterSpacing > 0) {\n                p.letters = p.text.split('').map((l) => {return {text: l}});\n                for (let l of p.letters) {\n                    l.width = this.measureText(l.text, letterSpacing);\n                }\n            }\n\n        }\n        this.resetFontStyle(baseFont);\n        return parsed;\n    }\n\n    indent(parsed, textIndent) {\n        parsed.splice(0, 0, {text: \"\", width: textIndent});\n        return parsed;\n    }\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this._context.measureText(suffix).width;\n        const wordLen = word.length\n        const wordWidth = this._context.measureText(word).width;\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this._context.measureText(word.substring(0, cutoffIndex)).width + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '')\n    }\n\n    _getBreakIndex(word, width) {\n        const wordLen = word.length;\n        const wordWidth = this.measureText(word);\n\n        if (wordWidth <= width) {\n            return {breakIndex: word.length, truncWordWidth: wordWidth};\n        }\n\n        let breakIndex = Math.floor((width * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, breakIndex))\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > width) {\n            while (breakIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth > width) {\n                    breakIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (breakIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth < width) {\n                    breakIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    breakIndex -=1;\n                    truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                    break;\n                }\n            }\n        }\n        return {breakIndex, truncWordWidth};\n\n    }\n\n    wordBreak(word, width, baseFont) {\n        if (!word.text) {\n            return word\n        }\n        this.applyFontStyle(word, baseFont)\n        const parts = [];\n        let text = word.text;\n        if (!word.letters) {\n            while (true) {\n                const {breakIndex, truncWordWidth} = this._getBreakIndex(text, width);\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = truncWordWidth;\n\n                if (breakIndex === text.length) {\n                    break;\n                }\n\n                text = text.slice(breakIndex);\n            }\n        } else {\n            let totalWidth = 0;\n            let letters = [];\n            let breakIndex = 0;\n            for (const l of word.letters) {\n                if (totalWidth + l.width >= width) {\n                    parts.push({...word});\n                    parts[parts.length - 1].text = text.slice(0, breakIndex);\n                    parts[parts.length - 1].width = totalWidth;\n                    parts[parts.length - 1].letters = letters;\n                    text = text.slice(breakIndex);\n                    totalWidth = 0;\n                    letters = [];\n                    breakIndex = 0;\n\n                } else {\n                    breakIndex += 1;\n                    letters.push(l);\n                    totalWidth += l.width;\n                }\n            }\n\n            if (totalWidth > 0) {\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = totalWidth;\n                parts[parts.length - 1].letters = letters;\n            }\n        }\n\n        return parts;\n    }\n\n    alignLine(parsed, initialX = 0) {\n        let prevWidth = 0;\n        let prevX = initialX;\n        for (const word of parsed) {\n            if (word.text == '\\n') {\n                continue;\n            }\n            word.x = prevX + prevWidth;\n            prevX = word.x;\n            prevWidth = word.width;\n        }\n\n    }\n}","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class TextTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        // We use the stage precision as the default precision in case of a text texture.\n        this._precision = this.stage.getOption('precision');\n    }\n\n    static renderer(stage, canvas, settings) {\n        if (this.advancedRenderer) {\n            return new TextTextureRendererAdvanced(stage, canvas, settings);\n        } else {\n            return new TextTextureRenderer(stage, canvas, settings);\n        }\n    }\n\n    get text() {\n        return this._text;\n    }\n\n    set text(v) {\n        if (this._text !== v) {\n            this._text = \"\" + v;\n            this._changed();\n        }\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (this._w !== v) {\n            this._w = v;\n            this._changed();\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (this._h !== v) {\n            this._h = v;\n            this._changed();\n        }\n    }\n\n    get fontStyle() {\n        return this._fontStyle;\n    }\n\n    set fontStyle(v) {\n        if (this._fontStyle !== v) {\n            this._fontStyle = v;\n            this._changed();\n        }\n    }\n\n    get fontBaselineRatio() {\n        return this._fontBaselineRatio;\n    }\n    \n    set fontBaselineRatio(v) {\n        if (this._fontBaselineRatio !== v) {\n            this._fontBaselineRatio = v;\n            this._changed();\n        }\n    }\n\n    get fontSize() {\n        return this._fontSize;\n    }\n\n    set fontSize(v) {\n        if (this._fontSize !== v) {\n            this._fontSize = v;\n            this._changed();\n        }\n    }\n\n    get fontFace() {\n        return this._fontFace;\n    }\n\n    set fontFace(v) {\n        if (this._fontFace !== v) {\n            this._fontFace = v;\n            this._changed();\n        }\n    }\n\n    get wordWrap() {\n        return this._wordWrap;\n    }\n\n    set wordWrap(v) {\n        if (this._wordWrap !== v) {\n            this._wordWrap = v;\n            this._changed();\n        }\n    }\n\n    get wordWrapWidth() {\n        return this._wordWrapWidth;\n    }\n\n    set wordWrapWidth(v) {\n        if (this._wordWrapWidth !== v) {\n            this._wordWrapWidth = v;\n            this._changed();\n        }\n    }\n\n    get wordBreak() {\n        return this._wordBreak;\n    }\n\n    set wordBreak(v) {\n        if (this._wordBreak !== v) {\n            this._wordBreak = v;\n            this._changed();\n        }\n    }\n\n    get textOverflow() {\n        return this._textOverflow;\n    }\n\n    set textOverflow(v) {\n        if (v != this._textOverflow) {\n            this._textOverflow = v;\n            this._changed();\n        }\n    }\n\n    get lineHeight() {\n        return this._lineHeight;\n    }\n\n    set lineHeight(v) {\n        if (this._lineHeight !== v) {\n            this._lineHeight = v;\n            this._changed();\n        }\n    }\n\n    get textBaseline() {\n        return this._textBaseline;\n    }\n\n    set textBaseline(v) {\n        if (this._textBaseline !== v) {\n            this._textBaseline = v;\n            this._changed();\n        }\n    }\n\n    get textAlign() {\n        return this._textAlign;\n    }\n\n    set textAlign(v) {\n        if (this._textAlign !== v) {\n            this._textAlign = v;\n            this._changed();\n        }\n    }\n\n    get verticalAlign() {\n        return this._verticalAlign;\n    }\n\n    set verticalAlign(v) {\n        if (this._verticalAlign !== v) {\n            this._verticalAlign = v;\n            this._changed();\n        }\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        if (this._offsetY !== v) {\n            this._offsetY = v;\n            this._changed();\n        }\n    }\n\n    get maxLines() {\n        return this._maxLines;\n    }\n\n    set maxLines(v) {\n        if (this._maxLines !== v) {\n            this._maxLines = v;\n            this._changed();\n        }\n    }\n\n    get maxLinesSuffix() {\n        return this._maxLinesSuffix;\n    }\n\n    set maxLinesSuffix(v) {\n        if (this._maxLinesSuffix !== v) {\n            this._maxLinesSuffix = v;\n            this._changed();\n        }\n    }\n\n    get textColor() {\n        return this._textColor;\n    }\n\n    set textColor(v) {\n        if (this._textColor !== v) {\n            this._textColor = v;\n            this._changed();\n        }\n    }\n\n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingLeft(v) {\n        if (this._paddingLeft !== v) {\n            this._paddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingRight(v) {\n        if (this._paddingRight !== v) {\n            this._paddingRight = v;\n            this._changed();\n        }\n    }\n\n    get shadow() {\n        return this._shadow;\n    }\n\n    set shadow(v) {\n        if (this._shadow !== v) {\n            this._shadow = v;\n            this._changed();\n        }\n    }\n\n    get shadowColor() {\n        return this._shadowColor;\n    }\n\n    set shadowColor(v) {\n        if (this._shadowColor !== v) {\n            this._shadowColor = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    set shadowOffsetX(v) {\n        if (this._shadowOffsetX !== v) {\n            this._shadowOffsetX = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    set shadowOffsetY(v) {\n        if (this._shadowOffsetY !== v) {\n            this._shadowOffsetY = v;\n            this._changed();\n        }\n    }\n\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    set shadowBlur(v) {\n        if (this._shadowBlur !== v) {\n            this._shadowBlur = v;\n            this._changed();\n        }\n    }\n\n    get highlight() {\n        return this._highlight;\n    }\n\n    set highlight(v) {\n        if (this._highlight !== v) {\n            this._highlight = v;\n            this._changed();\n        }\n    }\n\n    get highlightHeight() {\n        return this._highlightHeight;\n    }\n\n    set highlightHeight(v) {\n        if (this._highlightHeight !== v) {\n            this._highlightHeight = v;\n            this._changed();\n        }\n    }\n\n    get highlightColor() {\n        return this._highlightColor;\n    }\n\n    set highlightColor(v) {\n        if (this._highlightColor !== v) {\n            this._highlightColor = v;\n            this._changed();\n        }\n    }\n\n    get highlightOffset() {\n        return this._highlightOffset;\n    }\n\n    set highlightOffset(v) {\n        if (this._highlightOffset !== v) {\n            this._highlightOffset = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingLeft() {\n        return this._highlightPaddingLeft;\n    }\n\n    set highlightPaddingLeft(v) {\n        if (this._highlightPaddingLeft !== v) {\n            this._highlightPaddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingRight() {\n        return this._highlightPaddingRight;\n    }\n\n    set highlightPaddingRight(v) {\n        if (this._highlightPaddingRight !== v) {\n            this._highlightPaddingRight = v;\n            this._changed();\n        }\n    }\n\n    get cutSx() {\n        return this._cutSx;\n    }\n\n    set cutSx(v) {\n        if (this._cutSx !== v) {\n            this._cutSx = v;\n            this._changed();\n        }\n    }\n\n    get cutEx() {\n        return this._cutEx;\n    }\n\n    set cutEx(v) {\n        if (this._cutEx !== v) {\n            this._cutEx = v;\n            this._changed();\n        }\n    }\n\n    get cutSy() {\n        return this._cutSy;\n    }\n\n    set cutSy(v) {\n        if (this._cutSy !== v) {\n            this._cutSy = v;\n            this._changed();\n        }\n    }\n\n    get cutEy() {\n        return this._cutEy;\n    }\n\n    set cutEy(v) {\n        if (this._cutEy !== v) {\n            this._cutEy = v;\n            this._changed();\n        }\n    }\n\n    get advancedRenderer() {\n        return this._advancedRenderer;\n    }\n\n    set advancedRenderer(v) {\n        if (this._advancedRenderer !== v) {\n            this._advancedRenderer = v;\n            this._changed();\n        }\n    }\n\n    set letterSpacing(v) {\n        if (this._letterSpacing !== v) {\n            this._letterSpacing = v;\n            this._changed();\n        }\n    }\n\n    get letterSpacing() {\n        return this._letterSpacing;\n    }\n\n    set textIndent(v) {\n        if (this._textIndent !== v) {\n            this._textIndent = v;\n            this._changed();\n        }\n    }\n\n    get textIndent() {\n        return this._textIndent;\n    }\n\n    get precision() {\n        return super.precision;\n    }\n\n    set precision(v) {\n        // We actually draw differently when the precision changes.\n        if (this.precision !== v) {\n            super.precision = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this.text;\n    }\n\n    _getLookupId() {\n        let parts = [];\n\n        if (this.w !== 0) parts.push(\"w \" + this.w);\n        if (this.h !== 0) parts.push(\"h \" + this.h);\n        if (this.fontStyle !== \"normal\") parts.push(\"fS\" + this.fontStyle);\n        if (this.fontSize !== 40) parts.push(\"fs\" + this.fontSize);\n        if (this.fontBaselineRatio !== 0) parts.push('fb' + this.fontBaselineRatio);\n        if (this.fontFace !== null) parts.push(\"ff\" + (Array.isArray(this.fontFace) ? this.fontFace.join(\",\") : this.fontFace));\n        if (this.wordWrap !== true) parts.push(\"wr\" + (this.wordWrap ? 1 : 0));\n        if (this.wordWrapWidth !== 0) parts.push(\"ww\" + this.wordWrapWidth);\n        if (this.wordBreak !== false) parts.push(\"wb\" + this.wordBreak ? 1 : 0);\n        if (this.textOverflow != \"\") parts.push(\"to\" + this.textOverflow);\n        if (this.lineHeight !== null) parts.push(\"lh\" + this.lineHeight);\n        if (this.textBaseline !== \"alphabetic\") parts.push(\"tb\" + this.textBaseline);\n        if (this.textAlign !== \"left\") parts.push(\"ta\" + this.textAlign);\n        if (this.verticalAlign !== \"top\") parts.push(\"va\" + this.verticalAlign);\n        if (this.offsetY !== null) parts.push(\"oy\" + this.offsetY);\n        if (this.maxLines !== 0) parts.push(\"ml\" + this.maxLines);\n        if (this.maxLinesSuffix !== \"..\") parts.push(\"ms\" + this.maxLinesSuffix);\n        parts.push(\"pc\" + this.precision);\n        if (this.textColor !== 0xffffffff) parts.push(\"co\" + this.textColor.toString(16));\n        if (this.paddingLeft !== 0) parts.push(\"pl\" + this.paddingLeft);\n        if (this.paddingRight !== 0) parts.push(\"pr\" + this.paddingRight);\n        if (this.shadow !== false) parts.push(\"sh\" + (this.shadow ? 1 : 0));\n        if (this.shadowColor !== 0xff000000) parts.push(\"sc\" + this.shadowColor.toString(16));\n        if (this.shadowOffsetX !== 0) parts.push(\"sx\" + this.shadowOffsetX);\n        if (this.shadowOffsetY !== 0) parts.push(\"sy\" + this.shadowOffsetY);\n        if (this.shadowBlur !== 5) parts.push(\"sb\" + this.shadowBlur);\n        if (this.highlight !== false) parts.push(\"hL\" + (this.highlight ? 1 : 0));\n        if (this.highlightHeight !== 0) parts.push(\"hh\" + this.highlightHeight);\n        if (this.highlightColor !== 0xff000000) parts.push(\"hc\" + this.highlightColor.toString(16));\n        if (this.highlightOffset !== null) parts.push(\"ho\" + this.highlightOffset);\n        if (this.highlightPaddingLeft !== null) parts.push(\"hl\" + this.highlightPaddingLeft);\n        if (this.highlightPaddingRight !== null) parts.push(\"hr\" + this.highlightPaddingRight);\n        if (this.letterSpacing !== null) parts.push(\"ls\" + this.letterSpacing);\n        if (this.textIndent !== null) parts.push(\"ti\" + this.textIndent);\n\n        if (this.cutSx) parts.push(\"csx\" + this.cutSx);\n        if (this.cutEx) parts.push(\"cex\" + this.cutEx);\n        if (this.cutSy) parts.push(\"csy\" + this.cutSy);\n        if (this.cutEy) parts.push(\"cey\" + this.cutEy);\n\n        if (this.advancedRenderer) parts.push(\"aR\" + this.advancedRenderer ? 1 : 0);\n\n        let id = \"TX$\" + parts.join(\"|\") + \":\" + this.text;\n        return id;\n    }\n\n    _getSourceLoader() {\n        const args = this.cloneArgs();\n\n        const gl = this.stage.gl;\n\n        return function (cb) {\n            const canvas = this.stage.platform.getDrawingCanvas();\n            const renderer = (args.advancedRenderer)\n              ? new TextTextureRendererAdvanced(this.stage, canvas, args)\n              : new TextTextureRenderer(this.stage, canvas, args);\n            \n            const p = renderer.draw();\n\n            const texParams = {};\n\n            const sharpCfg = this.stage.getOption('fontSharp');\n            let sharpen = false;\n\n            // Prevent text blur when text texture is downscaled\n            if (Utils.isBoolean(sharpCfg)) {\n                sharpen = sharpCfg;\n            } else if (Utils.isObject(sharpCfg)) {\n                const precision = this.stage.getRenderPrecision();\n                sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;\n            }\n\n            if (gl && sharpen) {\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            if (p) {\n                p.then(() => {\n                    /* FIXME: on some platforms (e.g. RPI), throttling text textures cause artifacts */\n                    cb(null, Object.assign({\n                        renderInfo: renderer.renderInfo,\n                        throttle: false,\n                        texParams: texParams,\n                    }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n                }).catch((err) => {\n                    cb(err);\n                });\n            } else {\n                cb(null, Object.assign({\n                    renderInfo: renderer.renderInfo,\n                    throttle: false,\n                    texParams: texParams,\n                }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n            }\n        };\n    }\n\n\n    getNonDefaults() {\n        const nonDefaults = super.getNonDefaults();\n        if (this.text !== \"\") nonDefaults['text'] = this.text;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.fontStyle !== \"normal\") nonDefaults['fontStyle'] = this.fontStyle;\n        if (this.fontSize !== 40) nonDefaults[\"fontSize\"] = this.fontSize;\n        if (this.fontBaselineRatio !== 0) nonDefaults['fontBaselineRatio'] = this.fontBaselineRatio;\n        if (this.fontFace !== null) nonDefaults[\"fontFace\"] = this.fontFace;\n        if (this.wordWrap !== true) nonDefaults[\"wordWrap\"] = this.wordWrap;\n        if (this.wordWrapWidth !== 0) nonDefaults[\"wordWrapWidth\"] = this.wordWrapWidth;\n        if (this.wordBreak !== false) nonDefaults[\"wordBreak\"] = this.wordBreak;\n        if (this.textOverflow != \"\") nonDefaults[\"textOverflow\"] = this.textOverflow;\n        if (this.lineHeight !== null) nonDefaults[\"lineHeight\"] = this.lineHeight;\n        if (this.textBaseline !== \"alphabetic\") nonDefaults[\"textBaseline\"] = this.textBaseline;\n        if (this.textAlign !== \"left\") nonDefaults[\"textAlign\"] = this.textAlign;\n        if (this.verticalAlign !== \"top\") nonDefaults[\"verticalAlign\"] = this.verticalAlign;\n        if (this.offsetY !== null) nonDefaults[\"offsetY\"] = this.offsetY;\n        if (this.maxLines !== 0) nonDefaults[\"maxLines\"] = this.maxLines;\n        if (this.maxLinesSuffix !== \"..\") nonDefaults[\"maxLinesSuffix\"] = this.maxLinesSuffix;\n        if (this.precision !== this.stage.getOption('precision')) nonDefaults[\"precision\"] = this.precision;\n        if (this.textColor !== 0xffffffff) nonDefaults[\"textColor\"] = this.textColor;\n        if (this.paddingLeft !== 0) nonDefaults[\"paddingLeft\"] = this.paddingLeft;\n        if (this.paddingRight !== 0) nonDefaults[\"paddingRight\"] = this.paddingRight;\n        if (this.shadow !== false) nonDefaults[\"shadow\"] = this.shadow;\n        if (this.shadowColor !== 0xff000000) nonDefaults[\"shadowColor\"] = this.shadowColor;\n        if (this.shadowOffsetX !== 0) nonDefaults[\"shadowOffsetX\"] = this.shadowOffsetX;\n        if (this.shadowOffsetY !== 0) nonDefaults[\"shadowOffsetY\"] = this.shadowOffsetY;\n        if (this.shadowBlur !== 5) nonDefaults[\"shadowBlur\"] = this.shadowBlur;\n        if (this.highlight !== false) nonDefaults[\"highlight\"] = this.highlight;\n        if (this.highlightHeight !== 0) nonDefaults[\"highlightHeight\"] = this.highlightHeight;\n        if (this.highlightColor !== 0xff000000) nonDefaults[\"highlightColor\"] = this.highlightColor;\n        if (this.highlightOffset !== 0) nonDefaults[\"highlightOffset\"] = this.highlightOffset;\n        if (this.highlightPaddingLeft !== 0) nonDefaults[\"highlightPaddingLeft\"] = this.highlightPaddingLeft;\n        if (this.highlightPaddingRight !== 0) nonDefaults[\"highlightPaddingRight\"] = this.highlightPaddingRight;\n        if (this.letterSpacing !== 0) nonDefaults[\"letterSpacing\"] = this.letterSpacing;\n        if (this.textIndent !== 0) nonDefaults[\"textIndent\"] = this.textIndent;\n\n        if (this.cutSx) nonDefaults[\"cutSx\"] = this.cutSx;\n        if (this.cutEx) nonDefaults[\"cutEx\"] = this.cutEx;\n        if (this.cutSy) nonDefaults[\"cutSy\"] = this.cutSy;\n        if (this.cutEy) nonDefaults[\"cutEy\"] = this.cutEy;\n\n        if (this.advancedRenderer) nonDefaults[\"renderer\"] = this.advancedRenderer;\n        return nonDefaults;\n    }\n\n    cloneArgs() {\n        let obj = {};\n        obj.text = this._text;\n        obj.w = this._w;\n        obj.h = this._h;\n        obj.fontStyle = this._fontStyle;\n        obj.fontSize = this._fontSize;\n        obj.fontBaselineRatio = this._fontBaselineRatio;\n        obj.fontFace = this._fontFace;\n        obj.wordWrap = this._wordWrap;\n        obj.wordWrapWidth = this._wordWrapWidth;\n        obj.wordBreak = this._wordBreak;\n        obj.textOverflow = this._textOverflow;\n        obj.lineHeight = this._lineHeight;\n        obj.textBaseline = this._textBaseline;\n        obj.textAlign = this._textAlign;\n        obj.verticalAlign = this._verticalAlign;\n        obj.offsetY = this._offsetY;\n        obj.maxLines = this._maxLines;\n        obj.maxLinesSuffix = this._maxLinesSuffix;\n        obj.precision = this._precision;\n        obj.textColor = this._textColor;\n        obj.paddingLeft = this._paddingLeft;\n        obj.paddingRight = this._paddingRight;\n        obj.shadow = this._shadow;\n        obj.shadowColor = this._shadowColor;\n        obj.shadowOffsetX = this._shadowOffsetX;\n        obj.shadowOffsetY = this._shadowOffsetY;\n        obj.shadowBlur = this._shadowBlur;\n        obj.highlight = this._highlight;\n        obj.highlightHeight = this._highlightHeight;\n        obj.highlightColor = this._highlightColor;\n        obj.highlightOffset = this._highlightOffset;\n        obj.highlightPaddingLeft = this._highlightPaddingLeft;\n        obj.highlightPaddingRight = this._highlightPaddingRight;\n        obj.letterSpacing = this._letterSpacing;\n        obj.textIndent = this._textIndent;\n        obj.cutSx = this._cutSx;\n        obj.cutEx = this._cutEx;\n        obj.cutSy = this._cutSy;\n        obj.cutEy = this._cutEy;\n        obj.advancedRenderer = this._advancedRenderer;\n        return obj;\n    }\n\n\n}\n\n// Because there are so many properties, we prefer to use the prototype for default values.\n// This causes a decrease in performance, but also a decrease in memory usage.\nlet proto = TextTexture.prototype;\nproto._text = \"\";\nproto._w = 0;\nproto._h = 0;\nproto._fontStyle = \"normal\";\nproto._fontSize = 40;\nproto._fontFace = null;\nproto._wordWrap = true;\nproto._wordWrapWidth = 0;\nproto._wordBreak = false;\nproto._textOverflow = \"\";\nproto._lineHeight = null;\nproto._textBaseline = \"alphabetic\";\nproto._textAlign = \"left\";\nproto._verticalAlign = \"top\";\nproto._offsetY = null;\nproto._maxLines = 0;\nproto._maxLinesSuffix = \"..\";\nproto._textColor = 0xFFFFFFFF;\nproto._paddingLeft = 0;\nproto._paddingRight = 0;\nproto._shadow = false;\nproto._shadowColor = 0xFF000000;\nproto._shadowOffsetX = 0;\nproto._shadowOffsetY = 0;\nproto._shadowBlur = 5;\nproto._highlight = false;\nproto._highlightHeight = 0;\nproto._highlightColor = 0xFF000000;\nproto._highlightOffset = 0;\nproto._highlightPaddingLeft = 0;\nproto._highlightPaddingRight = 0;\nproto._letterSpacing = 0;\nproto._textIndent = 0;\nproto._cutSx = 0;\nproto._cutEx = 0;\nproto._cutSy = 0;\nproto._cutEy = 0;\nproto._advancedRenderer = false;\nproto._fontBaselineRatio = 0;\n\n\nimport TextTextureRenderer from \"./TextTextureRenderer.mjs\";\nimport TextTextureRendererAdvanced from \"./TextTextureRendererAdvanced.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class SourceTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._textureSource = undefined;\n    }\n\n    get textureSource() {\n        return this._textureSource;\n    }\n\n    set textureSource(v) {\n        if (v !== this._textureSource) {\n            if (v.isResultTexture) {\n                // In case of a result texture, automatically inherit the precision.\n                this._precision = this.stage.getRenderPrecision();\n            }\n            this._textureSource = v;\n            this._changed();\n        }\n    }\n\n    _getTextureSource() {\n        return this._textureSource;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\n\nexport default class Transition extends EventEmitter {\n\n    constructor(manager, settings, element, property) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._getter = element.constructor.getGetter(property);\n        this._setter = element.constructor.getSetter(property);\n\n        this._merger = settings.merger;\n\n        if (!this._merger) {\n            this._merger = element.constructor.getMerger(property);\n        }\n\n        this._startValue = this._getter(this._element);\n        this._targetValue = this._startValue;\n\n        this._p = 1;\n        this._delayLeft = 0;\n    }\n\n    start(targetValue) {\n        this._startValue = this._getter(this._element);\n\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            if (targetValue === this._startValue) {\n                this.reset(targetValue, 1);\n            } else {\n                this._targetValue = targetValue;\n                this._p = 0;\n                this._delayLeft = this._settings.delay;\n                this.emit('start');\n                this.add();\n            }\n        }\n    }\n\n    finish() {\n        if (this._p < 1) {\n            // Value setting and will must be invoked (async) upon next transition cycle.\n            this._p = 1;\n        }\n    }\n\n    stop() {\n        // Just stop where the transition is at.\n        this.emit('stop');\n        this.manager.removeActive(this);\n    }\n\n    pause() {\n        this.stop();\n    }\n\n    play() {\n        this.manager.addActive(this);\n    }\n\n    reset(targetValue, p) {\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = p;\n            this.add();\n        }\n    }\n\n    _updateDrawValue() {\n        this._setter(this._element, this.getDrawValue());\n    }\n\n    add() {\n        this.manager.addActive(this);\n    }\n\n    isAttached() {\n        return this._element.attached;\n    }\n\n    isRunning() {\n        return (this._p < 1.0);\n    }\n\n    progress(dt) {\n        if (!this.isAttached()) {\n            // Skip to end of transition so that it is removed.\n            this._p = 1;\n        }\n\n        if (this.p < 1) {\n            if (this.delayLeft > 0) {\n                this._delayLeft -= dt;\n\n                if (this.delayLeft < 0) {\n                    dt = -this.delayLeft;\n                    this._delayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n\n            if (this._settings.duration == 0) {\n                this._p = 1;\n            } else {\n                this._p += dt / this._settings.duration;\n            }\n            if (this._p >= 1) {\n                // Finished!;\n                this._p = 1;\n            }\n        }\n\n        this._updateDrawValue();\n\n        this.invokeListeners();\n    }\n\n    invokeListeners() {\n        this.emit('progress', this.p);\n        if (this.p === 1) {\n            this.emit('finish');\n        }\n    }\n\n    updateTargetValue(targetValue) {\n        let t = this._settings.timingFunctionImpl(this.p);\n        if (t === 1) {\n            this._targetValue = targetValue;\n        } else if (t === 0) {\n            this._startValue = this._targetValue;\n            this._targetValue = targetValue;\n        } else {\n            this._startValue = targetValue - ((targetValue - this._targetValue) / (1 - t));\n            this._targetValue = targetValue;\n        }\n    }\n\n    getDrawValue() {\n        if (this.p >= 1) {\n            return this.targetValue;\n        } else {\n            let v = this._settings._timingFunctionImpl(this.p);\n            return this._merger(this.targetValue, this.startValue, v);\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n    }\n\n    get startValue() {\n        return this._startValue;\n    }\n\n    get targetValue() {\n        return this._targetValue;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n    set settings(v) {\n        this._settings = v;\n    }\n\n}\n\nTransition.prototype.isTransition = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages a list of objects.\n * Objects may be patched. Then, they can be referenced using the 'ref' (string) property.\n */\nexport default class ObjectList {\n\n    constructor() {\n        this._items = [];\n        this._refs = {}\n    }\n\n    get() {\n        return this._items;\n    }\n\n    get first() {\n        return this._items[0];\n    }\n\n    get last() {\n        return this._items.length ? this._items[this._items.length - 1] : undefined;\n    }\n\n    add(item) {\n        this.addAt(item, this._items.length);\n    }\n\n    addAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex === index) {\n                return item;\n            }\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            if (currentIndex != -1) {\n                this.setAt(item, index);\n            } else {\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n                this._items.splice(index, 0, item);\n                this.onAdd(item, index);\n            }\n        } else {\n            throw new Error('addAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    replaceByRef(item) {\n        if (item.ref) {\n            const existingItem = this.getByRef(item.ref);\n            if (!existingItem) {\n                throw new Error('replaceByRef: no item found with reference: ' + item.ref);\n            }\n            this.replace(item, existingItem);\n        } else {\n            throw new Error('replaceByRef: no ref specified in item');\n        }\n        this.addAt(item, this._items.length);\n\n    }\n\n    replace(item, prevItem) {\n        const index = this.getIndex(prevItem);\n        if (index === -1) {\n            throw new Error('replace: The previous item does not exist');\n        }\n        this.setAt(item, index);\n    }\n\n    setAt(item, index) {\n        if (index >= 0 && index < this._items.length) {\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex != -1) {\n                if (currentIndex !== index) {\n                    const fromIndex = currentIndex;\n                    if (fromIndex !== index) {\n                        this._items.splice(fromIndex, 1);\n                        this._items.splice(index, 0, item);\n                        this.onMove(item, fromIndex, index);\n                    }\n                }\n            } else {\n                if (index < this._items.length) {\n                    if (this._items[index].ref) {\n                        this._refs[this._items[index].ref] = undefined;\n                    }\n                }\n\n                const prevItem = this._items[index];\n\n                // Doesn't exist yet: overwrite current.\n                this._items[index] = item;\n\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n\n                this.onSet(item, index, prevItem);\n            }\n        } else {\n            throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    getAt(index) {\n        return this._items[index];\n    }\n\n    getIndex(item) {\n        return this._items.indexOf(item);\n    }\n\n    remove(item) {\n        let index = this._items.indexOf(item);\n\n        if (index !== -1) {\n            this.removeAt(index);\n        }\n    };\n\n    removeAt(index) {\n        if (index >= 0 && index < this._items.length) {\n            const item = this._items[index];\n\n            if (item.ref) {\n                this._refs[item.ref] = undefined;\n            }\n\n            this._items.splice(index, 1);\n\n            this.onRemove(item, index);\n\n            return item;\n        } else {\n            throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);\n        }\n    };\n\n    clear() {\n        let n = this._items.length;\n        if (n) {\n            let prev = this._items;\n            this._items = [];\n            this._refs = {}\n            this.onSync(prev, [], []);\n        }\n    };\n\n    a(o) {\n        if (Utils.isObjectLiteral(o)) {\n            let c = this.createItem(o);\n            c.patch(o);\n            this.add(c);\n            return c;\n        } else if (Array.isArray(o)) {\n            for (let i = 0, n = o.length; i < n; i++) {\n                this.a(o[i]);\n            }\n            return null;\n        } else if (this.isItem(o)) {\n            this.add(o);\n            return o;\n        }\n    };\n\n    get length() {\n        return this._items.length;\n    }\n\n    _getRefs() {\n        return this._refs;\n    }\n\n    getByRef(ref) {\n        return this._refs[ref];\n    }\n\n    clearRef(ref) {\n        delete this._refs[ref];\n    }\n\n    setRef(ref, child) {\n        this._refs[ref] = child;\n    }\n\n    patch(settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            this._setByObject(settings);\n        } else if (Array.isArray(settings)) {\n            this._setByArray(settings);\n        }\n    }\n\n    _setByObject(settings) {\n        // Overrule settings of known referenced items.\n        let refs = this._getRefs();\n        let crefs = Object.keys(settings);\n        for (let i = 0, n = crefs.length; i < n; i++) {\n            let cref = crefs[i];\n            let s = settings[cref];\n\n            let c = refs[cref];\n            if (!c) {\n                if (this.isItem(s)) {\n                    // Replace previous item;\n                    s.ref = cref;\n                    this.add(s);\n                } else {\n                    // Create new item.\n                    c = this.createItem(s);\n                    c.ref = cref;\n                    c.patch(s);\n                    this.add(c);\n                }\n            } else {\n                if (this.isItem(s)) {\n                    if (c !== s) {\n                        // Replace previous item;\n                        let idx = this.getIndex(c);\n                        s.ref = cref;\n                        this.setAt(s, idx);\n                    }\n                } else {\n                    c.patch(s);\n                }\n            }\n        }\n    }\n\n    _equalsArray(array) {\n        let same = true;\n        if (array.length === this._items.length) {\n            for (let i = 0, n = this._items.length; (i < n) && same; i++) {\n                same = same && (this._items[i] === array[i]);\n            }\n        } else {\n            same = false;\n        }\n        return same;\n    }\n\n    _setByArray(array) {\n        // For performance reasons, first check if the arrays match exactly and bail out if they do.\n        if (this._equalsArray(array)) {\n            return;\n        }\n\n        for (let i = 0, n = this._items.length; i < n; i++) {\n            this._items[i].marker = true;\n        }\n\n        let refs;\n        let newItems = [];\n        for (let i = 0, n = array.length; i < n; i++) {\n            let s = array[i];\n            if (this.isItem(s)) {\n                s.marker = false;\n                newItems.push(s);\n            } else {\n                let cref = s.ref;\n                let c;\n                if (cref) {\n                    if (!refs) refs = this._getRefs();\n                    c = refs[cref];\n                }\n\n                if (!c) {\n                    // Create new item.\n                    c = this.createItem(s);\n                } else {\n                    c.marker = false;\n                }\n\n                if (Utils.isObjectLiteral(s)) {\n                    c.patch(s);\n                }\n\n                newItems.push(c);\n            }\n        }\n\n        this._setItems(newItems);\n    }\n\n    _setItems(newItems) {\n        let prevItems = this._items;\n        this._items = newItems;\n\n        // Remove the items.\n        let removed = prevItems.filter(item => {let m = item.marker; delete item.marker; return m});\n        let added = newItems.filter(item => (prevItems.indexOf(item) === -1));\n\n        if (removed.length || added.length) {\n            // Recalculate refs.\n            this._refs = {}\n            for (let i = 0, n = this._items.length; i < n; i++) {\n                let ref = this._items[i].ref;\n                if (ref) {\n                    this._refs[ref] = this._items[i];\n                }\n            }\n        }\n\n        this.onSync(removed, added, newItems);\n    }\n\n    sort(f) {\n        const items = this._items.slice();\n        items.sort(f);\n        this._setByArray(items);\n    }\n\n    onAdd(item, index) {\n    }\n\n    onRemove(item, index) {\n    }\n\n    onSync(removed, added, order) {\n    }\n\n    onSet(item, index, prevItem) {\n    }\n\n    onMove(item, fromIndex, toIndex) {\n    }\n\n    createItem(object) {\n        throw new Error(\"ObjectList.createItem must create and return a new object\");\n    }\n\n    isItem(object) {\n        return false;\n    }\n\n    forEach(f) {\n        this.get().forEach(f);\n    }\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"./ObjectList.mjs\";\n\nexport default class ElementChildList extends ObjectList {\n\n    constructor(element) {\n        super();\n        this._element = element;\n    }\n\n    _connectParent(item) {\n        const prevParent = item.parent;\n        if (prevParent && prevParent !== this._element) {\n            // Cleanup in previous child list, without\n            const prevChildList = item.parent.childList;\n            const index = prevChildList.getIndex(item);\n\n            if (item.ref) {\n                prevChildList._refs[item.ref] = undefined;\n            }\n            prevChildList._items.splice(index, 1);\n\n            // Also clean up element core.\n            prevParent.core.removeChildAt(index);\n\n        }\n\n        item._setParent(this._element);\n\n        // We are expecting the caller to sync it to the core.\n    }\n\n    onAdd(item, index) {\n        this._connectParent(item);\n        this._element.core.addChildAt(index, item.core);\n    }\n\n    onRemove(item, index) {\n        item._setParent(null);\n        this._element.core.removeChildAt(index);\n    }\n\n    onSync(removed, added, order) {\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i]._setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            this._connectParent(added[i]);\n        }\n        let gc = i => i.core;\n        this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));\n    }\n\n    onSet(item, index, prevItem) {\n        prevItem._setParent(null);\n\n        this._connectParent(item);\n        this._element.core.setChildAt(index, item.core);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._element.core.moveChild(fromIndex, toIndex);\n    }\n\n    createItem(object) {\n        if (object.type) {\n            return new object.type(this._element.stage);\n        } else {\n            return this._element.stage.createElement();\n        }\n    }\n\n    isItem(object) {\n        return object.isElement;\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Render tree node.\n */\n\nimport StageUtils from \"./StageUtils.mjs\";\nimport ElementCore from \"./core/ElementCore.mjs\";\nimport Base from \"./Base.mjs\";\n\nimport Utils from \"./Utils.mjs\";\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Element {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.__id = Element.id++;\n\n        this.__start();\n\n        // EventEmitter constructor.\n        this._hasEventListeners = false;\n\n        this.__core = new ElementCore(this);\n\n        /**\n         * A reference that can be used while merging trees.\n         * @type {string}\n         */\n        this.__ref = null;\n\n        /**\n         * An element is attached if it is a descendant of the stage root.\n         * @type {boolean}\n         */\n        this.__attached = false;\n\n        /**\n         * An element is enabled when it is attached and it is visible (worldAlpha > 0).\n         * @type {boolean}\n         */\n        this.__enabled = false;\n\n        /**\n         * An element is active when it is enabled and it is within bounds.\n         * @type {boolean}\n         */\n        this.__active = false;\n\n        /**\n         * @type {Element}\n         */\n        this.__parent = null;\n\n        /**\n         * The texture that is currently set.\n         * @type {Texture}\n         */\n        this.__texture = null;\n\n        /**\n         * The currently displayed texture. While this.texture is loading, this one may be different.\n         * @type {Texture}\n         */\n        this.__displayedTexture = null;\n\n        /**\n         * Tags that can be used to identify/search for a specific element.\n         * @type {String[]}\n         */\n        this.__tags = null;\n\n        /**\n         * The tree's tags mapping.\n         * This contains all elements for all known tags, at all times.\n         * @type {Map}\n         */\n        this.__treeTags = null;\n\n        /**\n         * Creates a tag context: tagged elements in this branch will not be reachable from ancestors of this elements.\n         * @type {boolean}\n         */\n        this.__tagRoot = false;\n\n        /**\n         * (Lazy-initialised) list of children owned by this elements.\n         * @type {ElementChildList}\n         */\n        this.__childList = null;\n\n        this._w = 0;\n\n        this._h = 0;\n    }\n\n    __start() {\n    }\n\n    get id() {\n        return this.__id;\n    }\n\n    set ref(ref) {\n        if (this.__ref !== ref) {\n            const charcode = ref.charCodeAt(0);\n            if (!Utils.isUcChar(charcode)) {\n                this._throwError(\"Ref must start with an upper case character: \" + ref);\n            }\n            if (this.__ref !== null) {\n                this.removeTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.clearRef(this.__ref);\n                }\n            }\n\n            this.__ref = ref;\n\n            if (this.__ref) {\n                this._addTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.setRef(this.__ref, this);\n                }\n            }\n        }\n    }\n\n    get ref() {\n        return this.__ref;\n    }\n\n    get core() {\n        return this.__core;\n    }\n\n    setAsRoot() {\n        this.__core.setAsRoot();\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n    }\n\n    get isRoot() {\n        return this.__core.isRoot;\n    }\n\n    _setParent(parent) {\n        if (this.__parent === parent) return;\n\n        if (this.__parent) {\n            this._unsetTagsParent();\n        }\n\n        this.__parent = parent;\n\n        if (parent) {\n            this._setTagsParent();\n        }\n\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n        this._updateCollision();\n\n        if (this.isRoot && parent) {\n            this._throwError(\"Root should not be added as a child! Results are unspecified!\");\n        }\n    };\n\n    getDepth() {\n        let depth = 0;\n\n        let p = this.__parent;\n        while(p) {\n            depth++;\n            p = p.__parent;\n        }\n\n        return depth;\n    };\n\n    getAncestor(l) {\n        let p = this;\n        while (l > 0 && p.__parent) {\n            p = p.__parent;\n            l--;\n        }\n        return p;\n    };\n\n    getAncestors() {\n        const a = [];\n        let p = this;\n        while (p) {\n            a.push(p);\n            p = p.__parent;\n        }\n        return a;\n    }\n\n    getAncestorAtDepth(depth) {\n        let levels = this.getDepth() - depth;\n        if (levels < 0) {\n            return null;\n        }\n        return this.getAncestor(levels);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while(p = p.parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getSharedAncestor(c) {\n        let o1 = this;\n        let o2 = c;\n        let l1 = o1.getDepth();\n        let l2 = o2.getDepth();\n        if (l1 > l2) {\n            o1 = o1.getAncestor(l1 - l2);\n        } else if (l2 > l1) {\n            o2 = o2.getAncestor(l2 - l1);\n        }\n\n        do {\n            if (o1 === o2) {\n                return o1;\n            }\n\n            o1 = o1.__parent;\n            o2 = o2.__parent;\n        } while (o1 && o2);\n\n        return null;\n    };\n\n    get attached() {\n        return this.__attached;\n    }\n\n    get enabled() {\n        return this.__enabled;\n    }\n\n    get active() {\n        return this.__active;\n    }\n\n    _isAttached() {\n        return (this.__parent ? this.__parent.__attached : (this.stage.root === this));\n    };\n\n    _isEnabled() {\n        return this.__core.visible && (this.__core.alpha > 0) && (this.__parent ? this.__parent.__enabled : (this.stage.root === this));\n    };\n\n    _isActive() {\n        return this._isEnabled() && this.withinBoundsMargin;\n    };\n\n    /**\n     * Updates the 'attached' flag for this branch.\n     */\n    _updateAttachedFlag() {\n        let newAttached = this._isAttached();\n        if (this.__attached !== newAttached) {\n            this.__attached = newAttached;\n\n            if (newAttached) {\n                this._onSetup();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateAttachedFlag();\n                    }\n                }\n            }\n\n            if (newAttached) {\n                this._onAttach();\n            } else {\n                this._onDetach();\n            }\n        }\n    };\n\n    /**\n     * Updates the 'enabled' flag for this branch.\n     */\n    _updateEnabledFlag() {\n        let newEnabled = this._isEnabled();\n        if (this.__enabled !== newEnabled) {\n            if (newEnabled) {\n                this._onEnabled();\n                this._setEnabledFlag();\n            } else {\n                this._onDisabled();\n                this._unsetEnabledFlag();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateEnabledFlag();\n                    }\n                }\n            }\n        }\n    };\n\n    _setEnabledFlag() {\n        this.__enabled = true;\n\n        // Force re-check of texture because dimensions might have changed (cutting).\n        this._updateDimensions();\n        this._updateTextureCoords();\n\n        if (this.__texture) {\n            this.__texture.addElement(this);\n        }\n\n        if (this.withinBoundsMargin) {\n            this._setActiveFlag();\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.addElement(this.__core);\n        }\n\n    }\n\n    _unsetEnabledFlag() {\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n\n        if (this.__texture) {\n            this.__texture.removeElement(this);\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.removeElement(this.__core);\n        }\n\n        if (this._texturizer) {\n            this.texturizer.filters.forEach(filter => filter.removeElement(this.__core));\n        }\n\n        this.__enabled = false;\n    }\n\n    _setActiveFlag() {\n        this.__active = true;\n\n        // This must happen before enabling the texture, because it may already be loaded or load directly.\n        if (this.__texture) {\n            this.__texture.incActiveCount();\n        }\n\n        if (this.__texture) {\n            this._enableTexture();\n        }\n        this._onActive();\n    }\n\n    _unsetActiveFlag() {\n        if (this.__texture) {\n            this.__texture.decActiveCount();\n        }\n\n        this.__active = false;\n        if (this.__texture) {\n            this._disableTexture();\n        }\n\n        if (this._hasTexturizer()) {\n            this.texturizer.deactivate();\n        }\n\n        this._onInactive();\n    }\n\n    _onSetup() {\n    }\n\n    _onAttach() {\n    }\n\n    _onDetach() {\n    }\n\n    _onEnabled() {\n    }\n\n    _onDisabled() {\n    }\n\n    _onActive() {\n    }\n\n    _onInactive() {\n    }\n\n    _onResize() {\n    }\n\n    _getRenderWidth() {\n        if (this._w) {\n            return this._w;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderWidth();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderWidth();\n        } else {\n            return 0;\n        }\n    };\n\n    _getRenderHeight() {\n        if (this._h) {\n            return this._h;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderHeight();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderHeight();\n        } else {\n            return 0;\n        }\n    };\n\n    get renderWidth() {\n        if (this.__enabled) {\n            // Render width is only maintained if this element is enabled.\n            return this.__core.getRenderWidth();\n        } else {\n            return this._getRenderWidth();\n        }\n    }\n\n    get renderHeight() {\n        if (this.__enabled) {\n            return this.__core.getRenderHeight();\n        } else {\n            return this._getRenderHeight();\n        }\n    }\n\n    get finalX() {\n        return this.__core.x;\n    }\n\n    get finalY() {\n        return this.__core.y;\n    }\n\n    get finalW() {\n        return this.__core.w;\n    }\n\n    get finalH() {\n        return this.__core.h;\n    }\n\n    textureIsLoaded() {\n        return this.__texture && this.__texture.isLoaded();\n    }\n\n    loadTexture() {\n        if (this.__texture) {\n            this.__texture.load();\n\n            if (!this.__texture.isUsed() || !this._isEnabled()) {\n                // Loading the texture will have no effect on the dimensions of this element.\n                // Manually update them, so that calcs can be performed immediately in userland.\n                this._updateDimensions();\n            }\n        }\n    }\n\n    _enableTextureError() {\n        // txError event should automatically be re-triggered when a element becomes active.\n        const loadError = this.__texture.loadError;\n        if (loadError) {\n            this.emit('txError', loadError, this.__texture._source);\n        }\n    }\n\n    _enableTexture() {\n        if (this.__texture.isLoaded()) {\n            this._setDisplayedTexture(this.__texture);\n        } else {\n            // We don't want to retain the old 'ghost' image as it wasn't visible anyway.\n            this._setDisplayedTexture(null);\n\n            this._enableTextureError();\n        }\n    }\n\n    _disableTexture() {\n        // We disable the displayed texture because, when the texture changes while invisible, we should use that w, h,\n        // mw, mh for checking within bounds.\n        this._setDisplayedTexture(null);\n    }\n\n    get texture() {\n        return this.__texture;\n    }\n\n    set texture(v) {\n        let texture;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                texture = new v.type(this.stage);\n            } else {\n                texture = this.texture;\n            }\n\n            if (texture) {\n                Base.patchObject(texture, v);\n            }\n        } else if (!v) {\n            texture = null;\n        } else {\n            if (v.isTexture) {\n                texture = v;\n            } else if (v.isTextureSource) {\n                texture = new SourceTexture(this.stage);\n                texture.textureSource = v;\n            } else {\n                console.error(\"[Lightning] Please specify a texture type.\");\n                return;\n            }\n        }\n\n        const prevTexture = this.__texture;\n        if (texture !== prevTexture) {\n            this.__texture = texture;\n\n            if (this.__texture) {\n                if (this.__enabled) {\n                    this.__texture.addElement(this);\n\n                    if (this.withinBoundsMargin) {\n                        if (this.__texture.isLoaded()) {\n                            this._setDisplayedTexture(this.__texture);\n                        } else {\n                            this._enableTextureError();\n                        }\n                    }\n                }\n            } else {\n                // Make sure that current texture is cleared when the texture is explicitly set to null.\n                this._setDisplayedTexture(null);\n            }\n\n            if (prevTexture && prevTexture !== this.__displayedTexture) {\n                prevTexture.removeElement(this);\n            }\n\n            this._updateDimensions();\n        }\n    }\n\n    get displayedTexture() {\n        return this.__displayedTexture;\n    }\n\n    _setDisplayedTexture(v) {\n        let prevTexture = this.__displayedTexture;\n\n        if (prevTexture && (v !== prevTexture)) {\n            if (this.__texture !== prevTexture) {\n                // The old displayed texture is deprecated.\n                prevTexture.removeElement(this);\n            }\n        }\n\n        const prevSource = this.__core.displayedTextureSource ? this.__core.displayedTextureSource._source : null;\n        const sourceChanged = (v ? v._source : null) !== prevSource;\n\n        this.__displayedTexture = v;\n        this._updateDimensions();\n\n        if (this.__displayedTexture) {\n            if (sourceChanged) {\n                // We don't need to reference the displayed texture because it was already referenced (this.texture === this.displayedTexture).\n                this._updateTextureCoords();\n                this.__core.setDisplayedTextureSource(this.__displayedTexture._source);\n            }\n        } else {\n            this.__core.setDisplayedTextureSource(null);\n        }\n\n        if (sourceChanged) {\n            if (this.__displayedTexture) {\n                this.emit('txLoaded', this.__displayedTexture);\n            } else {\n                this.emit('txUnloaded', this.__displayedTexture);\n            }\n        }\n    }\n\n    onTextureSourceLoaded() {\n        // This function is called when element is enabled, but we only want to set displayed texture for active elements.\n        if (this.active) {\n            // We may be dealing with a texture reloading, so we must force update.\n            this._setDisplayedTexture(this.__texture);\n        }\n    };\n\n    onTextureSourceLoadError(e) {\n        this.emit('txError', e, this.__texture._source);\n    };\n\n    forceRenderUpdate() {\n        this.__core.setHasRenderUpdates(3);\n    }\n\n    onDisplayedTextureClippingChanged() {\n        this._updateDimensions();\n        this._updateTextureCoords();\n    };\n\n    onPrecisionChanged() {\n        this._updateDimensions();\n    };\n\n    onDimensionsChanged(w, h) {\n        if (this.texture instanceof TextTexture) {\n            this.texture.w = w;\n            this.texture.h = h;\n            this.w = w;\n            this.h = h;\n        }\n    }\n\n    _updateDimensions() {\n        let w = this._getRenderWidth();\n        let h = this._getRenderHeight();\n\n        let unknownSize = false;\n        if (!w || !h) {\n            if (!this.__displayedTexture && this.__texture) {\n                // We use a 'max width' replacement instead in the ElementCore calcs.\n                // This makes sure that it is able to determine withinBounds.\n                w = w || this.__texture.mw;\n                h = h || this.__texture.mh;\n\n                if ((!w || !h) && this.__texture.isAutosizeTexture()) {\n                    unknownSize = true;\n                }\n            }\n        }\n\n        if (this.__core.setDimensions(w, h, unknownSize)) {\n            this._onResize();\n        }\n    }\n\n    _updateTextureCoords() {\n        if (this.displayedTexture && this.displayedTexture._source) {\n            let displayedTexture = this.displayedTexture;\n            let displayedTextureSource = this.displayedTexture._source;\n\n            let tx1 = 0, ty1 = 0, tx2 = 1.0, ty2 = 1.0;\n            if (displayedTexture.clipping) {\n                // Apply texture clipping.\n                let w = displayedTextureSource.getRenderWidth();\n                let h = displayedTextureSource.getRenderHeight();\n                let iw, ih, rw, rh;\n                iw = 1 / w;\n                ih = 1 / h;\n\n                if (displayedTexture.pw) {\n                    rw = (displayedTexture.pw) * iw;\n                } else {\n                    rw = (w - displayedTexture.px) * iw;\n                }\n\n                if (displayedTexture.ph) {\n                    rh = displayedTexture.ph * ih;\n                } else {\n                    rh = (h - displayedTexture.py) * ih;\n                }\n\n                iw *= (displayedTexture.px);\n                ih *= (displayedTexture.py);\n\n                tx1 = iw;\n                ty1 = ih;\n                tx2 = tx2 * rw + iw;\n                ty2 = ty2 * rh + ih;\n\n                tx1 = Math.max(0, tx1);\n                ty1 = Math.max(0, ty1);\n                tx2 = Math.min(1, tx2);\n                ty2 = Math.min(1, ty2);\n            }\n\n            if (displayedTextureSource._flipTextureY) {\n                let tempty = ty2;\n                ty2 = ty1;\n                ty1 = tempty;\n            }\n            this.__core.setTextureCoords(tx1, ty1, tx2, ty2);\n        }\n    }\n\n    getCornerPoints() {\n        return this.__core.getCornerPoints();\n    }\n\n    _unsetTagsParent() {\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                // Remove from treeTags.\n                let p = this;\n                while (p = p.__parent) {\n                    let parentTreeTags = p.__treeTags.get(tag);\n                    parentTreeTags.delete(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        let tags = null;\n        let n = 0;\n        if (this.__treeTags) {\n            if (!this.__tagRoot) {\n                tags = Utils.iteratorToArray(this.__treeTags.keys());\n                n = tags.length;\n\n                if (n > 0) {\n                    for (let i = 0; i < n; i++) {\n                        let tagSet = this.__treeTags.get(tags[i]);\n\n                        // Remove from treeTags.\n                        let p = this;\n                        while ((p = p.__parent)) {\n                            let parentTreeTags = p.__treeTags.get(tags[i]);\n\n                            tagSet.forEach(function (comp) {\n                                parentTreeTags.delete(comp);\n                            });\n\n                            if (p.__tagRoot) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    _setTagsParent() {\n        // Just copy over the 'local' tags.\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                let p = this;\n                while (p = p.__parent) {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        if (this.__treeTags && this.__treeTags.size) {\n            if (!this.__tagRoot) {\n                this.__treeTags.forEach((tagSet, tag) => {\n                    let p = this;\n                    while (!p.__tagRoot && (p = p.__parent)) {\n                        if (p.__tagRoot) {\n                            // Do not copy all subs.\n                        }\n                        if (!p.__treeTags) {\n                            p.__treeTags = new Map();\n                        }\n\n                        let s = p.__treeTags.get(tag);\n                        if (!s) {\n                            s = new Set();\n                            p.__treeTags.set(tag, s);\n                        }\n\n                        tagSet.forEach(function (comp) {\n                            s.add(comp);\n                        });\n                    }\n                });\n            }\n        }\n    };\n\n\n    _getByTag(tag) {\n        if (!this.__treeTags) {\n            return [];\n        }\n        let t = this.__treeTags.get(tag);\n        return t ? Utils.setToArray(t) : [];\n    };\n\n    getTags() {\n        return this.__tags ? this.__tags : [];\n    };\n\n    setTags(tags) {\n        tags = tags.reduce((acc, tag) => {\n            return acc.concat(tag.split(' '));\n        }, []);\n\n        if (this.__ref) {\n            tags.push(this.__ref);\n        }\n\n        let i, n = tags.length;\n        let removes = [];\n        let adds = [];\n        for (i = 0; i < n; i++) {\n            if (!this.hasTag(tags[i])) {\n                adds.push(tags[i]);\n            }\n        }\n\n        let currentTags = this.tags || [];\n        n = currentTags.length;\n        for (i = 0; i < n; i++) {\n            if (tags.indexOf(currentTags[i]) == -1) {\n                removes.push(currentTags[i]);\n            }\n        }\n\n        for (i = 0; i < removes.length; i++) {\n            this.removeTag(removes[i]);\n        }\n\n        for (i = 0; i < adds.length; i++) {\n            this.addTag(adds[i]);\n        }\n    }\n\n    addTag(tag) {\n        if (tag.indexOf(' ') === -1) {\n            if (Utils.isUcChar(tag.charCodeAt(0))) {\n                this._throwError(\"Tag may not start with an upper case character.\");\n            }\n\n            this._addTag(tag);\n        } else {\n            const tags = tag.split(' ');\n            for (let i = 0, m = tags.length; i < m; i++) {\n                const tag = tags[i];\n\n                if (Utils.isUcChar(tag.charCodeAt(0))) {\n                    this._throwError(\"Tag may not start with an upper case character.\");\n                }\n\n                this._addTag(tag);\n            }\n        }\n    }\n\n    _addTag(tag) {\n        if (!this.__tags) {\n            this.__tags = [];\n        }\n        if (this.__tags.indexOf(tag) === -1) {\n            this.__tags.push(tag);\n\n            // Add to treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    removeTag(tag) {\n        let i = this.__tags.indexOf(tag);\n        if (i !== -1) {\n            this.__tags.splice(i, 1);\n\n            // Remove from treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    let list = p.__treeTags.get(tag);\n                    if (list) {\n                        list.delete(this);\n                    }\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    hasTag(tag) {\n        return (this.__tags && (this.__tags.indexOf(tag) !== -1));\n    }\n\n    /**\n     * Returns one of the elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element}\n     */\n    _tag(tag) {\n        if (tag.indexOf(\".\") !== -1) {\n            return this.mtag(tag)[0];\n        } else {\n            if (this.__treeTags) {\n                let t = this.__treeTags.get(tag);\n                if (t) {\n                    const item = t.values().next();\n                    return item ? item.value : undefined;\n                }\n            }\n        }\n    };\n\n    get tag() {\n        return this._tag;\n    }\n\n    set tag(t) {\n        this.tags = t;\n    }\n\n    /**\n     * Returns all elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element[]}\n     */\n    mtag(tag) {\n        let idx = tag.indexOf(\".\");\n        if (idx >= 0) {\n            let parts = tag.split('.');\n            let res = this._getByTag(parts[0]);\n            let level = 1;\n            let c = parts.length;\n            while (res.length && level < c) {\n                let resn = [];\n                for (let j = 0, n = res.length; j < n; j++) {\n                    resn = resn.concat(res[j]._getByTag(parts[level]));\n                }\n\n                res = resn;\n                level++;\n            }\n            return res;\n        } else {\n            return this._getByTag(tag);\n        }\n    };\n\n    stag(tag, settings) {\n        let t = this.mtag(tag);\n        let n = t.length;\n        for (let i = 0; i < n; i++) {\n            Base.patchObject(t[i], settings);\n        }\n    }\n\n    get tagRoot() {\n        return this.__tagRoot;\n    }\n\n    set tagRoot(v) {\n        if (this.__tagRoot !== v) {\n            if (!v) {\n                this._setTagsParent();\n            } else {\n                this._unsetTagsParent();\n            }\n\n            this.__tagRoot = v;\n        }\n    }\n\n    sel(path) {\n        const results = this.select(path);\n        if (results.length) {\n            return results[0];\n        } else {\n            return undefined;\n        }\n    }\n\n    select(path) {\n        if (path.indexOf(\",\") !== -1) {\n            let selectors = path.split(',');\n            let res = [];\n            for (let i = 0; i < selectors.length; i++) {\n                res = res.concat(this._select(selectors[i]));\n            }\n            return res;\n        } else {\n            return this._select(path);\n        }\n    }\n\n    _select(path) {\n        if (path === \"\") return [this];\n\n\n        let pointIdx = path.indexOf(\".\");\n        let arrowIdx = path.indexOf(\">\");\n        if (pointIdx === -1 && arrowIdx === -1) {\n            // Quick case.\n            return this.mtag(path);\n        }\n\n        // Detect by first char.\n        let isRef;\n        if (arrowIdx === 0) {\n            isRef = true;\n            path = path.substr(1);\n        } else if (pointIdx === 0) {\n            isRef = false;\n            path = path.substr(1);\n        } else {\n            isRef = false;\n        }\n\n        return this._selectChilds(path, isRef);\n    }\n\n    _selectChilds(path, isRef) {\n        const pointIdx = path.indexOf(\".\");\n        const arrowIdx = path.indexOf(\">\");\n\n        if (pointIdx === -1 && arrowIdx === -1) {\n            if (isRef) {\n                const ref = this.getByRef(path);\n                return ref ? [ref] : [];\n            } else {\n                return this.mtag(path);\n            }\n        }\n\n        if ((arrowIdx === -1) || (pointIdx !== -1 && pointIdx < arrowIdx)) {\n            let next;\n            const str = path.substr(0, pointIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(pointIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, false));\n            }\n            return total;\n        } else {\n            let next;\n            const str = path.substr(0, arrowIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(arrowIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, true));\n            }\n            return total;\n        }\n    }\n\n    getByRef(ref) {\n        return this.childList.getByRef(ref);\n    }\n\n    getLocationString() {\n        let i;\n        i = this.__parent ? this.__parent._children.getIndex(this) : \"R\";\n        let localTags = this.getTags();\n        let str = this.__parent ? this.__parent.getLocationString(): \"\";\n        if (this.ref) {\n            str += \":[\" + i + \"]\" + this.ref;\n        } else if (localTags.length) {\n            str += \":[\" + i + \"]\" + localTags.join(\",\");\n        } else {\n            str += \":[\" + i + \"]#\" + this.id;\n        }\n        return str;\n    }\n\n    toString() {\n        let obj = this.getSettings();\n        return Element.getPrettyString(obj, \"\");\n    };\n\n    static getPrettyString(obj, indent) {\n        let children = obj.children;\n        delete obj.children;\n\n\n        // Convert singular json settings object.\n        let colorKeys = [\"color\", \"colorUl\", \"colorUr\", \"colorBl\", \"colorBr\"];\n        let str = JSON.stringify(obj, function (k, v) {\n            if (colorKeys.indexOf(k) !== -1) {\n                return \"COLOR[\" + v.toString(16) + \"]\";\n            }\n            return v;\n        });\n        str = str.replace(/\"COLOR\\[([a-f0-9]{1,8})\\]\"/g, \"0x$1\");\n\n        if (children) {\n            let childStr = \"\";\n            if (Utils.isObjectLiteral(children)) {\n                let refs = Object.keys(children);\n                childStr = \"\";\n                for (let i = 0, n = refs.length; i < n; i++) {\n                    childStr += `\\n${indent}  \"${refs[i]}\":`\n                    delete children[refs[i]].ref;\n                    childStr += Element.getPrettyString(children[refs[i]], indent + \"  \") + (i < n - 1 ? \",\" : \"\");\n                }\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + childStr + \"\\n\" + indent + \"}\";\n            } else {\n                let n = children.length;\n                childStr = \"[\";\n                for (let i = 0; i < n; i++) {\n                    childStr += Element.getPrettyString(children[i], indent + \"  \") + (i < n - 1 ? \",\" : \"\") + \"\\n\";\n                }\n                childStr += indent + \"]}\";\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + \"\\\"children\\\":\\n\" + indent + childStr + \"}\";\n            }\n\n        }\n\n        return str;\n    }\n\n    getSettings() {\n        let settings = this.getNonDefaults();\n\n        let children = this._children.get();\n        if (children) {\n            let n = children.length;\n            if (n) {\n                const childArray = [];\n                let missing = false;\n                for (let i = 0; i < n; i++) {\n                    childArray.push(children[i].getSettings());\n                    missing = missing || !children[i].ref;\n                }\n\n                if (!missing) {\n                    settings.children = {}\n                    childArray.forEach(child => {\n                        settings.children[child.ref] = child;\n                    });\n                } else {\n                    settings.children = childArray;\n                }\n            }\n        }\n\n        settings.id = this.id;\n\n        return settings;\n    }\n\n    getNonDefaults() {\n        let settings = {};\n\n        if (this.constructor !== Element) {\n            settings.type = this.constructor.name;\n        }\n\n        if (this.__ref) {\n            settings.ref = this.__ref;\n        }\n\n        if (this.__tags && this.__tags.length) {\n            settings.tags = this.__tags;\n        }\n\n        if (this.x !== 0) settings.x = this.x;\n        if (this.y !== 0) settings.y = this.y;\n        if (this.w !== 0) settings.w = this.w;\n        if (this.h !== 0) settings.h = this.h;\n\n        if (this.scaleX === this.scaleY) {\n            if (this.scaleX !== 1) settings.scale = this.scaleX;\n        } else {\n            if (this.scaleX !== 1) settings.scaleX = this.scaleX;\n            if (this.scaleY !== 1) settings.scaleY = this.scaleY;\n        }\n\n        if (this.pivotX === this.pivotY) {\n            if (this.pivotX !== 0.5) settings.pivot = this.pivotX;\n        } else {\n            if (this.pivotX !== 0.5) settings.pivotX = this.pivotX;\n            if (this.pivotY !== 0.5) settings.pivotY = this.pivotY;\n        }\n\n        if (this.mountX === this.mountY) {\n            if (this.mountX !== 0) settings.mount = this.mountX;\n        } else {\n            if (this.mountX !== 0) settings.mountX = this.mountX;\n            if (this.mountY !== 0) settings.mountY = this.mountY;\n        }\n\n        if (this.alpha !== 1) settings.alpha = this.alpha;\n\n        if (!this.visible) settings.visible = false;\n\n        if (this.rotation !== 0) settings.rotation = this.rotation;\n\n        if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {\n            if (this.colorUl !== 0xFFFFFFFF) settings.color = this.colorUl.toString(16);\n        } else {\n            if (this.colorUl !== 0xFFFFFFFF) settings.colorUl = this.colorUl.toString(16);\n            if (this.colorUr !== 0xFFFFFFFF) settings.colorUr = this.colorUr.toString(16);\n            if (this.colorBl !== 0xFFFFFFFF) settings.colorBl = this.colorBl.toString(16);\n            if (this.colorBr !== 0xFFFFFFFF) settings.colorBr = this.colorBr.toString(16);\n        }\n\n        if (this.zIndex) settings.zIndex = this.zIndex;\n\n        if (this.forceZIndexContext) settings.forceZIndexContext = true;\n\n        if (this.clipping) settings.clipping = this.clipping;\n\n        if (!this.clipbox) settings.clipbox = this.clipbox;\n\n        if (this.__texture) {\n            let tnd = this.__texture.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.texture = tnd;\n            }\n        }\n\n        if (this.shader && Utils.isFunction(this.shader.getNonDefaults)) {\n            let tnd = this.shader.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.shader = tnd;\n            }\n        }\n\n        if (this._hasTexturizer()) {\n            if (this.texturizer.enabled) {\n                settings.renderToTexture = this.texturizer.enabled;\n            }\n            if (this.texturizer.lazy) {\n                settings.renderToTextureLazy = this.texturizer.lazy;\n            }\n            if (this.texturizer.colorize) {\n                settings.colorizeResultTexture = this.texturizer.colorize;\n            }\n            if (this.texturizer.renderOffscreen) {\n                settings.renderOffscreen = this.texturizer.renderOffscreen;\n            }\n        }\n\n        return settings;\n    };\n\n    static getGetter(propertyPath) {\n        let getter = Element.PROP_GETTERS.get(propertyPath);\n        if (!getter) {\n            getter = new Function('obj', 'return obj.' + propertyPath);\n            Element.PROP_GETTERS.set(propertyPath, getter);\n        }\n        return getter;\n    }\n\n    static getSetter(propertyPath) {\n        let setter = Element.PROP_SETTERS.get(propertyPath);\n        if (!setter) {\n            setter = new Function('obj', 'v', 'obj.' + propertyPath + ' = v');\n            Element.PROP_SETTERS.set(propertyPath, setter);\n        }\n        return setter;\n    }\n\n    get withinBoundsMargin() {\n        return this.__core._withinBoundsMargin;\n    }\n\n    _enableWithinBoundsMargin() {\n        // Iff enabled, this toggles the active flag.\n        if (this.__enabled) {\n            this._setActiveFlag();\n        }\n    }\n\n    _disableWithinBoundsMargin() {\n        // Iff active, this toggles the active flag.\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n    }\n\n    set boundsMargin(v) {\n        if (!Array.isArray(v) && v !== null) {\n            throw new Error(\"boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)\");\n        }\n        this.__core.boundsMargin = v;\n    }\n\n    get boundsMargin() {\n        return this.__core.boundsMargin;\n    }\n\n    get x() {\n        return this.__core.offsetX;\n    }\n\n    set x(v) {\n        this.__core.offsetX = v;\n    }\n\n    get y() {\n        return this.__core.offsetY;\n    }\n\n    set y(v) {\n        this.__core.offsetY = v;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (Utils.isFunction(v)) {\n            this._w = 0;\n            this.__core.funcW = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._w !== v) {\n                this.__core.disableFuncW();\n                this._w = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (Utils.isFunction(v)) {\n            this._h = 0;\n            this.__core.funcH = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._h !== v) {\n                this.__core.disableFuncH();\n                this._h = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get collision() {\n        return this._collision;\n    }\n\n    set collision(v) {\n        this._collision = v;\n    }\n\n    _updateCollision() {\n        if (this.collision && this.__parent && this.__parent.collision === undefined) {\n            /**\n             * Mark collision as 2 to indicate atleast one descendant has collision enabled.\n             * This narrows down the search for elements with active collision.\n            */\n            this.__parent.collision = 2;\n        }\n    }\n\n    get scaleX() {\n        return this.__core.scaleX;\n    }\n\n    set scaleX(v) {\n        this.__core.scaleX = v;\n    }\n\n    get scaleY() {\n        return this.__core.scaleY;\n    }\n\n    set scaleY(v) {\n        this.__core.scaleY = v;\n    }\n\n    get scale() {\n        return this.__core.scale;\n    }\n\n    set scale(v) {\n        this.__core.scale = v;\n    }\n\n    get pivotX() {\n        return this.__core.pivotX;\n    }\n\n    set pivotX(v) {\n        this.__core.pivotX = v;\n    }\n\n    get pivotY() {\n        return this.__core.pivotY;\n    }\n\n    set pivotY(v) {\n        this.__core.pivotY = v;\n    }\n\n    get pivot() {\n        return this.__core.pivot;\n    }\n\n    set pivot(v) {\n        this.__core.pivot = v;\n    }\n\n    get mountX() {\n        return this.__core.mountX;\n    }\n\n    set mountX(v) {\n        this.__core.mountX = v;\n    }\n\n    get mountY() {\n        return this.__core.mountY;\n    }\n\n    set mountY(v) {\n        this.__core.mountY = v;\n    }\n\n    get mount() {\n        return this.__core.mount;\n    }\n\n    set mount(v) {\n        this.__core.mount = v;\n    }\n\n    get rotation() {\n        return this.__core.rotation;\n    }\n\n    set rotation(v) {\n        this.__core.rotation = v;\n    }\n\n    get alpha() {\n        return this.__core.alpha;\n    }\n\n    set alpha(v) {\n        this.__core.alpha = v;\n    }\n\n    get visible() {\n        return this.__core.visible;\n    }\n\n    set visible(v) {\n        this.__core.visible = v;\n    }\n    \n    get colorUl() {\n        return this.__core.colorUl;\n    }\n\n    set colorUl(v) {\n        this.__core.colorUl = v;\n    }\n\n    get colorUr() {\n        return this.__core.colorUr;\n    }\n\n    set colorUr(v) {\n        this.__core.colorUr = v;\n    }\n\n    get colorBl() {\n        return this.__core.colorBl;\n    }\n\n    set colorBl(v) {\n        this.__core.colorBl = v;\n    }\n\n    get colorBr() {\n        return this.__core.colorBr;\n    }\n\n    set colorBr(v) {\n        this.__core.colorBr = v;\n    }\n\n    get color() {\n        return this.__core.colorUl;\n    }\n\n    set color(v) {\n        if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorTop() {\n        return this.colorUl;\n    }\n\n    set colorTop(v) {\n        if (this.colorUl !== v || this.colorUr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n        }\n    }\n\n    get colorBottom() {\n        return this.colorBl;\n    }\n\n    set colorBottom(v) {\n        if (this.colorBl !== v || this.colorBr !== v) {\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorLeft() {\n        return this.colorUl;\n    }\n\n    set colorLeft(v) {\n        if (this.colorUl !== v || this.colorBl !== v) {\n            this.colorUl = v;\n            this.colorBl = v;\n        }\n    }\n\n    get colorRight() {\n        return this.colorUr;\n    }\n\n    set colorRight(v) {\n        if (this.colorUr !== v || this.colorBr !== v) {\n            this.colorUr = v;\n            this.colorBr = v;\n        }\n    }\n\n    get zIndex() {return this.__core.zIndex}\n    set zIndex(v) {\n        this.__core.zIndex = v;\n    }\n\n    get forceZIndexContext() {return this.__core.forceZIndexContext}\n    set forceZIndexContext(v) {\n        this.__core.forceZIndexContext = v;\n    }\n\n    get clipping() {return this.__core.clipping}\n    set clipping(v) {\n        this.__core.clipping = v;\n    }\n\n    get clipbox() {return this.__core.clipbox}\n    set clipbox(v) {\n        this.__core.clipbox = v;\n    }\n\n    get tags() {\n        return this.getTags();\n    }\n\n    set tags(v) {\n        if (!Array.isArray(v)) v = [v];\n        this.setTags(v);\n    }\n\n    set t(v) {\n        this.tags = v;\n    }\n\n    get _children() {\n        if (!this.__childList) {\n            this.__childList = new ElementChildList(this, false);\n        }\n        return this.__childList;\n    }\n\n    get childList() {\n        if (!this._allowChildrenAccess()) {\n            this._throwError(\"Direct access to children is not allowed in \" + this.getLocationString());\n        }\n        return this._children;\n    }\n\n    hasChildren() {\n        return this._allowChildrenAccess() && this.__childList && (this.__childList.length > 0);\n    }\n\n    _allowChildrenAccess() {\n        return true;\n    }\n\n    get children() {\n        return this.childList.get();\n    }\n\n    set children(children) {\n        this.childList.patch(children);\n    }\n\n    add(o) {\n        return this.childList.a(o);\n    }\n\n    get p() {\n        return this.__parent;\n    }\n\n    get parent() {\n        return this.__parent;\n    }\n\n    get src() {\n        if (this.texture && this.texture instanceof ImageTexture) {\n            return this.texture._src;\n        } else {\n            return undefined;\n        }\n    }\n\n    set src(v) {\n        const texture = new ImageTexture(this.stage);\n        texture.src = v;\n        this.texture = texture;\n    }\n\n    set mw(v) {\n        if (this.texture) {\n            this.texture.mw = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mw after setting a texture.');\n        }\n    }\n\n    set mh(v) {\n        if (this.texture) {\n            this.texture.mh = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mh after setting a texture.');\n        }\n    }\n\n    get rect() {\n        return (this.texture === this.stage.rectangleTexture);\n    }\n\n    set rect(v) {\n        if (v) {\n            this.texture = this.stage.rectangleTexture;\n        } else {\n            this.texture = null;\n        }\n    }\n\n    enableTextTexture() {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.texture = new TextTexture(this.stage);\n\n            if (!this.texture.w && !this.texture.h) {\n                // Inherit dimensions from element.\n                // This allows userland to set dimensions of the Element and then later specify the text.\n                this.texture.w = this.w;\n                this.texture.h = this.h;\n            }\n        }\n        return this.texture;\n    }\n\n    get text() {\n        if (this.texture && (this.texture instanceof TextTexture)) {\n            return this.texture;\n        } else {\n            return null;\n        }\n    }\n\n    set text(v) {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.enableTextTexture();\n        }\n        if (Utils.isString(v)) {\n            this.texture.text = v;\n        } else {\n            this.texture.patch(v);\n        }\n    }\n\n    set onUpdate(f) {\n        this.__core.onUpdate = f;\n    }\n\n    set onAfterCalcs(f) {\n        this.__core.onAfterCalcs = f;\n    }\n\n    set onAfterUpdate(f) {\n        this.__core.onAfterUpdate = f;\n    }\n\n    forceUpdate() {\n        // Make sure that the update loop is run.\n        this.__core._setHasUpdates();\n    }\n\n    get shader() {\n        return this.__core.shader;\n    }\n\n    set shader(v) {\n        if (Utils.isObjectLiteral(v) && !v.type) {\n            // Setting properties on an existing shader.\n            if (this.shader) {\n                this.shader.patch(v);\n            }\n        } else {\n            const shader = Shader.create(this.stage, v);\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.removeElement(this.__core);\n            }\n\n            this.__core.shader = shader;\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.addElement(this.__core);\n            }\n        }\n    }\n\n    _hasTexturizer() {\n        return !!this.__core._texturizer;\n    }\n\n    get renderToTexture() {\n        return this.rtt\n    }\n\n    set renderToTexture(v) {\n        this.rtt = v\n    }\n\n    get rtt() {\n        return this._hasTexturizer() && this.texturizer.enabled;\n    }\n\n    set rtt(v) {\n        this.texturizer.enabled = v;\n    }\n\n    get rttLazy() {\n        return this._hasTexturizer() && this.texturizer.lazy;\n    }\n\n    set rttLazy(v) {\n        this.texturizer.lazy = v;\n    }\n\n    get renderOffscreen() {\n        return this._hasTexturizer() && this.texturizer.renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this.texturizer.renderOffscreen = v;\n    }\n\n    get colorizeResultTexture() {\n        return this._hasTexturizer() && this.texturizer.colorize;\n    }\n\n    set colorizeResultTexture(v) {\n        this.texturizer.colorize = v;\n    }\n\n    getTexture() {\n        return this.texturizer._getTextureSource();\n    }\n\n    get texturizer() {\n        return this.__core.texturizer;\n    }\n\n    patch(settings) {\n        let paths = Object.keys(settings);\n\n        for (let i = 0, n = paths.length; i < n; i++) {\n            let path = paths[i];\n            const v = settings[path];\n\n            const firstCharCode = path.charCodeAt(0);\n            if (Utils.isUcChar(firstCharCode)) {\n                // Ref.\n                const child = this.getByRef(path);\n                if (!child) {\n                    if (v !== undefined) {\n                        // Add to list immediately.\n                        let c;\n                        if (Utils.isObjectLiteral(v)) {\n                            // Catch this case to capture createMode flag.\n                            c = this.childList.createItem(v);\n                            c.patch(v);\n                        } else if (Utils.isObject(v)) {\n                            c = v;\n                        }\n                        if (c.isElement) {\n                            c.ref = path;\n                        }\n\n                        this.childList.a(c);\n                    }\n                } else {\n                    if (v === undefined) {\n                        if (child.parent) {\n                            child.parent.childList.remove(child);\n                        }\n                    } else if (Utils.isObjectLiteral(v)) {\n                        child.patch(v);\n                    } else if (v.isElement) {\n                        // Replace element by new element.\n                        v.ref = path;\n                        this.childList.replace(v, child);\n                    } else {\n                        this._throwError(\"Unexpected value for path: \" + path);\n                    }\n                }\n            } else {\n                // Property.\n                Base.patchObjectProperty(this, path, v);\n            }\n        }\n    }\n\n    _throwError(message) {\n        throw new Error(this.constructor.name + \" (\" + this.getLocationString() + \"): \" + message);\n    }\n\n    animation(settings) {\n        return this.stage.animations.createAnimation(this, settings);\n    }\n\n    transition(property, settings = null) {\n        if (settings === null) {\n            return this._getTransition(property);\n        } else {\n            this._setTransition(property, settings);\n            // We do not create/return the transition, because it would undo the 'lazy transition creation' optimization.\n            return null;\n        }\n    }\n\n    set transitions(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            this.transition(property, object[property]);\n        });\n    }\n\n    set smooth(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            let value = object[property];\n            if (Array.isArray(value)) {\n                this.setSmooth(property, value[0], value[1]);\n            } else {\n                this.setSmooth(property, value);\n            }\n        });\n    }\n\n    fastForward(property) {\n        if (this._transitions) {\n            let t = this._transitions[property];\n            if (t && t.isTransition) {\n                t.finish();\n            }\n        }\n    }\n\n    _getTransition(property) {\n        if (!this._transitions) {\n            this._transitions = {};\n        }\n        let t = this._transitions[property];\n        if (!t) {\n            // Create default transition.\n            t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);\n        } else if (t.isTransitionSettings) {\n            // Upgrade to 'real' transition.\n            t = new Transition(\n                this.stage.transitions,\n                t,\n                this,\n                property\n            );\n        }\n        this._transitions[property] = t;\n        return t;\n    }\n\n    _setTransition(property, settings) {\n        if (!settings) {\n            this._removeTransition(property);\n        } else {\n            if (Utils.isObjectLiteral(settings)) {\n                // Convert plain object to proper settings object.\n                settings = this.stage.transitions.createSettings(settings);\n            }\n\n            if (!this._transitions) {\n                this._transitions = {};\n            }\n\n            let current = this._transitions[property];\n            if (current && current.isTransition) {\n                // Runtime settings change.\n                current.settings = settings;\n                return current;\n            } else {\n                // Initially, only set the settings and upgrade to a 'real' transition when it is used.\n                this._transitions[property] = settings;\n            }\n        }\n    }\n\n    _removeTransition(property) {\n        if (this._transitions) {\n            delete this._transitions[property];\n        }\n    }\n\n    getSmooth(property, v) {\n        let t = this._getTransition(property);\n        if (t && t.isAttached()) {\n            return t.targetValue;\n        } else {\n            return v;\n        }\n    }\n\n    setSmooth(property, v, settings) {\n        if (settings) {\n            this._setTransition(property, settings);\n        }\n        let t = this._getTransition(property);\n        t.start(v);\n        return t;\n    }\n\n    get flex() {\n        return this.__core.flex;\n    }\n\n    set flex(v) {\n        this.__core.flex = v;\n    }\n\n    get flexItem() {\n        return this.__core.flexItem;\n    }\n\n    set flexItem(v) {\n        this.__core.flexItem = v;\n    }\n\n    static isColorProperty(property) {\n        return property.toLowerCase().indexOf(\"color\") >= 0;\n    }\n\n    static getMerger(property) {\n        if (Element.isColorProperty(property)) {\n            return StageUtils.mergeColors;\n        } else {\n            return StageUtils.mergeNumbers;\n        }\n    }\n\n    toJSON() {\n        const ref = [`${this.constructor.name}`];\n        const tree = {};\n        tree[ref] = {};\n\n        if (this.hasChildren()) {\n            Element.collectChildren(tree[ref], this.__childList);\n        } else {\n            tree[ref] = {...Element.getProperties(this)};\n        }\n        return tree;\n    }\n\n    static collectChildren(tree, children) {\n        const childList = children;\n        for (let i = 0, j = childList.length; i < j; i++) {\n            const element = childList.getAt(i);\n            const ref = `${element.__ref || `Element-${element.id}`}`;\n            const properties = this.getProperties(element);\n\n            tree[ref] = {...properties};\n\n            if (element.hasChildren()) {\n                tree[ref].children = {};\n                this.collectChildren(\n                    tree[ref].children, element.__childList\n                );\n            }\n        }\n    }\n\n    static getProperties(element) {\n        const props = {};\n        const list = [\n            \"alpha\", \"active\", \"attached\", \"boundsMargin\", \"color\", \"clipping\", \"enabled\", \"h\", \"id\", \"isComponent\",\n            \"mount\", \"mountY\", \"mountX\", \"pivot\", \"pivotX\", \"pivotY\", \"ref\", \"renderOfScreen\", \"renderToTexture\", \"scale\",\n            \"scaleX\", \"scaleY\", \"state\", \"tag\", \"visible\", \"w\", \"x\", \"y\", \"zIndex\",\n            \"!!flex\", \"!!flexItem\", \"hasFocus()\", \"hasFinalFocus()\"\n        ];\n        let n = list.length;\n\n        while (n--) {\n            let key = list[n];\n            const getBoolean = /^!{2}/;\n            const isFunction = /\\(\\)$/;\n\n            if (getBoolean.test(key)) {\n                key = key.substring(2, key.length);\n                props[key] = !!element[key];\n            } else if (isFunction.test(key)) {\n                key = key.substring(0, key.length - 2);\n                if (typeof element[key] === \"function\") {\n                    props[key] = element[key]();\n                }\n            } else {\n                props[key] = element[key];\n            }\n        }\n        return {...props, ...element.getNonDefaults()};\n    }\n}\n\n// This gives a slight performance benefit compared to extending EventEmitter.\nEventEmitter.addAsMixin(Element);\n\nElement.prototype.isElement = 1;\n\nElement.id = 1;\n\n// Getters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_GETTERS = new Map();\n\n// Setters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_SETTERS = new Map();\n\nimport Texture from \"./Texture.mjs\";\nimport ImageTexture from \"../textures/ImageTexture.mjs\";\nimport TextTexture from \"../textures/TextTexture.mjs\";\nimport SourceTexture from \"../textures/SourceTexture.mjs\";\nimport Transition from \"../animation/Transition.mjs\";\nimport ElementChildList from \"./ElementChildList.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StateMachine {\n\n    constructor() {\n        StateMachine.setupStateMachine(this);\n    }\n\n    static setupStateMachine(target) {\n        const targetConstructor = target.constructor;\n        const router = StateMachine.create(targetConstructor);\n        Object.setPrototypeOf(target, router.prototype);\n        target.constructor = targetConstructor;\n        target._initStateMachine();\n    }\n\n    /**\n     * Creates a state machine implementation.\n     * It extends the original type and should be used when creating new instances.\n     * The original type is available as static property 'original', and it must be used when subclassing as follows:\n     * const type = StateMachine.create(class YourNewStateMachineClass extends YourBaseStateMachineClass.original {  })\n     * @param {Class} type\n     * @returns {StateMachine}\n     */\n    static create(type) {\n        if (!type.hasOwnProperty('_sm')) {\n            // Only need to run once.\n            const stateMachineType = new StateMachineType(type);\n            type._sm = stateMachineType;\n        }\n\n        return type._sm.router;\n    }\n\n    /**\n     * Calls the specified method if it exists.\n     * @param {string} event\n     * @param {*...} args\n     */\n    fire(event, ...args) {\n        if (this._hasMethod(event)) {\n            return this[event](...args);\n        }\n    }\n\n    /**\n     * Returns the current state path (for example \"Initialized.Loading\").\n     * @returns {string}\n     * @protected\n     */\n    _getState() {\n        return this._state.__path;\n    }\n\n    /**\n     * Returns true iff statePath is (an ancestor of) currentStatePath.\n     * @param {string} statePath\n     * @param {string} currentStatePath\n     * @returns {Boolean}\n     * @protected\n     */\n    _inState(statePath, currentStatePath = this._state.__path) {\n        const state = this._sm.getStateByPath(statePath);\n        const currentState = this._sm.getStateByPath(currentStatePath);\n        const level = state.__level;\n        const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);\n        return (stateAtLevel === state);\n    }\n\n    /**\n     * Returns true if the specified class member is defined for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMember(name) {\n        return !!this.constructor.prototype[name];\n    }\n\n    /**\n     * Returns true if the specified class member is a method for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMethod(name) {\n        const member = this.constructor.prototype[name];\n        return !!member && (typeof member === \"function\")\n    }\n\n    /**\n     * Switches to the specified state.\n     * @param {string} statePath\n     *   Substates are seperated by a underscores (for example \"Initialized.Loading\").\n     * @param {*[]} [args]\n     *   Args that are supplied in $enter and $exit events.\n     * @protected\n     */\n    _setState(statePath, args) {\n        const setStateId = ++this._setStateCounter;\n        this._setStateId = setStateId;\n\n        if (this._state.__path !== statePath) {\n            // Performance optimization.\n            let newState = this._sm._stateMap[statePath];\n            if (!newState) {\n                // Check for super state.\n                newState = this._sm.getStateByPath(statePath);\n            }\n\n            const prevState = this._state;\n\n            const hasDifferentEnterMethod = (newState.prototype.$enter !== this._state.prototype.$enter);\n            const hasDifferentExitMethod = (newState.prototype.$exit !== this._state.prototype.$exit);\n            if (hasDifferentEnterMethod || hasDifferentExitMethod) {\n                const sharedState = StateMachine._getSharedState(this._state, newState);\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path,\n                    sharedState: sharedState.__path\n                };\n                const sharedLevel = sharedState.__level;\n\n                if (hasDifferentExitMethod) {\n                    const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);\n                    for (let i = 0, n = exitStates.length; i < n; i++) {\n                        this.__setState(exitStates[i]);\n                        this._callExit(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n                if (hasDifferentEnterMethod) {\n                    const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();\n                    for (let i = 0, n = enterStates.length; i < n; i++) {\n                        this.__setState(enterStates[i]);\n                        this._callEnter(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n            }\n\n            this.__setState(newState);\n\n            if (this._changedState) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n\n                if (args) {\n                    this._changedState(context, ...args);\n                } else {\n                    this._changedState(context);\n                }\n            }\n\n            if (this._onStateChange) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n                this._onStateChange(context);\n            }\n\n        }\n    }\n\n    _callEnter(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$enter) {\n            if (!hasParent || (state.__parent.prototype.$enter !== state.prototype.$enter)) {\n                state.prototype.$enter.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    _callExit(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$exit) {\n            if (!hasParent || (state.__parent.prototype.$exit !== state.prototype.$exit)) {\n                state.prototype.$exit.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    __setState(state) {\n        this._state = state;\n        this._stateIndex = state.__index;\n        this.constructor = state;\n    }\n\n    _initStateMachine() {\n        this._state = null;\n        this._stateIndex = 0;\n        this._setStateCounter = 0;\n        this._sm = this._routedType._sm;\n        this.__setState(this._sm.getStateByPath(\"\"));\n        const context = {newState: \"\", prevState: undefined, sharedState: undefined};\n        this._callEnter(this._state, [], context);\n        this._onStateChange = undefined;\n    }\n\n    /**\n     * Between multiple member names, select the one specified in the deepest state.\n     * If multiple member names are specified in the same deepest state, the first one in the array is returned.\n     * @param {string[]} memberNames\n     * @returns {string|undefined}\n     * @protected\n     */\n    _getMostSpecificHandledMember(memberNames) {\n        let cur = this._state;\n        do {\n            for (let i = 0, n = memberNames.length; i < n; i++) {\n                const memberName = memberNames[i];\n                if (!cur.__parent) {\n                    if (cur.prototype[memberName]) {\n                        return memberName;\n                    }\n                } else {\n                    const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);\n                    if (this[alias]) {\n                        return memberName;\n                    }\n                }\n            }\n            cur = cur.__parent;\n        } while (cur);\n    }\n\n    static _getStatesUntilLevel(state, level) {\n        const states = [];\n        while (state.__level > level) {\n            states.push(state);\n            state = state.__parent;\n        }\n        return states;\n    }\n\n    static _getSharedState(state1, state2) {\n        const state1Array = StateMachine._getAncestorStates(state1);\n        const state2Array = StateMachine._getAncestorStates(state2);\n        const n = Math.min(state1Array.length, state2Array.length);\n        for (let i = 0; i < n; i++) {\n            if (state1Array[i] !== state2Array[i]) {\n                return state1Array[i - 1];\n            }\n        }\n        return state1Array[n - 1];\n    }\n\n    static _getAncestorStates(state) {\n        const result = [];\n        do {\n            result.push(state);\n        } while(state = state.__parent);\n        return result.reverse();\n    }\n\n    static _getStateAtLevel(state, level) {\n        if (level > state.__level) {\n            return undefined;\n        }\n\n        while(level < state.__level) {\n            state = state.__parent;\n        }\n        return state;\n    }\n}\n\nclass StateMachineType {\n\n    constructor(type) {\n        this._type = type;\n        this._router = null;\n\n        this.init();\n    }\n\n    get router() {\n        return this._router;\n    }\n\n    init() {\n        this._router = this._createRouter();\n\n        this._stateMap = this._getStateMap();\n\n        this._addStateMemberDelegatorsToRouter();\n\n    }\n\n    _createRouter() {\n        const type = this._type;\n\n        const router = class StateMachineRouter extends type {\n            constructor() {\n                super(...arguments);\n                if (!this.constructor.hasOwnProperty('_isRouter')) {\n                    throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);\n                }\n            }\n        };\n        router._isRouter = true;\n        router.prototype._routedType = type;\n        router.original = type;\n\n        this._mixinStateMachineMethods(router);\n\n        return router;\n    }\n\n    _mixinStateMachineMethods(router) {\n        // Mixin the state machine methods, so that we reuse the methods instead of re-creating them.\n        const names = Object.getOwnPropertyNames(StateMachine.prototype);\n        for (let i = 0, n = names.length; i < n; i++) {\n            const name = names[i];\n            if (name !== \"constructor\") {\n                const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);\n                Object.defineProperty(router.prototype, name, descriptor);\n            }\n        }\n    }\n\n    _addStateMemberDelegatorsToRouter() {\n        const members = this._getAllMemberNames();\n\n        members.forEach(member => {\n            this._addMemberRouter(member);\n        });\n    }\n\n    /**\n     * @note We are generating code because it yields much better performance.\n     */\n    _addMemberRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member);\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        let type = undefined;\n        descriptors.forEach(descriptor => {\n            if (descriptor) {\n                const descType = this._getDescriptorType(descriptor);\n                if (type && (type !== descType)) {\n                    console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);\n                    return;\n                }\n                type = descType;\n            }\n        });\n\n        switch(type) {\n            case \"method\":\n                this._addMethodRouter(member, descriptors, aliases);\n                break;\n            case \"getter\":\n                this._addGetterSetterRouters(member);\n                break;\n            case \"property\":\n                console.warn(\"[Lightning] Fixed properties are not supported; please use a getter instead!\")\n                break;\n        }\n    }\n\n    _getDescriptor(state, member, isValid = () => true) {\n        let type = state;\n        let curState = state;\n\n        do {\n            const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);\n            if (descriptor) {\n                if (isValid(descriptor)) {\n                    descriptor._source = curState;\n                    return descriptor;\n                }\n            }\n            type = Object.getPrototypeOf(type);\n            if (type && type.hasOwnProperty('__state')) {\n                curState = type;\n            }\n        } while(type && type.prototype);\n        return undefined;\n    }\n\n    _getDescriptorType(descriptor) {\n        if (descriptor.get || descriptor.set) {\n            return 'getter';\n        } else {\n            if (typeof descriptor.value === \"function\") {\n                return 'method';\n            } else {\n                return 'property';\n            }\n        }\n    }\n\n    static _supportsSpread() {\n        if (this.__supportsSpread === undefined) {\n            this.__supportsSpread = false;\n            try {\n                const func = new Function(\"return [].concat(...arguments);\");\n                func();\n                this.__supportsSpread = true;\n            } catch(e) {}\n        }\n        return this.__supportsSpread;\n    }\n\n    _addMethodRouter(member, descriptors, aliases) {\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        const supportsSpread = StateMachineType._supportsSpread();\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    if (supportsSpread) {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"](...arguments); else`);\n                    } else {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"].apply(this, arguments); else`);\n                    }\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            if (supportsSpread) {\n                code.push(`return this[\"${cur}\"](...arguments);`);\n            } else {\n                code.push(`return this[\"${cur}\"].apply(this, arguments);`);\n            }\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n\n        const descriptor = {value: router};\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _addGetterSetterRouters(member) {\n        const getter = this._getGetterRouter(member);\n        const setter = this._getSetterRouter(member);\n        const descriptor = {\n            get: getter,\n            set: setter\n        };\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _getGetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.get));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) return this[\"${cur}\"]; else`);\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`return this[\"${cur}\"];`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n        return router;\n    }\n\n    _getSetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.set));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) this[\"${cur}\"] = arg; else`);\n                } else {\n                    code.push(`if (i < ${i}) ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`this[\"${cur}\"] = arg;`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([\"arg\"], functionBody);\n        return router;\n    }\n\n    static getStateMemberAlias(path, member) {\n        return \"$\" + (path ? path + \".\" : \"\") + member;\n    }\n\n    _getAllMemberNames() {\n        const stateMap = this._stateMap;\n        const map = Object.keys(stateMap);\n        let members = new Set();\n        map.forEach(statePath => {\n            if (statePath === \"\") {\n                // Root state can be skipped: if the method only occurs in the root state, we don't need to re-delegate it based on state.\n                return;\n            }\n            const state = stateMap[statePath];\n            const names = this._getStateMemberNames(state);\n            names.forEach(name => {\n                members.add(name);\n            })\n        });\n        return [...members];\n    }\n\n    _getStateMemberNames(state) {\n        let type = state;\n        let members = new Set();\n        const isRoot = this._type === state;\n        do {\n            const names = this._getStateMemberNamesForType(type);\n            names.forEach(name => {\n                members.add(name)\n            });\n\n            type = Object.getPrototypeOf(type);\n        } while(type && type.prototype && (!type.hasOwnProperty(\"__state\") || isRoot));\n\n        return members;\n    }\n\n    _getStateMemberNamesForType(type) {\n        const memberNames = Object.getOwnPropertyNames(type.prototype);\n        return memberNames.filter(memberName => {\n            return (memberName !== \"constructor\") && !StateMachineType._isStateLocalMember(memberName);\n        });\n    }\n\n    static _isStateLocalMember(memberName) {\n        return (memberName === \"$enter\") || (memberName === \"$exit\");\n    }\n\n    getStateByPath(statePath) {\n        if (this._stateMap[statePath]) {\n            return this._stateMap[statePath];\n        }\n\n        // Search for closest match.\n        const parts = statePath.split(\".\");\n        while(parts.pop()) {\n            const statePath = parts.join(\".\");\n            if (this._stateMap[statePath]) {\n                return this._stateMap[statePath];\n            }\n        }\n    }\n\n    _getStateMap() {\n        if (!this._stateMap) {\n            this._stateMap = this._createStateMap();\n        }\n        return this._stateMap;\n    }\n\n    _createStateMap() {\n        const stateMap = {};\n        this._addState(this._type, null, \"\", stateMap);\n        return stateMap;\n    }\n\n    _addState(state, parentState, name, stateMap) {\n        state.__state = true;\n        state.__name = name;\n\n        this._addStaticStateProperty(state, parentState);\n\n        const parentPath = (parentState ? parentState.__path : \"\");\n        let path = (parentPath ? parentPath + \".\" : \"\") + name;\n        state.__path = path;\n        state.__level = parentState ? parentState.__level + 1 : 0;\n        state.__parent = parentState;\n        state.__index = Object.keys(stateMap).length;\n        stateMap[path] = state;\n\n        const states = state._states;\n        if (states) {\n            const isInheritedFromParent = (parentState && parentState._states === states);\n            if (!isInheritedFromParent) {\n                const subStates = state._states();\n                subStates.forEach(subState => {\n                    const stateName = StateMachineType._getStateName(subState);\n                    this._addState(subState, state, stateName, stateMap);\n                });\n            }\n        }\n    }\n\n    static _getStateName(state) {\n        const name = state.name;\n\n        const index = name.indexOf('$');\n        if (index > 0) {\n            // Strip off rollup name suffix.\n            return name.substr(0, index);\n        }\n\n        return name;\n    }\n\n    _addStaticStateProperty(state, parentState) {\n        if (parentState) {\n            const isClassStateLevel = parentState && !parentState.__parent;\n            if (isClassStateLevel) {\n                this._router[state.__name] = state;\n            } else {\n                parentState[state.__name] = state;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Element from \"../tree/Element.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport StateMachine from \"./StateMachine.mjs\";\n\n/**\n * @extends StateMachine\n */\nexport default class Component extends Element {\n\n    constructor(stage, properties) {\n        super(stage);\n\n        // Encapsulate tags to prevent leaking.\n        this.tagRoot = true;\n\n        if (Utils.isObjectLiteral(properties)) {\n            Object.assign(this, properties);\n        }\n\n        this.__initialized = false;\n        this.__firstActive = false;\n        this.__firstEnable = false;\n\n        this.__signals = undefined;\n\n        this.__passSignals = undefined;\n\n        this.__construct();\n\n        // Quick-apply template.\n        const func = this.constructor.getTemplateFunc(this);\n        func.f(this, func.a);\n\n        this._build();\n    }\n\n    __start() {\n        StateMachine.setupStateMachine(this);\n        this._onStateChange = Component.prototype.__onStateChange;\n    }\n\n    get state() {\n        return this._getState();\n    }\n\n    __onStateChange() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    _refocus() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    static bindProp(name, func = null) {\n        return {__propertyBinding: true, __name: name, __func: func};\n    }\n\n    __bindProperty(propObj, targetObj, targetProp) {\n        // 1. find binding position: find object and property name to be bound\n        const obj = targetObj;\n        const prop = targetProp;\n        const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];\n\n        // 2. create setters for every given dependency\n        for (let i = 0; i < propDependencies.length; i++) {\n            const propName = propDependencies[i];\n            const func = propObj.__func ? propObj.__func : (context) => context[propName];\n\n            if (!this.hasOwnProperty(propName)) {\n                this[`__prop_bindings_${propName}`] = [{__obj: obj, __prop: prop, __func: func}];\n                Object.defineProperty(this, propName, {\n                    set: (value) => {\n                        this[`__prop_${propName}`] = value;\n                        for (const {__obj, __prop, __func} of this[`__prop_bindings_${propName}`]) {\n                            __obj[__prop] = __func(this);\n                        }\n                    },\n                    get: () => this[`__prop_${propName}`]\n                });\n            } else {\n                this[`__prop_bindings_${propName}`].push({__obj: obj, __prop: prop, __func: func});\n            }\n        }\n    }\n\n    /**\n     * Returns a high-performance template patcher.\n     */\n    static getTemplateFunc(ctx) {\n        // We need a different template function per patch id.\n        const name = \"_templateFunc\";\n\n        // Be careful with class-based static inheritance.\n        const hasName = '__has' + name;\n        if (this[hasName] !== this) {\n            this[hasName] = this;\n            this[name] = this.parseTemplate(this._template(ctx));\n        }\n        return this[name];\n    }\n\n    static parseTemplate(obj) {\n        const context = {\n            loc: [],\n            store: [],\n            rid: 0\n        };\n\n        this.parseTemplateRec(obj, context, \"element\");\n\n        const code = context.loc.join(\";\\n\");\n        const f = new Function(\"element\", \"store\", code);\n        return {f: f, a: context.store};\n    }\n\n    static parseTemplateRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            let value = obj[key];\n            if (Utils.isUcChar(key.charCodeAt(0))) {\n                // Value must be expanded as well.\n                if (Utils.isObjectLiteral(value)) {\n                    // Ref.\n                    const childCursor = `r${key.replace(/[^a-z0-9]/gi, \"\") + context.rid}`;\n                    let type = value.type ? value.type : Element;\n                    if (type === Element) {\n                        loc.push(`var ${childCursor} = element.stage.createElement()`);\n                    } else {\n                        store.push(type);\n                        loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);\n                    }\n                    loc.push(`${childCursor}.ref = \"${key}\"`);\n                    context.rid++;\n\n                    // Enter sub.\n                    this.parseTemplateRec(value, context, childCursor);\n\n                    loc.push(`${cursor}.childList.add(${childCursor})`);\n                } else if (Utils.isObject(value)) {\n                    // Dynamic assignment.\n                    store.push(value);\n                    loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);\n                }\n            } else {\n                if (key === \"text\") {\n                    const propKey = cursor + \"__text\";\n                    loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);\n                    if (value.__propertyBinding === true) {\n                        // Allow binding entire objects to text property\n                        store.push(value);\n                        loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                    } else {\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (key === \"shader\" && Utils.isObjectLiteral(value)) {\n                    const shaderCursor = `${cursor}[\"shader\"]`\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    this.parsePropertyBindings(value, context, shaderCursor);\n                } else if (key === \"texture\" && Utils.isObjectLiteral(value)) {\n                    const propKey = cursor + \"__texture\";\n                    const type = value.type;\n                    if (type) {\n                        store.push(type);\n                        loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                        loc.push(`${cursor}[\"${key}\"] = ${propKey}`);\n                    } else {\n                        loc.push(`${propKey} = ${cursor}.texture`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else {\n                    // Property;\n                    if (Utils.isNumber(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                    } else if (Utils.isBoolean(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                    } else if (Utils.isObject(value) || Array.isArray(value)) {\n                        // Dynamic assignment.\n                        // Because literal objects may contain dynamics, we store the full object.\n                        store.push(value);\n                        loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    } else {\n                        // String etc.\n                        loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                    }\n                }\n            }\n        });\n    }\n\n    static parseTemplatePropRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isNumber(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                } else if (Utils.isBoolean(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                } else if (Utils.isObject(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else if (Utils.isObject(value) || Array.isArray(value)) {\n                    // Dynamic assignment.\n                    // Because literal objects may contain dynamics, we store the full object.\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                } else {\n                    // String etc.\n                    loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                }\n            }\n        });\n    }\n\n    static parsePropertyBindings(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                }\n            }\n        });\n    }\n\n    _onSetup() {\n        if (!this.__initialized) {\n            this._setup();\n        }\n    }\n\n    _setup() {\n    }\n\n    _onAttach() {\n        if (!this.__initialized) {\n            this.__init();\n            this.__initialized = true;\n        }\n\n        this._attach();\n    }\n\n    _attach() {\n    }\n\n    _onDetach() {\n        this._detach();\n    }\n\n    _detach() {\n    }\n\n    _onEnabled() {\n        if (!this.__firstEnable) {\n            this._firstEnable();\n            this.__firstEnable = true;\n        }\n\n        this._enable();\n    }\n\n    _firstEnable() {\n    }\n\n    _enable() {\n    }\n\n    _onDisabled() {\n        this._disable();\n    }\n\n    _disable() {\n    }\n\n    _onActive() {\n        if (!this.__firstActive) {\n            this._firstActive();\n            this.__firstActive = true;\n        }\n\n        this._active();\n    }\n\n    _firstActive() {\n    }\n\n    _active() {\n    }\n\n    _onInactive() {\n        this._inactive();\n    }\n\n    _inactive() {\n    }\n\n    get application() {\n        return this.stage.application;\n    }\n\n    __construct() {\n        this._construct();\n    }\n\n    _construct() {\n    }\n\n    _build() {\n    }\n\n    __init() {\n        this._init();\n    }\n\n    _init() {\n    }\n\n    _focus(newTarget, prevTarget) {\n    }\n\n    _unfocus(newTarget) {\n    }\n\n    _focusChange(target, newTarget) {\n    }\n\n    _getFocused() {\n        // Override to delegate focus to child components.\n        return this;\n    }\n\n    _setFocusSettings(settings) {\n        // Override to add custom settings. See Application._handleFocusSettings().\n    }\n\n    _handleFocusSettings(settings) {\n        // Override to react on custom settings. See Application._handleFocusSettings().\n    }\n\n    static _template() {\n        return {};\n    }\n\n    hasFinalFocus() {\n        let path = this.application._focusPath;\n        return path && path.length && path[path.length - 1] === this;\n    }\n\n    hasFocus() {\n        let path = this.application._focusPath;\n        return path && (path.indexOf(this) >= 0);\n    }\n\n    get cparent() {\n        return Component.getParent(this);\n    }\n\n    seekAncestorByType(type) {\n        let c = this.cparent;\n        while (c) {\n            if (c.constructor === type) {\n                return c;\n            }\n            c = c.cparent;\n        }\n    }\n\n    getSharedAncestorComponent(element) {\n        let ancestor = this.getSharedAncestor(element);\n        while (ancestor && !ancestor.isComponent) {\n            ancestor = ancestor.parent;\n        }\n        return ancestor;\n    }\n\n    get signals() {\n        return this.__signals;\n    }\n\n    set signals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        this.__signals = v;\n    }\n\n    set alterSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__signals) {\n            this.__signals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__signals[key];\n            } else {\n                this.__signals[key] = v;\n            }\n        }\n    }\n\n    get passSignals() {\n        return this.__passSignals || {};\n    }\n\n    set passSignals(v) {\n        this.__passSignals = Object.assign(this.__passSignals || {}, v);\n    }\n\n    set alterPassSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__passSignals) {\n            this.__passSignals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__passSignals[key];\n            } else {\n                this.__passSignals[key] = v;\n            }\n        }\n    }\n\n    /**\n     * Signals the parent of the specified event.\n     * A parent/ancestor that wishes to handle the signal should set the 'signals' property on this component.\n     * @param {string} event\n     * @param {...*} args\n     */\n    signal(event, ...args) {\n        return this._signal(event, args);\n    }\n\n    _signal(event, args) {\n        const signalParent = this._getParentSignalHandler();\n        if (signalParent) {\n            if (this.__signals) {\n                let fireEvent = this.__signals[event];\n                if (fireEvent === false) {\n                    // Ignore event.\n                    return;\n                }\n                if (fireEvent) {\n                    if (fireEvent === true) {\n                        fireEvent = event;\n                    }\n \n                    if (Utils.isFunction(fireEvent)) {\n                        return fireEvent(...args);\n                    }\n\n                    if (signalParent._hasMethod(fireEvent)) {\n                        return signalParent[fireEvent](...args);\n                    }\n                }\n            }\n\n            let passSignal = (this.__passSignals && this.__passSignals[event]);\n            if (passSignal) {\n                // Bubble up.\n                if (passSignal && passSignal !== true) {\n                    // Replace signal name.\n                    event = passSignal;\n                }\n\n                return signalParent._signal(event, args);\n            }\n        }\n    }\n\n    _getParentSignalHandler() {\n        return this.cparent ? this.cparent._getSignalHandler() : null;\n    }\n\n    _getSignalHandler() {\n        if (this._signalProxy) {\n            return this.cparent ? this.cparent._getSignalHandler() : null;\n        }\n        return this;\n    }\n\n    get _signalProxy() {\n        return false;\n    }\n\n    fireAncestors(name, ...args) {\n        if (!name.startsWith('$')) {\n            throw new Error(\"Ancestor event name must be prefixed by dollar sign.\");\n        }\n\n        const parent = this._getParentSignalHandler();\n        if (parent) {\n            return parent._doFireAncestors(name, args);\n        }\n    }\n\n    _doFireAncestors(name, args) {\n        if (this._hasMethod(name)) {\n            return this.fire(name, ...args);\n        } else {\n            const signalParent = this._getParentSignalHandler();\n            if (signalParent) {\n                return signalParent._doFireAncestors(name, args);\n            }\n        }\n    }\n\n    static collectSubComponents(subs, element) {\n        if (element.hasChildren()) {\n            const childList = element.__childList;\n            for (let i = 0, n = childList.length; i < n; i++) {\n                const child = childList.getAt(i);\n                if (child.isComponent) {\n                    subs.push(child);\n                } else {\n                    Component.collectSubComponents(subs, child);\n                }\n            }\n        }\n    }\n\n    static getComponent(element) {\n        let parent = element;\n        while (parent && !parent.isComponent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    static getParent(element) {\n        return Component.getComponent(element.parent);\n    }\n}\n\nComponent.prototype.isComponent = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreQuadList {\n\n    constructor(ctx) {\n\n        this.ctx = ctx;\n\n        this.quadTextures = [];\n\n        this.quadElements = [];\n    }\n\n    get length() {\n        return this.quadTextures.length;\n    }\n\n    reset() {\n        this.quadTextures = [];\n        this.quadElements = [];\n        this.dataLength = 0;\n    }\n\n    getElement(index) {\n        return this.quadElements[index]._element;\n    }\n\n    getElementCore(index) {\n        return this.quadElements[index];\n    }\n\n    getTexture(index) {\n        return this.quadTextures[index];\n    }\n\n    getTextureWidth(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.w) {\n            // Render texture;\n            return nativeTexture.w;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.w;\n        }\n    }\n\n    getTextureHeight(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.h) {\n            // Render texture;\n            return nativeTexture.h;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class WebGLCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        // Allocate a fairly big chunk of memory that should be enough to support ~100000 (default) quads.\n        // We do not (want to) handle memory overflow.\n        const byteSize = ctx.stage.getOption('bufferMemory');\n\n        this.dataLength = 0;\n\n        this.data = new ArrayBuffer(byteSize);\n        this.floats = new Float32Array(this.data);\n        this.uints = new Uint32Array(this.data);\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return index * 80;\n    }\n\n    getQuadContents() {\n        // Debug: log contents of quad buffer.\n        let floats = this.floats;\n        let uints = this.uints;\n        let lines = [];\n        for (let i = 1; i <= this.length; i++) {\n            let str = 'entry ' + i + ': ';\n            for (let j = 0; j < 4; j++) {\n                let b = i * 20 + j * 4;\n                str += floats[b] + ',' + floats[b+1] + ':' + floats[b+2] + ',' + floats[b+3] + '[' + uints[b+4].toString(16) + '] ';\n            }\n            lines.push(str);\n        }\n\n        return lines;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n\n        this.ctx = ctx;\n        this.shader = shader;\n        this.shaderOwner = shaderOwner;\n        this.renderTextureInfo = renderTextureInfo;\n        this.scissor = scissor;\n        this.index = index;\n        this.length = 0;\n\n    }\n\n    get quads() {\n        return this.ctx.renderState.quads;\n    }\n\n    getTexture(index) {\n        return this.quads.getTexture(this.index + index);\n    }\n\n    getElementCore(index) {\n        return this.quads.getElementCore(this.index + index);\n    }\n\n    getElement(index) {\n        return this.quads.getElement(this.index + index);\n    }\n\n    getElementWidth(index) {\n        return this.getElement(index).renderWidth;\n    }\n\n    getElementHeight(index) {\n        return this.getElement(index).renderHeight;\n    }\n\n    getTextureWidth(index) {\n        return this.quads.getTextureWidth(this.index + index);\n    }\n\n    getTextureHeight(index) {\n        return this.quads.getTextureHeight(this.index + index);\n    }\n\n    getRenderWidth() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.w;\n        } else {\n            return this.ctx.stage.w;\n        }\n    }\n\n    getRenderHeight() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.h;\n        } else {\n            return this.ctx.stage.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class WebGLCoreQuadOperation extends CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n\n        this.extraAttribsDataByteOffset = 0;\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return this.quads.getAttribsDataByteOffset(this.index + index);\n    }\n\n    /**\n     * Returns the relative pixel coordinates in the shader owner to gl position coordinates in the render texture.\n     * @param x\n     * @param y\n     * @return {number[]}\n     */\n    getNormalRenderTextureCoords(x, y) {\n        let coords = this.shaderOwner.getRenderTextureCoords(x, y);\n        coords[0] /= this.getRenderWidth();\n        coords[1] /= this.getRenderHeight();\n        coords[0] = coords[0] * 2 - 1;\n        coords[1] = 1 - coords[1] * 2;\n        return coords;\n    }\n\n    getProjection() {\n        if (this.renderTextureInfo === null) {\n            return this.ctx.renderExec._projection;\n        } else {\n            return this.renderTextureInfo.nativeTexture.projection;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreRenderExecutor {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.renderState = ctx.renderState;\n\n        this.gl = this.ctx.stage.gl;\n    }\n\n    destroy() {\n        this.ctx = null;\n        this.renderState = null;\n        this.gl = null;\n\n        delete this.ctx;\n        delete this.renderState;\n        delete this.gl;\n    }\n\n    _reset() {\n        this._bindRenderTexture(null);\n        this._setScissor(null);\n        this._clearRenderTexture();\n    }\n\n    execute() {\n        this._reset();\n\n        let qops = this.renderState.quadOperations;\n\n        let i = 0, j = 0, n = qops.length;\n        while (i < n) {\n            this._processQuadOperation(qops[i]);\n            i++;\n        }\n    }\n\n    _processQuadOperation(quadOperation) {\n        if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {\n            // Ignore quad operations when we are 're-using' another texture as the render texture result.\n            return;\n        }\n\n        this._setupQuadOperation(quadOperation);\n        this._execQuadOperation(quadOperation);\n\n    }\n\n    _setupQuadOperation(quadOperation) {\n    }\n\n    _execQuadOperation(op) {\n        // Set render texture.\n        let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;\n\n        if (this._renderTexture !== nativeTexture) {\n            this._bindRenderTexture(nativeTexture);\n        }\n\n        if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {\n            this._setScissor(null);\n            this._clearRenderTexture();\n            op.renderTextureInfo.cleared = true;\n            this._setScissor(op.scissor);\n        } else {\n            this._setScissor(op.scissor);\n        }\n\n        this._renderQuadOperation(op);\n    }\n\n    _renderQuadOperation(op) {\n    }\n\n    _bindRenderTexture(renderTexture) {\n        this._renderTexture = renderTexture;\n    }\n\n    _clearRenderTexture(renderTexture) {\n    }\n\n    _setScissor(area) {\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\n\nexport default class WebGLCoreRenderExecutor extends CoreRenderExecutor {\n\n    constructor(ctx) {\n        super(ctx)\n\n        this.gl = this.ctx.stage.gl;\n\n        this.init();\n    }\n\n    init() {\n        let gl = this.gl;\n\n        // Create new sharable buffer for params.\n        this._attribsBuffer = gl.createBuffer();\n\n        let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);\n\n        // Init webgl arrays.\n        let allIndices = new Uint16Array(maxQuads * 6);\n\n        // fill the indices with the quads to draw.\n        for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n            allIndices[i] = j;\n            allIndices[i + 1] = j + 1;\n            allIndices[i + 2] = j + 2;\n            allIndices[i + 3] = j;\n            allIndices[i + 4] = j + 2;\n            allIndices[i + 5] = j + 3;\n        }\n\n        // The quads buffer can be (re)used to draw a range of quads.\n        this._quadsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);\n\n        // The matrix that causes the [0,0 - W,H] box to map to [-1,-1 - 1,1] in the end results.\n        this._projection = new Float32Array([2/this.ctx.stage.coordsWidth, -2/this.ctx.stage.coordsHeight]);\n\n    }\n\n    destroy() {\n        super.destroy();\n        this.gl.deleteBuffer(this._attribsBuffer);\n        this.gl.deleteBuffer(this._quadsBuffer);\n\n        this.gl = null;\n        delete this.gl;\n    }\n\n    _reset() {\n        super._reset();\n\n        let gl = this.gl;\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n        gl.disable(gl.DEPTH_TEST);\n\n        this._stopShaderProgram();\n        this._setupBuffers();\n    }\n\n    _setupBuffers() {\n        let gl = this.gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);\n    }\n\n    _setupQuadOperation(quadOperation) {\n        super._setupQuadOperation(quadOperation);\n        this._useShaderProgram(quadOperation.shader, quadOperation);\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            shader.beforeDraw(op);\n            shader.draw(op);\n            shader.afterDraw(op);\n        }\n    }\n\n    /**\n     * @param {WebGLShader} shader;\n     * @param {CoreQuadOperation} operation;\n     */\n    _useShaderProgram(shader, operation) {\n        if (!shader.hasSameProgram(this._currentShaderProgram)) {\n            if (this._currentShaderProgram) {\n                this._currentShaderProgram.stopProgram();\n            }\n            shader.useProgram();\n            this._currentShaderProgram = shader;\n        }\n        shader.setupUniforms(operation);\n    }\n\n    _stopShaderProgram() {\n        if (this._currentShaderProgram) {\n            // The currently used shader program should be stopped gracefully.\n            this._currentShaderProgram.stopProgram();\n            this._currentShaderProgram = null;\n        }\n    }\n\n    _bindRenderTexture(renderTexture) {\n        super._bindRenderTexture(renderTexture);\n\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.viewport(0,0,this.ctx.stage.w,this.ctx.stage.h);\n        } else {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);\n            gl.viewport(0,0,this._renderTexture.w, this._renderTexture.h);\n        }\n    }\n\n    _clearRenderTexture() {\n        super._clearRenderTexture();\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            let glClearColor = this.ctx.stage.getClearColor();\n            if (glClearColor) {\n                gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n        } else {\n            // Clear texture.\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    }\n\n    _setScissor(area) {\n        super._setScissor(area);\n\n        if (this._scissor === area) {\n            return;\n        }\n        this._scissor = area;\n\n        let gl = this.gl;\n        if (!area) {\n            gl.disable(gl.SCISSOR_TEST);\n        } else {\n            gl.enable(gl.SCISSOR_TEST);\n            let precision = this.ctx.stage.getRenderPrecision();\n            let y = area[1];\n            if (this._renderTexture === null) {\n                // Flip.\n                y = (this.ctx.stage.h / precision - (area[1] + area[3]));\n            }\n            gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreRenderState {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.stage = ctx.stage;\n\n        this.defaultShader = this.stage.renderer.getDefaultShader(ctx);\n\n        this.renderer = ctx.stage.renderer;\n\n        this.quads = this.renderer.createCoreQuadList(ctx);\n\n    }\n\n    reset() {\n        this._renderTextureInfo = null;\n\n        this._scissor = null;\n\n        this._shader = null;\n\n        this._shaderOwner = null;\n\n        this._realShader = null;\n\n        this._check = false;\n\n        this.quadOperations = [];\n\n        this._texturizer = null;\n\n        this._texturizerTemporary = false;\n\n        this._quadOperation = null;\n\n        this.quads.reset();\n\n        this._temporaryTexturizers = [];\n        \n        this._isCachingTexturizer = false;\n\n    }\n\n    get length() {\n        return this.quads.quadTextures.length;\n    }\n\n    setShader(shader, owner) {\n        if (this._shaderOwner !== owner || this._realShader !== shader) {\n            // Same shader owner: active shader is also the same.\n            // Prevent any shader usage to save performance.\n\n            this._realShader = shader;\n\n            if (shader.useDefault()) {\n                // Use the default shader when possible to prevent unnecessary program changes.\n                shader = this.defaultShader;\n            }\n            if (this._shader !== shader || this._shaderOwner !== owner) {\n                this._shader = shader;\n                this._shaderOwner = owner;\n                this._check = true;\n            }\n        }\n    }\n\n    get renderTextureInfo() {\n        return this._renderTextureInfo;\n    }\n\n    setScissor(area) {\n        if (this._scissor !== area) {\n            if (area) {\n                this._scissor = area;\n            } else {\n                this._scissor = null;\n            }\n            this._check = true;\n        }\n    }\n\n    getScissor() {\n        return this._scissor;\n    }\n\n    setRenderTextureInfo(renderTextureInfo) {\n        if (this._renderTextureInfo !== renderTextureInfo) {\n            this._renderTextureInfo = renderTextureInfo;\n            this._scissor = null;\n            this._check = true;\n        }\n    }\n\n    /**\n     * Sets the texturizer to be drawn during subsequent addQuads.\n     * @param {ElementTexturizer} texturizer\n     */\n    setTexturizer(texturizer, cache = false) {\n        this._texturizer = texturizer;\n        this._cacheTexturizer = cache;\n    }\n\n    set isCachingTexturizer(v) {\n        this._isCachingTexturizer = v;\n    }\n\n    get isCachingTexturizer() {\n        return this._isCachingTexturizer;\n    }\n\n    addQuad(elementCore) {\n        if (!this._quadOperation) {\n            this._createQuadOperation();\n        } else if (this._check && this._hasChanges()) {\n            this._finishQuadOperation();\n            this._check = false;\n        }\n\n        let nativeTexture = null;\n        if (this._texturizer) {\n            nativeTexture = this._texturizer.getResultTexture();\n\n            if (!this._cacheTexturizer) {\n                // We can release the temporary texture immediately after finalizing this quad operation.\n                this._temporaryTexturizers.push(this._texturizer);\n            }\n        }\n\n        if (!nativeTexture) {\n            nativeTexture = elementCore._displayedTextureSource.nativeTexture;\n        }\n\n        if (this._renderTextureInfo) {\n            if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {\n                // The texture might be reusable under some conditions. We will check them in ElementCore.renderer.\n                this._renderTextureInfo.nativeTexture = nativeTexture;\n                this._renderTextureInfo.offset = this.length;\n            } else {\n                // It is not possible to reuse another texture when there is more than one quad.\n                this._renderTextureInfo.nativeTexture = null;\n            }\n            this._renderTextureInfo.empty = false;\n        }\n\n        this.quads.quadTextures.push(nativeTexture);\n        this.quads.quadElements.push(elementCore);\n\n        this._quadOperation.length++;\n\n        this.renderer.addQuad(this, this.quads, this.length - 1)\n    }\n\n    finishedRenderTexture() {\n        if (this._renderTextureInfo.nativeTexture) {\n            // There was only one texture drawn in this render texture.\n            // Check if we can reuse it so that we can optimize out an unnecessary render texture operation.\n            // (it should exactly span this render texture).\n            if (!this._isRenderTextureReusable()) {\n                this._renderTextureInfo.nativeTexture = null;\n            }\n        }\n    }\n\n    _isRenderTextureReusable() {\n        const offset = this._renderTextureInfo.offset;\n        return (this.quads.quadTextures[offset].w === this._renderTextureInfo.w) &&\n            (this.quads.quadTextures[offset].h === this._renderTextureInfo.h) &&\n            this.renderer.isRenderTextureReusable(this, this._renderTextureInfo)\n    }\n\n    _hasChanges() {\n        let q = this._quadOperation;\n        if (this._shader !== q.shader) return true;\n        if (this._shaderOwner !== q.shaderOwner) return true;\n        if (this._renderTextureInfo !== q.renderTextureInfo) return true;\n        if (this._scissor !== q.scissor) {\n            if ((this._scissor[0] !== q.scissor[0]) || (this._scissor[1] !== q.scissor[1]) || (this._scissor[2] !== q.scissor[2]) || (this._scissor[3] !== q.scissor[3])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _finishQuadOperation(create = true) {\n        if (this._quadOperation) {\n            if (this._quadOperation.length || this._shader.addEmpty()) {\n                if (!this._quadOperation.scissor || ((this._quadOperation.scissor[2] > 0) && (this._quadOperation.scissor[3] > 0))) {\n                    // Ignore empty clipping regions.\n                    this.quadOperations.push(this._quadOperation);\n                }\n            }\n\n            if (this._temporaryTexturizers.length) {\n                for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {\n                    // We can now reuse these render-to-textures in subsequent stages.\n                    // Huge performance benefit when filtering (fast blur).\n                    this._temporaryTexturizers[i].releaseRenderTexture();\n                }\n                this._temporaryTexturizers = [];\n            }\n\n            this._quadOperation = null;\n        }\n\n        if (create) {\n            this._createQuadOperation();\n        }\n    }\n\n    _createQuadOperation() {\n        this._quadOperation = this.renderer.createCoreQuadOperation(\n            this.ctx,\n            this._shader,\n            this._shaderOwner,\n            this._renderTextureInfo,\n            this._scissor,\n            this.length\n        );\n        this._check = false;\n    }\n\n    finish() {\n        if (this._quadOperation) {\n            // Add remaining.\n            this._finishQuadOperation(false);\n        }\n\n        this.renderer.finishRenderState(this);\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Base functionality for shader setup/destroy.\n */\nexport default class WebGLShaderProgram {\n\n    constructor(vertexShaderSource, fragmentShaderSource) {\n\n        this.vertexShaderSource = vertexShaderSource;\n        this.fragmentShaderSource = fragmentShaderSource;\n\n        this._program = null;\n        this.gl = null;\n\n        this._uniformLocations = new Map();\n        this._attributeLocations = new Map();\n\n        this._currentUniformValues = {};\n    }\n\n    compile(gl) {\n        if (this._program) return;\n\n        this.gl = gl;\n\n        this._program = gl.createProgram();\n\n        let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);\n        let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);\n\n        gl.attachShader(this._program, glVertShader);\n        gl.attachShader(this._program, glFragShader);\n        gl.linkProgram(this._program);\n\n        // if linking fails, then log and cleanup\n        if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\n            console.error('[Lightning] Error: Could not initialize shader.');\n            console.error('[Lightning] gl.VALIDATE_STATUS', gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));\n            console.error('[Lightning] gl.getError()', gl.getError());\n\n            // if there is a program info log, log it\n            if (gl.getProgramInfoLog(this._program) !== '') {\n                console.warn('[Lightning] Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(this._program));\n            }\n\n            gl.deleteProgram(this._program);\n            this._program = null;\n        }\n\n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    }\n\n    _glCompile(type, src) {\n        let shader = this.gl.createShader(type);\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.error('[Lightning]', this.constructor.name, 'Type: ' + (type === this.gl.VERTEX_SHADER ? 'vertex shader' : 'fragment shader') );\n            console.error('[Lightning]', this.gl.getShaderInfoLog(shader));\n            let idx = 0;\n            console.error('[Lightning]', \"========== source ==========\\n\" + src.split(\"\\n\").map(line => \"\" + (++idx) + \": \" + line).join(\"\\n\"));\n            return null;\n        }\n\n        return shader;\n    }\n\n    getUniformLocation(name) {\n        let location = this._uniformLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getUniformLocation(this._program, name);\n            this._uniformLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    getAttribLocation(name) {\n        let location = this._attributeLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getAttribLocation(this._program, name);\n            this._attributeLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    destroy() {\n        if (this._program) {\n            this.gl.deleteProgram(this._program);\n        }\n\n        this._attributeLocations = null;\n        this._currentUniformValues = null;\n        this.fragmentShaderSource = null;\n        this._program = null;\n        this.gl = null;\n        this._uniformLocations = null;\n        this.vertexShaderSource = null;  \n\n        delete this.vertexShaderSource;\n        delete this._program;        \n        delete this._currentUniformValues;\n        delete this.fragmentShaderSource;\n        delete this.gl;\n        delete this._uniformLocations;\n        delete this._attributeLocations;\n\n    }\n\n    get glProgram() {\n        return this._program;\n    }\n\n    get compiled() {\n        return !!this._program;\n    }\n\n    _valueEquals(v1, v2) {\n        // Uniform value is either a typed array or a numeric value.\n        if (v1.length && v2.length) {\n            for (let i = 0, n = v1.length; i < n; i++) {\n                if (v1[i] !== v2[i]) return false;\n            }\n            return true;\n        } else {\n            return (v1 === v2);\n        }\n    }\n\n    _valueClone(v) {\n        if (v.length) {\n            return v.slice(0);\n        } else {\n            return v;\n        }\n    }\n\n    setUniformValue(name, value, glFunction) {\n        let v = this._currentUniformValues[name];\n        if (v === undefined || !this._valueEquals(v, value)) {\n            let clonedValue = this._valueClone(value);\n            this._currentUniformValues[name] = clonedValue;\n\n            let loc = this.getUniformLocation(name);\n            if (loc) {\n                let isMatrix = (glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv);\n                if (isMatrix) {\n                    glFunction.call(this.gl, loc, false, clonedValue);\n                } else {\n                    glFunction.call(this.gl, loc, clonedValue);\n                }\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShaderProgram from \"./WebGLShaderProgram.mjs\";\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class WebGLShader extends Shader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        const stage = ctx.stage;\n\n        this._program = stage.renderer.shaderPrograms.get(this.constructor);\n        if (!this._program) {\n            this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);\n\n            // Let the vbo context perform garbage collection.\n            stage.renderer.shaderPrograms.set(this.constructor, this._program);\n        }\n\n        this.gl = stage.gl;\n    }\n\n    get glProgram() {\n        return this._program.glProgram;\n    }\n\n    _init() {\n        if (!this._initialized) {\n            this.initialize();\n            this._initialized = true;\n        }\n    }\n\n    initialize() {\n        this._program.compile(this.gl);\n    }\n\n    get initialized() {\n        return this._initialized;\n    }\n\n    _uniform(name) {\n        return this._program.getUniformLocation(name);\n    }\n\n    _attrib(name) {\n        return this._program.getAttribLocation(name);\n    }\n\n    _setUniform(name, value, glFunction) {\n        this._program.setUniformValue(name, value, glFunction);\n    }\n\n    useProgram() {\n        this._init();\n        this.gl.useProgram(this.glProgram);\n        this.beforeUsage();\n        this.enableAttribs();\n    }\n\n    stopProgram() {\n        this.afterUsage();\n        this.disableAttribs();\n    }\n\n    hasSameProgram(other) {\n        // For performance reasons, we first check for identical references.\n        return (other && ((other === this) || (other._program === this._program)));\n    }\n\n    beforeUsage() {\n        // Override to set settings other than the default settings (blend mode etc).\n    }\n\n    afterUsage() {\n        // All settings changed in beforeUsage should be reset here.\n    }\n\n    enableAttribs() {\n\n    }\n\n    disableAttribs() {\n\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 0;\n    }\n\n    getVertexAttribPointerOffset(operation) {\n        return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Set extra attrib data in in operation.quads.data/floats/uints, starting from\n        // operation.extraAttribsBufferByteOffset.\n    }\n\n    setupUniforms(operation) {\n        // Set all shader-specific uniforms.\n        // Notice that all uniforms should be set, even if they have not been changed within this shader instance.\n        // The uniforms are shared by all shaders that have the same type (and shader program).\n    }\n\n    _getProjection(operation) {\n        return operation.getProjection();\n    }\n\n    getFlipY(operation) {\n        return this._getProjection(operation)[1] < 0;\n    }\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n    cleanup() {\n        this._initialized = false;\n        // Program takes little resources, so it is only destroyed when the full stage is destroyed.\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../WebGLShader.mjs\";\n\nexport default class DefaultShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            if (pos < length) {\n                gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n            }\n        }\n    }\n\n}\n\nDefaultShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDefaultShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Renderer {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._defaultShader = undefined;\n    }\n\n    gc(aggressive) {\n    }\n\n    destroy() {\n    }\n\n    getDefaultShader(ctx = this.stage.ctx) {\n        if (!this._defaultShader) {\n            this._defaultShader = this._createDefaultShader(ctx);\n        }\n        return this._defaultShader;\n    }\n\n    _createDefaultShader(ctx) {\n    }\n\n    isValidShaderType(shaderType) {\n        return (shaderType.prototype instanceof this._getShaderBaseType());\n    }\n\n    createShader(ctx, settings) {\n        const shaderType = settings.type;\n        // If shader type is not correct, use a different platform.\n        if (!this.isValidShaderType(shaderType)) {\n            const convertedShaderType = this._getShaderAlternative(shaderType);\n            if (!convertedShaderType) {\n                console.warn(\"[Lightning] Shader has no implementation for render target: \" + shaderType.name);\n                return this._createDefaultShader(ctx);\n            }\n            return new convertedShaderType(ctx);\n        } else {\n            const shader = new shaderType(ctx);\n            Base.patchObject(this, settings);\n            return shader;\n        }\n    }\n\n    _getShaderBaseType() {\n    }\n\n    _getShaderAlternative(shaderType) {\n        return this.getDefaultShader();\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        console.warn('[Lightning] copyRenderTexture not supported by renderer');\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport WebGLCoreQuadList from \"./WebGLCoreQuadList.mjs\";\nimport WebGLCoreQuadOperation from \"./WebGLCoreQuadOperation.mjs\";\nimport WebGLCoreRenderExecutor from \"./WebGLCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport WebGLShader from \"./WebGLShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\n\nexport default class WebGLRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n        this.shaderPrograms = new Map();\n        this._compressedTextureExtensions = {\n            astc: stage.gl.getExtension('WEBGL_compressed_texture_astc'),\n            etc1: stage.gl.getExtension('WEBGL_compressed_texture_etc1'),\n            s3tc: stage.gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            pvrtc: stage.gl.getExtension('WEBGL_compressed_texture_pvrtc'),\n        }\n    }\n\n    getCompressedTextureExtensions() {\n        return this._compressedTextureExtensions\n    }\n\n    destroy() {\n        this.shaderPrograms.forEach(shaderProgram => shaderProgram.destroy());\n\n        this.shaderPrograms = null;\n        this._compressedTextureExtensions = null;\n\n        delete this.shaderPrograms;\n        delete this._compressedTextureExtensions;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return WebGLShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getWebGL && shaderType.getWebGL();\n    }\n\n    createCoreQuadList(ctx) {\n        return new WebGLCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new WebGLCoreRenderExecutor(ctx);\n    }\n\n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const gl = this.stage.gl;\n        const glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        glTexture.params = {};\n        glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n        glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };\n\n        // We need a specific framebuffer for every render texture.\n        glTexture.framebuffer = gl.createFramebuffer();\n        glTexture.projection = new Float32Array([2 / w, 2 / h]);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);\n\n        return glTexture;\n    }\n\n    freeRenderTexture(glTexture) {\n        let gl = this.stage.gl;\n        gl.deleteFramebuffer(glTexture.framebuffer);\n        gl.deleteTexture(glTexture);\n    }\n\n    _getBytesPerPixel(fmt, type) {\n        const gl = this.stage.gl;\n\n        if (fmt === gl.RGBA) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 4;\n\n                case gl.UNSIGNED_SHORT_4_4_4_4:\n                    return 2;\n\n                case gl.UNSIGNED_SHORT_5_5_5_1:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGBA format');\n            }\n        }\n        else if (fmt === gl.RGB) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 3;\n\n                case gl.UNSIGNED_BYTE_5_6_5:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGB format');\n            }\n        }\n        else {\n            throw new Error('Invalid format specified in call to _getBytesPerPixel()');\n        }\n    }\n\n    uploadTextureSource(textureSource, options) {\n        const gl = this.stage.gl;\n\n        const source = options.source;\n        let compressed = false;\n        if (options.renderInfo) {\n            compressed = options.renderInfo.compressed || false\n        }\n\n        const format = {\n            premultiplyAlpha: true,\n            hasAlpha: true\n        };\n\n        if (options && options.hasOwnProperty('premultiplyAlpha')) {\n            format.premultiplyAlpha = options.premultiplyAlpha;\n        }\n\n        if (options && options.hasOwnProperty('flipBlueRed')) {\n            format.flipBlueRed = options.flipBlueRed;\n        }\n\n        if (options && options.hasOwnProperty('hasAlpha')) {\n            format.hasAlpha = options.hasAlpha;\n        }\n\n        if (!format.hasAlpha) {\n            format.premultiplyAlpha = false;\n        }\n\n        format.texParams = options.texParams || {}\n        format.texOptions = options.texOptions || {}\n\n        let glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);\n\n        if (Utils.isNode) {\n            gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);\n        }\n\n        const texParams = format.texParams;\n        if (!texParams[gl.TEXTURE_MAG_FILTER]) texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_MIN_FILTER]) texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_WRAP_S]) texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        if (!texParams[gl.TEXTURE_WRAP_T]) texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n\n        Object.keys(texParams).forEach(key => {\n            const value = texParams[key];\n            gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);\n        });\n\n        if (compressed) {\n            this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);\n            return glTexture;\n        }\n         \n        const texOptions = format.texOptions;\n        texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);\n        texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;\n        texOptions.internalFormat = texOptions.internalFormat || texOptions.format;\n        if (options && options.imageRef) {\n            texOptions.imageRef = options.imageRef;\n        }\n        \n        this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);\n        \n        glTexture.params = Utils.cloneObjShallow(texParams);\n        glTexture.options = Utils.cloneObjShallow(texOptions);\n\n        // calculate bytes per pixel for vram usage tracking\n        glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);\n\n        return glTexture;\n    }\n\n    freeTextureSource(textureSource) {\n        this.stage.gl.deleteTexture(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        let offset = (index * 20);\n        const elementCore = quads.quadElements[index];\n\n        let r = elementCore._renderContext;\n\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        const mca = StageUtils.mergeColorAlpha;\n\n        if (r.tb !== 0 || r.tc !== 0) {\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta;\n            floats[offset++] = r.py + elementCore._w * r.tc;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._h * r.td;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        } else {\n            // Simple.\n            let cx = r.px + elementCore._w * r.ta;\n            let cy = r.py + elementCore._h * r.td;\n\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        }\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        let offset = (renderState._renderTextureInfo.offset * 80) / 4;\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        return ((floats[offset] === 0) &&\n            (floats[offset + 1] === 0) &&\n            (floats[offset + 2] === 0) &&\n            (floats[offset + 3] === 0) &&\n            (uints[offset + 4] === 0xFFFFFFFF) &&\n            (floats[offset + 5] === renderTextureInfo.w) &&\n            (floats[offset + 6] === 0) &&\n            (floats[offset + 7] === 1) &&\n            (floats[offset + 8] === 0) &&\n            (uints[offset + 9] === 0xFFFFFFFF) &&\n            (floats[offset + 10] === renderTextureInfo.w) &&\n            (floats[offset + 11] === renderTextureInfo.h) &&\n            (floats[offset + 12] === 1) &&\n            (floats[offset + 13] === 1) &&\n            (uints[offset + 14] === 0xFFFFFFFF) &&\n            (floats[offset + 15] === 0) &&\n            (floats[offset + 16] === renderTextureInfo.h) &&\n            (floats[offset + 17] === 0) &&\n            (floats[offset + 18] === 1) &&\n            (uints[offset + 19] === 0xFFFFFFFF));\n    }\n\n    finishRenderState(renderState) {\n        // Set extra shader attribute data.\n        let offset = renderState.length * 80;\n        for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {\n            renderState.quadOperations[i].extraAttribsDataByteOffset = offset;\n            let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;\n            offset += extra;\n            if (extra) {\n                renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);\n            }\n        }\n        renderState.quads.dataLength = offset;\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        const gl = this.stage.gl;\n        gl.bindTexture(gl.TEXTURE_2D, nativeTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);\n        const precision = renderTexture.precision;\n        gl.copyTexSubImage2D(\n            gl.TEXTURE_2D,\n            0,\n            precision * (options.sx || 0),\n            precision * (options.sy || 0),\n            precision * (options.x || 0),\n            precision * (options.y || 0),\n            precision * (options.w || renderTexture.ow),\n            precision * (options.h || renderTexture.oh));\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class C2dCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this.renderContexts = [];\n        this.modes = [];\n    }\n\n    setRenderContext(index, v) {\n        this.renderContexts[index] = v;\n    }\n\n    setSimpleTc(index, v) {\n        if (v) {\n            this.modes[index] |= 1;\n        } else {\n            this.modes[index] -= (this.modes[index] & 1);\n        }\n    }\n\n    setWhite(index, v) {\n        if (v) {\n            this.modes[index] |= 2;\n        } else {\n            this.modes[index] -= (this.modes[index] & 2);\n        }\n    }\n\n    getRenderContext(index) {\n        return this.renderContexts[index];\n    }\n\n    getSimpleTc(index) {\n        return (this.modes[index] & 1);\n    }\n\n    getWhite(index) {\n        return (this.modes[index] & 2);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class C2dCoreQuadOperation extends CoreQuadOperation {\n\n    getRenderContext(index) {\n        return this.quads.getRenderContext(this.index + index);\n    }\n\n    getSimpleTc(index) {\n        return this.quads.getSimpleTc(this.index + index);\n    }\n\n    getWhite(index) {\n        return this.quads.getWhite(this.index + index);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport Utils from \"../../tree/Utils.mjs\";\n\nexport default class C2dCoreRenderExecutor extends CoreRenderExecutor {\n\n    init() {\n        this._mainRenderTexture = this.ctx.stage.getCanvas();\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            const target = this._renderTexture || this._mainRenderTexture;\n            shader.beforeDraw(op, target);\n            shader.draw(op, target);\n            shader.afterDraw(op, target);\n        }\n    }\n\n    _clearRenderTexture() {\n        const ctx = this._getContext();\n\n        let clearColor = [0, 0, 0, 0];\n        if (this._mainRenderTexture.ctx === ctx) {\n            clearColor = this.ctx.stage.getClearColor();\n        }\n\n        const renderTexture = ctx.canvas;\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {\n            ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);\n        } else {\n            ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);\n            // Do not use fillRect because it produces artifacts.\n            ctx.globalCompositeOperation = 'copy';\n            ctx.beginPath();\n            ctx.rect(0, 0, renderTexture.width, renderTexture.height);\n            ctx.closePath();\n            ctx.fill();\n            ctx.globalCompositeOperation = 'source-over';\n        }\n    }\n    \n    _getContext() {\n        if (this._renderTexture) {\n            return this._renderTexture.ctx;\n        } else {\n            return this._mainRenderTexture.ctx;\n        } \n    }\n\n    _restoreContext() {\n        const ctx = this._getContext();\n        ctx.restore();\n        ctx.save();\n        ctx._scissor = null;\n    }\n\n    _setScissor(area) {\n        const ctx = this._getContext();\n\n        if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {\n            // Clipping is stored in the canvas context state.\n            // We can't reset clipping alone so we need to restore the full context.\n            this._restoreContext();\n\n            let precision = this.ctx.stage.getRenderPrecision();\n            if (area) {\n                ctx.beginPath();\n                ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n                ctx.closePath();\n                ctx.clip();\n            }\n            ctx._scissor = area;\n        }\n    }\n\n    static _equalScissorAreas(canvas, area, current) {\n        if (!area) {\n            area = [0, 0, canvas.width, canvas.height]\n        }\n        if (!current) {\n            current = [0, 0, canvas.width, canvas.height]\n        }\n        return Utils.equalValues(area, current)\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class C2dShader extends Shader {\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dShader from \"../C2dShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class DefaultShader extends C2dShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;\n        this._tintManager = this.ctx.stage.renderer.tintManager;\n    }\n\n    draw(operation, target) {\n        const ctx = target.ctx;\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            const tx = operation.getTexture(i);\n            const vc = operation.getElementCore(i);\n            const rc = operation.getRenderContext(i);\n            const white = operation.getWhite(i);\n            const stc = operation.getSimpleTc(i);\n\n            //@todo: try to optimize out per-draw transform setting. split translate, transform.\n            const precision = this.ctx.stage.getRenderPrecision();\n            ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);\n\n            const rect = (tx === this._rectangleTexture);\n            const info = {operation, target, index: i, rect};\n\n            if (rect) {\n                // Check for gradient.\n                if (white) {\n                    ctx.fillStyle = 'white';\n                } else {\n                    this._setColorGradient(ctx, vc);\n                }\n\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n                ctx.fillRect(0, 0, vc.w, vc.h);\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            } else {\n                // @todo: set image smoothing based on the texture.\n\n                // @todo: optimize by registering whether identity texcoords are used.\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n\n                // @todo: test if rounding yields better performance.\n\n                // Notice that simple texture coords can be turned on even though vc._ulx etc are not simple, because\n                //  we are rendering a render-to-texture (texcoords were stashed). Same is true for 'white' color btw.\n                const sourceX = stc ? 0 : (vc._ulx * tx.w);\n                const sourceY = stc ? 0 : (vc._uly * tx.h);\n                const sourceW = (stc ? 1 : (vc._brx - vc._ulx)) * tx.w;\n                const sourceH = (stc ? 1 : (vc._bry - vc._uly)) * tx.h;\n\n                let colorize = !white;\n                if (colorize) {\n                    // @todo: cache the tint texture for better performance.\n\n                    // Draw to intermediate texture with background color/gradient.\n                    // This prevents us from having to create a lot of render texture canvases.\n\n                    // Notice that we don't support (non-rect) gradients, only color tinting for c2d. We'll just take the average color.\n                    let color = vc._colorUl;\n                    if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {\n                        color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);\n                    }\n\n                    const alpha = ((color / 16777216) | 0) / 255.0;\n                    ctx.globalAlpha *= alpha;\n\n                    const rgb = color & 0x00FFFFFF;\n                    const tintTexture = this._tintManager.getTintTexture(tx, rgb);\n\n                    // Actually draw result.\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                } else {\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                }\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            }\n        }\n    }\n\n    _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {\n        let color = vc._colorUl;\n        let gradient;\n        //@todo: quick single color check.\n        //@todo: cache gradient/fill style (if possible, probably context-specific).\n\n        if (vc._colorUl === vc._colorUr) {\n            if (vc._colorBl === vc._colorBr) {\n                if (vc._colorUl === vc.colorBl) {\n                    // Single color.\n                } else {\n                    // Vertical gradient.\n                    gradient = ctx.createLinearGradient(0, 0, 0, h);\n                    if (transparency) {\n                        gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));\n                    } else {\n                        gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));\n\n                    }\n                }\n            } else {\n                // Not supported gradient.\n            }\n        } else {\n            if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {\n                // Horizontal gradient.\n                gradient = ctx.createLinearGradient(0, 0, w, 0);\n                if (transparency) {\n                    gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));\n                } else {\n                    gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));\n                }\n            }\n        }\n\n        if (gradient) {\n            ctx.fillStyle = gradient;\n        } else {\n            ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);\n        }\n    }\n\n    _beforeDrawEl(info) {\n    }\n\n    _afterDrawEl(info) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class C2dTextureTintManager {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._usedMemory = 0;\n        this._cachedNativeTextures = new Set();\n    }\n\n    destroy() {\n        this.gc(true);\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n\n        this.stage.addMemoryUsage(delta);\n    }\n\n    delete(nativeTexture) {\n        // Should be called when native texture is cleaned up.\n        if (this._hasCache(nativeTexture)) {\n            const cache = this._getCache(nativeTexture);\n            const prevMemUsage = cache.memoryUsage;\n            cache.clear();\n            this._cachedNativeTextures.delete(nativeTexture);\n            this._addMemoryUsage(cache.memoryUsage - prevMemUsage);\n        }\n    }\n\n    getTintTexture(nativeTexture, color) {\n        const frame = this.stage.frameCounter;\n\n        this._cachedNativeTextures.add(nativeTexture);\n\n        const cache = this._getCache(nativeTexture);\n\n        const item = cache.get(color);\n        item.lf = frame;\n\n        if (item.tx) {\n            if (nativeTexture.update > item.u) {\n                // Native texture was updated in the mean time: renew.\n                this._tintTexture(item.tx, nativeTexture, color)\n            }\n\n            return item.tx;\n        } else {\n            const before = cache.memoryUsage;\n\n            // Find blanco tint texture.\n            let target = cache.reuseTexture(frame);\n            if (target) {\n                target.ctx.clearRect(0, 0, target.width, target.height);\n            } else {\n                // Allocate new.\n                target = document.createElement('canvas');\n                target.width = nativeTexture.w;\n                target.height = nativeTexture.h;\n                target.ctx = target.getContext('2d');\n            }\n\n            this._tintTexture(target, nativeTexture, color);\n            cache.set(color, target, frame);\n\n            const after = cache.memoryUsage;\n\n            if (after !== before) {\n                this._addMemoryUsage(after - before);\n            }\n\n            return target;\n        }\n    }\n\n    _tintTexture(target, source, color) {\n        let col = color.toString(16);\n        while (col.length < 6) {\n            col = \"0\" + col;\n        }\n        target.ctx.fillStyle = '#' + col;\n        target.ctx.globalCompositeOperation = 'copy';\n        target.ctx.fillRect(0, 0, source.w, source.h);\n        target.ctx.globalCompositeOperation = 'multiply';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n\n        // Alpha-mix the texture.\n        target.ctx.globalCompositeOperation = 'destination-in';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n    }\n\n    _hasCache(nativeTexture) {\n        return !!nativeTexture._tintCache;\n    }\n\n    _getCache(nativeTexture) {\n        if (!nativeTexture._tintCache) {\n            nativeTexture._tintCache = new C2dTintCache(nativeTexture);\n        }\n        return nativeTexture._tintCache;\n    }\n\n    gc(aggressive = false) {\n        const frame = this.stage.frameCounter;\n        let delta = 0;\n        this._cachedNativeTextures.forEach(texture => {\n            const cache = this._getCache(texture);\n            if (aggressive) {\n                delta += cache.memoryUsage;\n                cache.clear();\n            } else {\n                const before = cache.memoryUsage;\n                cache.cleanup(frame);\n                cache.releaseBlancoTextures();\n                delta += (cache.memoryUsage - before);\n            }\n        });\n\n        if (aggressive) {\n            this._cachedNativeTextures.clear();\n        }\n\n        if (delta) {\n            this._addMemoryUsage(delta);\n        }\n    }\n\n}\n\nclass C2dTintCache {\n\n    constructor(nativeTexture) {\n        this._tx = nativeTexture;\n        this._colors = new Map();\n        this._blancoTextures = null;\n        this._lastCleanupFrame = 0;\n        this._memTextures = 0;\n    }\n\n    get memoryUsage() {\n        return this._memTextures * this._tx.w * this._tx.h;\n    }\n\n    releaseBlancoTextures() {\n        this._memTextures -= this._blancoTextures.length;\n        this._blancoTextures = [];\n    }\n\n    clear() {\n        // Dereference the textures.\n        this._blancoTextures = null;\n        this._colors.clear();\n        this._memTextures = 0;\n    }\n\n    get(color) {\n        let item = this._colors.get(color);\n        if (!item) {\n            item = {lf: -1, tx: undefined, u: -1};\n            this._colors.set(color, item);\n        }\n        return item;\n    }\n\n    set(color, texture, frame) {\n        const item = this.get(color);\n        item.lf = frame;\n        item.tx = texture;\n        item.u = frame;\n        this._memTextures++;\n    }\n\n    cleanup(frame) {\n        // We only need to clean up once per frame.\n        if (this._lastCleanupFrame !== frame) {\n\n            // We limit blanco textures reuse to one frame only to prevent memory usage growth.\n            this._blancoTextures = [];\n\n            this._colors.forEach((item, color) => {\n                // Clean up entries that were not used last frame.\n                if (item.lf < frame - 1) {\n                    if (item.tx) {\n                        // Keep as reusable blanco texture.\n                        this._blancoTextures.push(item.tx);\n                    }\n                    this._colors.delete(color);\n                }\n            });\n\n            this._lastCleanupFrame = frame;\n        }\n    }\n\n    reuseTexture(frame) {\n        // Try to reuse textures, because creating them every frame is expensive.\n        this.cleanup(frame);\n        if (this._blancoTextures && this._blancoTextures.length) {\n            this._memTextures--;\n            return this._blancoTextures.pop();\n        }\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dCoreQuadList from \"./C2dCoreQuadList.mjs\";\nimport C2dCoreQuadOperation from \"./C2dCoreQuadOperation.mjs\";\nimport C2dCoreRenderExecutor from \"./C2dCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport C2dShader from \"./C2dShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\nimport TextureTintManager from \"./C2dTextureTintManager.mjs\";\n\nexport default class C2dRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n\n        this.tintManager = new TextureTintManager(stage);\n\n        this.setupC2d(this.stage.c2d.canvas);\n    }\n\n    destroy() {\n        this.tintManager.destroy();\n\n        this.tintManager = null;\n        delete this.tintManager;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return C2dShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getC2d && shaderType.getC2d();\n    }\n\n    createCoreQuadList(ctx) {\n        return new C2dCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new C2dCoreRenderExecutor(ctx);\n    }\n    \n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const canvas = document.createElement('canvas');\n        canvas.width = pw;\n        canvas.height = ph;\n        this.setupC2d(canvas);\n        return canvas;\n    }\n    \n    freeRenderTexture(nativeTexture) {\n        this.tintManager.delete(nativeTexture);\n    }\n\n    gc(aggressive) {\n        this.tintManager.gc(aggressive);\n    }\n\n    uploadTextureSource(textureSource, options) {\n        // For canvas, we do not need to upload.\n        if (options.source.buffer) {\n            // Convert RGBA buffer to canvas.\n            const canvas = document.createElement('canvas');\n            canvas.width = options.w;\n            canvas.height = options.h;\n\n            const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);\n            canvas.getContext('2d').putImageData(imageData, 0, 0);\n            return canvas;\n        }\n\n        return options.source;\n    }\n\n    freeTextureSource(textureSource) {\n        this.tintManager.delete(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        // Render context changes while traversing so we save it by ref.\n        const elementCore = quads.quadElements[index];\n        quads.setRenderContext(index, elementCore._renderContext);\n        quads.setWhite(index, elementCore.isWhite());\n        quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        // @todo: check render coords/matrix, maybe move this to core?\n        return false;\n    }\n\n    finishRenderState(renderState) {\n    }\n\n    setupC2d(canvas) {\n        const ctx = canvas.getContext('2d');\n        canvas.ctx = ctx;\n\n        ctx._scissor = null;\n\n        // Save base state so we can restore the defaults later.\n        canvas.ctx.save();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../../webgl/WebGLShader.mjs\";\n\nexport default class SparkShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    if (glTexture.options && glTexture.options.imageRef) {\n                        let elementPostion = (i > 0) ? (i - 1) : i;\n                        const precision = this.ctx.stage.getOption('precision');\n                        let vc = operation.getElementCore(elementPostion);\n                        this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                    } else {\n                        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                        gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    }\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            if (pos < length) {\n                if (glTexture.options && glTexture.options.imageRef) {\n                    const precision = this.ctx.stage.getOption('precision');\n                    let vc = operation.getElementCore(pos);\n                    this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                } else {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                }\n            }\n        }\n    }\n\n}\n\nSparkShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nSparkShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLRenderer from \"../webgl/WebGLRenderer.mjs\";\nimport SparkShader from \"./shaders/SparkShader.mjs\";\n\nexport default class SparkRenderer extends WebGLRenderer {\n\n    constructor(stage) {\n        super(stage);\n    }\n\n    _createDefaultShader(ctx) {\n        return new SparkShader(ctx);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        global.beginDrawing();\n        let ret = super.createCoreRenderExecutor(ctx);\n        global.endDrawing();\n        return ret;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ImageWorker {\n\n    constructor(options = {}) {\n        this._items = new Map();\n        this._id = 0;\n\n        this._initWorker();\n    }\n\n    destroy() {\n        if (this._worker) {\n            this._worker.terminate();\n        }\n\n        this._items = null;\n        this._worker = null;\n\n        delete this._items;\n        delete this._worker;        \n    }\n\n    _initWorker() {\n        const code = `(${createWorker.toString()})()`;\n        const blob = new Blob([code.replace('\"use strict\";', '')]); // firefox adds \"use strict\"; to any function which might block worker execution so knock it off\n        const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {\n            type: 'application/javascript; charset=utf-8'\n        });\n        this._worker = new Worker(blobURL);\n\n        this._worker.postMessage({type: 'config', config: {path: window.location.href, protocol: window.location.protocol}});\n\n        this._worker.onmessage = (e) => {\n            if (e.data && e.data.id) {\n                const id = e.data.id;\n                const item = this._items.get(id);\n                if (item) {\n                    if (e.data.type == 'data') {\n                        this.finish(item, e.data.info);\n                    } else {\n                        this.error(item, e.data.info);\n                    }\n                }\n            }\n        }\n    }\n\n    create(src) {\n        const id = ++this._id;\n        const item = new ImageWorkerImage(this, id, src);\n        this._items.set(id, item);\n        this._worker.postMessage({type: \"add\", id: id, src: src});\n        return item;\n    }\n\n    cancel(image) {\n        this._worker.postMessage({type: \"cancel\", id: image.id});\n        this._items.delete(image.id);\n    }\n\n    error(image, info) {\n        image.error(info);\n        this._items.delete(image.id);\n    }\n\n    finish(image, info) {\n        image.load(info);\n        this._items.delete(image.id);\n    }\n\n}\n\nclass ImageWorkerImage {\n\n    constructor(manager, id, src) {\n        this._manager = manager;\n        this._id = id;\n        this._src = src;\n        this._onError = null;\n        this._onLoad = null;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set onError(f) {\n        this._onError = f;\n    }\n\n    set onLoad(f) {\n        this._onLoad = f;\n    }\n\n    cancel() {\n        this._manager.cancel(this);\n    }\n\n    load(info) {\n        if (this._onLoad) {\n            this._onLoad(info);\n        }\n    }\n\n    error(info) {\n        if (this._onError) {\n            this._onError(info);\n        }\n    }\n\n}\n\n/**\n * Notice that, within the createWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as\n *  the converted code of this section is converted to a blob and used as the js of the web worker thread.\n */\nconst createWorker = function() {\n\n    function ImageWorkerServer() {\n\n        this.items = new Map();\n\n        var t = this;\n        onmessage = function(e) {\n            t._receiveMessage(e);\n        }\n\n    }\n\n    ImageWorkerServer.isPathAbsolute = function(path) {\n        return /^(?:\\/|[a-z]+:\\/\\/)/.test(path) || path.substr(0, 5) == 'data:';\n    };\n\n    ImageWorkerServer.prototype._receiveMessage = function(e) {\n        if (e.data.type === 'config') {\n            this.config = e.data.config;\n\n            var base = this.config.path;\n            // the constructing of the basepath fails\n            // if location.hash contains a slash\n            var hasHashPath = /#.*?\\//;\n            if(hasHashPath.test(base)){\n                base = base.replace(/#.*$/,'');\n            }\n\n            var parts = base.split(\"/\");\n            parts.pop();\n            this._relativeBase = parts.join(\"/\") + \"/\";\n\n        } else if (e.data.type === 'add') {\n            this.add(e.data.id, e.data.src);\n        } else if (e.data.type === 'cancel') {\n            this.cancel(e.data.id);\n        }\n    };\n\n    ImageWorkerServer.prototype.add = function(id, src) {\n        // Convert relative URLs.\n        if (!ImageWorkerServer.isPathAbsolute(src)) {\n            src = this._relativeBase + src;\n        }\n\n        if (src.substr(0,2) === \"//\") {\n            // This doesn't work for image workers.\n            src = this.config.protocol + src;\n        }\n\n        var item = new ImageWorkerServerItem(id, src);\n        var t = this;\n        item.onFinish = function(result) {\n            t.finish(item, result);\n        };\n        item.onError = function(info) {\n            t.error(item, info);\n        };\n        this.items.set(id, item);\n        item.start();\n    };\n\n    ImageWorkerServer.prototype.cancel = function(id) {\n        var item = this.items.get(id);\n        if (item) {\n            item.cancel();\n            this.items.delete(id);\n        }\n    }\n\n    ImageWorkerServer.prototype.finish = function(item, {imageBitmap, hasAlphaChannel}) {\n        postMessage({\n            type: \"data\",\n            id: item.id,\n            info: {\n                imageBitmap,\n                hasAlphaChannel\n            }\n        }, [imageBitmap]);\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.prototype.error = function(item, {type, message}) {\n        postMessage({\n            type: \"error\",\n            id: item.id,\n            info: {\n                type,\n                message\n            }\n        });\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.isWPEBrowser = function() {\n        return (navigator.userAgent.indexOf(\"WPE\") !== -1);\n    };\n\n    function ImageWorkerServerItem(id, src) {\n\n        this._onError = undefined;\n        this._onFinish = undefined;\n        this._id = id;\n        this._src = src;\n        this._xhr = undefined;\n        this._mimeType = undefined;\n        this._canceled = false;\n\n    }\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'id', {\n        get: function() {\n            return this._id;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onFinish', {\n        get: function() {\n            return this._onFinish;\n        },\n        set: function(f) {\n            this._onFinish = f;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onError', {\n        get: function() {\n            return this._onError;\n        },\n        set: function(f) {\n            this._onError = f;\n        }\n    });\n\n    ImageWorkerServerItem.prototype.start = function() {\n        this._xhr = new XMLHttpRequest();\n        this._xhr.open(\"GET\", this._src, true);\n        this._xhr.responseType = \"blob\";\n\n        var t = this;\n        this._xhr.onerror = function(oEvent) {\n            t.error({type: \"connection\", message: \"Connection error\"});\n        };\n\n        this._xhr.onload = function(oEvent) {\n            var blob = t._xhr.response;\n            t._mimeType = blob.type;\n\n            t._createImageBitmap(blob);\n        };\n\n        this._xhr.send();\n    };\n\n    ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {\n        var t = this;\n        createImageBitmap(blob, {premultiplyAlpha: 'premultiply', colorSpaceConversion: 'none', imageOrientation: 'none'}).then(function(imageBitmap) {\n            t.finish({\n                imageBitmap,\n                hasAlphaChannel: t._hasAlphaChannel()\n            });\n        }).catch(function(e) {\n            t.error({type: \"parse\", message: \"Error parsing image data\"});\n        });\n    };\n\n    ImageWorkerServerItem.prototype._hasAlphaChannel = function() {\n        if (ImageWorkerServer.isWPEBrowser()) {\n            // When using unaccelerated rendering image (https://github.com/WebPlatformForEmbedded/WPEWebKit/blob/wpe-20170728/Source/WebCore/html/ImageBitmap.cpp#L52),\n            // everything including JPG images are in RGBA format. Upload is way faster when using an alpha channel.\n            // @todo: after hardware acceleration is fixed and re-enabled, JPG should be uploaded in RGB to get the best possible performance and memory usage.\n            return true;\n        } else {\n            return (this._mimeType.indexOf(\"image/png\") !== -1);\n        }\n    };\n\n    ImageWorkerServerItem.prototype.cancel = function() {\n        if (this._canceled) return;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n        this._canceled = true;\n    };\n\n    ImageWorkerServerItem.prototype.error = function(type, message) {\n        if (!this._canceled && this._onError) {\n            this._onError({type, message});\n        }\n    };\n\n    ImageWorkerServerItem.prototype.finish = function(info) {\n        if (!this._canceled && this._onFinish) {\n            this._onFinish(info);\n        }\n    };\n\n    var worker = new ImageWorkerServer();\n};\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport ImageWorker from \"./ImageWorker.mjs\";\n\n/**\n * Platform-specific functionality.\n */\nexport default class WebPlatform {\n\n    init(stage) {\n        this.stage = stage;\n        this._looping = false;\n        this._awaitingLoop = false;\n\n        // Alternative handler to avoid RAF when idle\n        this._loopHandler = null;\n        this._idleLoopCounter = 0;\n        this._idleLoopDelay = 60;\n\n        if (this.stage.getOption(\"useImageWorker\")) {\n            if (!window.createImageBitmap || !window.Worker) {\n                console.warn(\"[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support\");\n            } else {\n                this._imageWorker = new ImageWorker();\n            }\n        }\n\n        this._registerVisibilityChangeHandler();\n    }\n\n    destroy() {\n        if (this._imageWorker) {\n            this._imageWorker.destroy();\n        }\n\n        clearInterval(this._loopHandler);\n\n        this._removeKeyHandler();\n        this._removeClickHandler();\n        this._removeHoverHandler();\n        this._removeScrollWheelHandler();\n        this._removeVisibilityChangeHandler();\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    startLoop() {\n        this._looping = true;\n        if (!this._awaitingLoop) {\n            this.loop();\n        }\n    }\n\n    stopLoop() {\n        this._looping = false;\n    }\n\n    switchLoop() {\n        if (this._idleLoopCounter < this._idleLoopDelay) {\n            this._idleLoopCounter++;\n            return;\n        }\n        if (!this.stage.ctx.hasRenderUpdates()) {\n            this.stopLoop();\n            this._loopHandler = setInterval(() => {\n                this.stage.updateFrame();\n                this.stage.idleFrame();\n                if (this.stage.ctx.hasRenderUpdates()) {\n                    clearInterval(this._loopHandler);\n                    this.startLoop();\n                };\n            }, 1000 / 60);\n        } else {\n            this._idleLoopCounter = 0;\n        }\n    }\n\n    loop() {\n        let self = this;\n        let lp = function () {\n            self._awaitingLoop = false;\n            if (self._looping) {\n                self.stage.updateFrame();\n                if (self.stage.getOption(\"pauseRafLoopOnIdle\")) {\n                    self.switchLoop();\n                }\n                self.stage.renderFrame();\n                requestAnimationFrame(lp);\n                self._awaitingLoop = true;\n            }\n        }\n        requestAnimationFrame(lp);\n    }\n\n    uploadCompressedGlTexture(gl, textureSource, source, options) {\n        const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];\n        gl.compressedTexImage2D(\n            gl.TEXTURE_2D,\n            0,\n            source.glInternalFormat,\n            source.pixelWidth,\n            source.pixelHeight,\n            0,\n            view,\n        )\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n\n    uploadGlTexture(gl, textureSource, source, options) {\n        if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || (window.ImageBitmap && source instanceof ImageBitmap)) {\n            // Web-specific data types.\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n        } else if (source instanceof HTMLCanvasElement) {\n            if (Utils.isZiggo || this.stage.getOption(\"forceTxCanvasSource\")) {\n                // Ziggo EOS and Selene have issues with getImageData implementation causing artifacts.\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n            } else if (source.width > 0 && source.height > 0) {\n                // Workaround for some browsers (e.g. Tizen) as they do not convert canvas data to texture correctly, sometimes causing artifacts.\n                // Width/Height check added because of https://github.com/rdkcentral/Lightning/issues/412\n                const ctx = source.getContext('2d');\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);\n        }\n    }\n\n    /**\n     * KTX File format specification\n     * https://www.khronos.org/registry/KTX/specs/1.0/ktxspec_v1.html\n     **/\n    handleKtxLoad(cb, src) {\n        var self = this;\n        return function () {\n            var arraybuffer = this.response;\n            var view = new DataView(arraybuffer);\n\n            // identifier, big endian\n            var targetIdentifier = 3632701469\n            if (targetIdentifier !== (view.getUint32(0) + view.getUint32(4) + view.getUint32(8))) {\n                cb('Parsing failed: identifier ktx mismatch:', src)\n            }\n\n            var littleEndian = (view.getUint32(12) === 16909060) ? true : false;\n            var data = {\n                glType: view.getUint32(16, littleEndian),\n                glTypeSize: view.getUint32(20, littleEndian),\n                glFormat: view.getUint32(24, littleEndian),\n                glInternalFormat: view.getUint32(28, littleEndian),\n                glBaseInternalFormat: view.getUint32(32, littleEndian),\n                pixelWidth: view.getUint32(36, littleEndian),\n                pixelHeight: view.getUint32(40, littleEndian),\n                pixelDepth: view.getUint32(44, littleEndian),\n                numberOfArrayElements: view.getUint32(48, littleEndian),\n                numberOfFaces: view.getUint32(52, littleEndian),\n                numberOfMipmapLevels: view.getUint32(56, littleEndian),\n                bytesOfKeyValueData: view.getUint32(60, littleEndian),\n                kvps: [],\n                mipmaps: [],\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            const props = (obj) => {\n                const p = [];\n                for (let v in obj) {\n                    p.push(obj[v]);\n                }\n                return p;\n            }\n\n            const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions())\n                .filter((obj) => obj != null)\n                .map((obj) => props(obj))\n                .reduce((prev, current) => prev.concat(current));\n\n            if (!formats.includes(data.glInternalFormat)) {\n                console.warn(\"[Lightning] Unrecognized texture extension format:\", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());\n            }\n\n            var offset = 64\n            // Key Value Pairs of data start at byte offset 64\n            // But the only known kvp is the API version, so skipping parsing.\n            offset += data.bytesOfKeyValueData;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                var imageSize = view.getUint32(offset);\n                offset += 4;\n                data.mipmaps.push(view.buffer.slice(offset, imageSize));\n                offset += imageSize\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    handlePvrLoad(cb, src) {\n        return function () {\n            // pvr header length in 32 bits\n            const pvrHeaderLength = 13;\n            // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\n            const pvrFormatEtc1 = 0x8D64;\n            const pvrWidth = 7;\n            const pvrHeight = 6;\n            const pvrMipmapCount = 11;\n            const pvrMetadata = 12;\n            const arrayBuffer = this.response;\n            const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\n            const dataOffset = header[pvrMetadata] + 52;\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n\n            var data = {\n                glInternalFormat: pvrFormatEtc1,\n                pixelWidth: header[pvrWidth],\n                pixelHeight: header[pvrHeight],\n                numberOfMipmapLevels: header[pvrMipmapCount],\n                mipmaps: [],\n                pvr: true,\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            let offset = 0\n            let width = data.pixelWidth;\n            let height = data.pixelHeight;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n                const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\n                data.mipmaps.push(view);\n                offset += level;\n                width = width >> 1;\n                height = height >> 1;\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    loadSrcTexture({ src, hasAlpha }, cb) {\n        let cancelCb = undefined;\n        let isPng = (src.indexOf(\".png\") >= 0) || src.substr(0, 21) == 'data:image/png;base64';\n        let isKtx = src.indexOf('.ktx') >= 0;\n        let isPvr = src.indexOf('.pvr') >= 0;\n        if (isKtx || isPvr) {\n            let request = new XMLHttpRequest();\n            request.addEventListener(\n                \"load\", isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)\n            );\n            request.open(\"GET\", src);\n            request.responseType = \"arraybuffer\";\n            request.send();\n            cancelCb = function () {\n                request.abort();\n            }\n        } else if (this._imageWorker) {\n            // WPE-specific image parser.\n            const image = this._imageWorker.create(src);\n            image.onError = function (err) {\n                return cb(\"Image load error\");\n            };\n            image.onLoad = function ({ imageBitmap, hasAlphaChannel }) {\n                cb(null, {\n                    source: imageBitmap,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: hasAlphaChannel,\n                    premultiplyAlpha: true\n                });\n            };\n            cancelCb = function () {\n                image.cancel();\n            }\n        } else {\n            let image = new Image();\n\n            // On the PS4 platform setting the `crossOrigin` attribute on\n            // images can cause CORS failures.\n            if (!(src.substr(0, 5) == \"data:\") && !Utils.isPS4) {\n                // Base64.\n                image.crossOrigin = \"Anonymous\";\n            }\n            image.onerror = function (err) {\n                // Ignore error message when cancelled.\n                if (image.src) {\n                    return cb(\"Image load error\");\n                }\n            };\n            image.onload = function () {\n                cb(null, {\n                    source: image,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: isPng || hasAlpha\n                });\n            };\n            image.src = src;\n\n            cancelCb = function () {\n                image.onerror = null;\n                image.onload = null;\n                image.removeAttribute('src');\n            }\n        }\n\n        return cancelCb;\n    }\n\n    createWebGLContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let opts = {\n            alpha: true,\n            antialias: false,\n            premultipliedAlpha: true,\n            stencil: true,\n            preserveDrawingBuffer: false\n        };\n\n        let gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts);\n        if (!gl) {\n            throw new Error('This browser does not support webGL.');\n        }\n\n        return gl;\n    }\n\n    createCanvasContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let c2d = canvas.getContext('2d');\n        if (!c2d) {\n            throw new Error('This browser does not support 2d canvas.');\n        }\n\n        return c2d;\n    }\n\n    getHrTime() {\n        return window.performance ? window.performance.now() : (new Date()).getTime();\n    }\n\n    getDrawingCanvas() {\n        // We can't reuse this canvas because textures may load async.\n        return document.createElement('canvas');\n    }\n\n    getTextureOptionsForDrawingCanvas(canvas) {\n        let options = {};\n        options.source = canvas;\n        return options;\n    }\n\n    nextFrame(changes) {\n        /* WebGL blits automatically */\n    }\n\n    registerKeydownHandler(keyhandler) {\n        this._keydownListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keydown', this._keydownListener);\n    }\n\n    registerKeyupHandler(keyhandler) {\n        this._keyupListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keyup', this._keyupListener);\n    }\n\n    _removeKeyHandler() {\n        if (this._keydownListener) {\n            window.removeEventListener('keydown', this._keydownListener);\n        }\n\n        if (this._keyupListener) {\n            window.removeEventListener('keyup', this._keyupListener);\n        }\n    }\n\n    registerClickHandler(clickHandler) {\n        this._clickListener = e => {\n            clickHandler(e);\n        };\n        window.addEventListener('mousedown', this._clickListener);\n    }\n\n    _removeClickHandler() {\n        if (this._clickListener) {\n            window.removeEventListener('mousedown', this._clickListener);\n        }\n    }\n\n    registerHoverHandler(hoverHandler) {\n        this._hoverListener = e => {\n            hoverHandler(e);\n        };\n        window.addEventListener('mousemove', this._hoverListener);\n    }\n\n    _removeHoverHandler() {\n        if (this._hoverListener) {\n            window.removeEventListener('mousemove', this._hoverListener);\n        }\n    }\n\n    registerScrollWheelHandler(registerScrollWheelHandler) {\n        this._scrollWheelListener = e => {\n            registerScrollWheelHandler(e);\n        }\n        window.addEventListener('wheel', this._scrollWheelListener);\n    }\n\n    _removeScrollWheelHandler() {\n        if (this._scrollWheelListener) {\n            window.removeEventListener('wheel', this._scrollWheelListener);\n        }\n    }\n\n    /**\n     * Fix for issue reported at: https://github.com/WebPlatformForEmbedded/WPEWebKit/issues/882\n     */\n    _registerVisibilityChangeHandler() {\n        this._visibilityChangeHandler = () => {\n            if (document.visibilityState === 'visible') {\n                this.stage.root.core.setHasRenderUpdates(2);\n                this.stage.renderFrame();\n            }\n        }\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler);\n    }\n\n    _removeVisibilityChangeHandler() {\n        if (this._visibilityChangeHandler) {\n            document.removeEventListener('visibilitychange', this._visibilityChangeHandler);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebPlatform from \"./browser/WebPlatform.mjs\";\n\nexport default class PlatformLoader {\n    static load(options) {\n        if (options.platform) {\n            return options.platform;\n        } else {\n            return WebPlatform;\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value == 'string';\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2)\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2)\n        } else {\n            return v1 === v2\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n}\n\n/**\n * Maintains the state of a WebGLRenderingContext.\n */\nclass WebGLState {\n\n    constructor(id, gl) {\n        this._id = id;\n        this._gl = gl;\n        this._program = undefined;\n        this._buffers = new Map();\n        this._framebuffers = new Map();\n        this._renderbuffers = new Map();\n\n        // Contains vertex attribute definition arrays (enabled, size, type, normalized, stride, offset).\n        this._vertexAttribs = new Array(16);\n        this._nonDefaultFlags = new Set();\n        this._settings = new Map();\n        this._textures = new Array(8);\n        this._maxTexture = 0;\n        this._activeTexture = gl.TEXTURE0;\n        this._pixelStorei = new Array(5);\n    }\n\n    _getDefaultFlag(cap) {\n        return (cap === this._gl.DITHER);\n    }\n\n    setFlag(cap, v) {\n        const def = this._getDefaultFlag(cap);\n        if (v === def) {\n            return this._nonDefaultFlags.delete(cap);\n        } else {\n            if (!this._nonDefaultFlags.has(cap)) {\n                this._nonDefaultFlags.add(cap);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    setBuffer(target, buffer) {\n        const change = this._buffers.get(target) !== buffer;\n        this._buffers.set(target, buffer);\n\n        if (change && (target === this._gl.ARRAY_BUFFER)) {\n            // When the array buffer is changed all attributes are cleared.\n            this._vertexAttribs = [];\n        }\n\n        return change;\n    }\n\n    setFramebuffer(target, buffer) {\n        const change = this._framebuffers.get(target) !== buffer;\n        this._framebuffers.set(target, buffer);\n        return change;\n    }\n\n    setRenderbuffer(target, buffer) {\n        const change = this._renderbuffers.get(target) !== buffer;\n        this._renderbuffers.set(target, buffer);\n        return change;\n    }\n\n    setProgram(program) {\n        const change = this._program !== program;\n        this._program = program;\n        return change\n    }\n\n    setSetting(func, v) {\n        const s = this._settings.get(func);\n        const change = !s || !Utils.equalValues(s, v);\n        this._settings.set(func, v);\n        return change\n    }\n\n    disableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va && va[5]) {\n            va[5] = false;\n            return true;\n        }\n        return false;\n    }\n\n    enableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va) {\n            if (!va[0]) {\n                va[0] = true;\n                return true;\n            }\n        } else {\n            this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];\n            return true;\n        }\n        return false;\n    }\n\n    vertexAttribPointer(index, props) {\n        let va = this._vertexAttribs[index];\n        let equal = false;\n        if (va) {\n            equal = va[0] === props[0] &&\n                va[1] === props[1] &&\n                va[2] === props[2] &&\n                va[3] === props[3] &&\n                va[4] === props[4];\n        }\n\n        if (equal) {\n            return false;\n        } else {\n            props[5] = va ? va[5] : false;\n            return true;\n        }\n    }\n\n    setActiveTexture(texture) {\n        const changed = this._activeTexture !== texture;\n        this._activeTexture = texture;\n        return changed;\n    }\n\n    bindTexture(target, texture) {\n        const activeIndex = WebGLState._getTextureIndex(this._activeTexture);\n        this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);\n        const current = this._textures[activeIndex];\n        const targetIndex = WebGLState._getTextureTargetIndex(target);\n        if (current) {\n            if (current[targetIndex] === texture) {\n                return false;\n            }\n            current[targetIndex] = texture;\n            return true;\n        } else {\n            if (texture) {\n                this._textures[activeIndex] = [];\n                this._textures[activeIndex][targetIndex] = texture;\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n\n    setPixelStorei(pname, param) {\n        const i = WebGLState._getPixelStoreiIndex(pname);\n        const change = !Utils.equalValues(this._pixelStorei[i], param);\n        this._pixelStorei[i] = param;\n        return change;\n    }\n\n    migrate(s) {\n        const t = this;\n\n        // Warning: migrate should call the original prototype methods directly.\n\n        this._migrateFlags(t, s);\n\n        // useProgram\n        if (s._program !== t._program) {\n            this._gl._useProgram(s._program);\n        }\n\n        this._migrateFramebuffers(t, s);\n        this._migrateRenderbuffers(t, s);\n\n        const buffersChanged = this._migrateBuffers(t, s);\n        this._migrateAttributes(t, s, buffersChanged);\n\n        this._migrateFlags(t, s);\n\n        this._migrateSettings(t, s);\n\n        this._migratePixelStorei(t, s);\n        \n        this._migrateTextures(t, s);\n        \n    }\n\n    _migratePixelStorei(t, s) {\n        for (let i = 0, n = t._pixelStorei.length; i < n; i++) {\n            if (t._pixelStorei[i] !== s._pixelStorei[i]) {\n                const value = s._pixelStorei[i] !== undefined ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);\n                this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);\n            }\n        }\n    }\n\n    _migrateTextures(t, s) {\n        const max = Math.max(t._maxTexture, s._maxTexture);\n\n        let activeTexture = t._activeTexture;\n\n        for (let i = 0; i < max; i++) {\n            const sTargets = s._textures[i];\n            const tTargets = t._textures[i];\n            const textureNumb = WebGLState._getTextureByIndex(i);\n\n            const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);\n            for (let j = 0, n = targetMax; j < n; j++) {\n                const target = WebGLState._getTextureTargetByIndex(j);\n                if (activeTexture !== textureNumb) {\n                    this._gl._activeTexture(textureNumb);\n                    activeTexture = textureNumb;\n                }\n\n                const texture = (sTargets && sTargets[j]) || null;\n                this._gl._bindTexture(target, texture);\n            }\n        }\n\n        if (s._activeTexture !== activeTexture) {\n            this._gl._activeTexture(s._activeTexture);\n        }\n    }\n\n    _migrateBuffers(t, s) {\n        s._buffers.forEach((framebuffer, target) => {\n            if (t._buffers.get(target) !== framebuffer) {\n                this._gl._bindBuffer(target, framebuffer);\n            }\n        });\n\n        t._buffers.forEach((buffer, target) => {\n            const b = s._buffers.get(target);\n            if (b === undefined) {\n                this._gl._bindBuffer(target, null);\n            }\n        });\n        return (s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER))\n    }\n\n    _migrateFramebuffers(t, s) {\n        s._framebuffers.forEach((framebuffer, target) => {\n            if (t._framebuffers.get(target) !== framebuffer) {\n                this._gl._bindFramebuffer(target, framebuffer);\n            }\n        });\n\n        t._framebuffers.forEach((framebuffer, target) => {\n            const fb = s._framebuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindFramebuffer(target, null);\n            }\n        });\n    }\n\n    _migrateRenderbuffers(t, s) {\n        s._renderbuffers.forEach((renderbuffer, target) => {\n            if (t._renderbuffers.get(target) !== renderbuffer) {\n                this._gl._bindRenderbuffer(target, renderbuffer);\n            }\n        });\n\n        t._renderbuffers.forEach((renderbuffer, target) => {\n            const fb = s._renderbuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindRenderbuffer(target, null);\n            }\n        });\n    }\n\n    _migrateAttributes(t, s, buffersChanged) {\n\n        if (!buffersChanged) {\n            t._vertexAttribs.forEach((attrib, index) => {\n                if (!s._vertexAttribs[index]) {\n                    // We can't 'delete' a vertex attrib so we'll disable it.\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n\n            s._vertexAttribs.forEach((attrib, index) => {\n                this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                } else {\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n        } else {\n            // When buffers are changed, previous attributes were reset automatically.\n            s._vertexAttribs.forEach((attrib, index) => {\n                if (attrib[0]) {\n                    // Do not set vertex attrib pointer when it was just the default value.\n                    this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);\n                }\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                }\n            });\n        }\n    }\n\n    _migrateSettings(t, s) {\n        const defaults = this.constructor.getDefaultSettings();\n        t._settings.forEach((value, func) => {\n            const name = func.name || func.xname;\n            if (!s._settings.has(func)) {\n                let args = defaults.get(name);\n                if (Utils.isFunction(args)) {\n                    args = args(this._gl);\n                }\n                // We are actually setting the setting for optimization purposes.\n                s._settings.set(func, args);\n                func.apply(this._gl, args);\n            }\n        });\n        s._settings.forEach((value, func) => {\n            const tValue = t._settings.get(func);\n            if (!tValue || !Utils.equalValues(tValue, value)) {\n                func.apply(this._gl, value);\n            }\n        });\n    }\n\n    _migrateFlags(t, s) {\n        t._nonDefaultFlags.forEach(setting => {\n            if (!s._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._enable(setting);\n                } else {\n                    this._gl._disable(setting);\n                }\n            }\n        });\n        s._nonDefaultFlags.forEach(setting => {\n            if (!t._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._disable(setting);\n                } else {\n                    this._gl._enable(setting);\n                }\n            }\n        });\n    }\n\n    static getDefaultSettings() {\n        if (!this._defaultSettings) {\n            this._defaultSettings = new Map();\n            const d = this._defaultSettings;\n            const g = WebGLRenderingContext.prototype;\n            d.set(\"viewport\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"scissor\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"blendColor\", [0, 0, 0, 0]);\n            d.set(\"blendEquation\", [g.FUNC_ADD]);\n            d.set(\"blendEquationSeparate\", [g.FUNC_ADD, g.FUNC_ADD]);\n            d.set(\"blendFunc\", [g.ONE, g.ZERO]);\n            d.set(\"blendFuncSeparate\", [g.ONE, g.ZERO, g.ONE, g.ZERO]);\n            d.set(\"clearColor\", [0, 0, 0, 0]);\n            d.set(\"clearDepth\", [1]);\n            d.set(\"clearStencil\", [0]);\n            d.set(\"colorMask\", [true, true, true, true]);\n            d.set(\"cullFace\", [g.BACK]);\n            d.set(\"depthFunc\", [g.LESS]);\n            d.set(\"depthMask\", [true]);\n            d.set(\"depthRange\", [0, 1]);\n            d.set(\"frontFace\", [g.CCW]);\n            d.set(\"lineWidth\", [1]);\n            d.set(\"polygonOffset\", [0, 0]);\n            d.set(\"sampleCoverage\", [1, false]);\n            d.set(\"stencilFunc\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFront\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFrontAndBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"stencilMask\", [1]);\n            d.set(\"_stencilMaskSeparateFront\", [1]);\n            d.set(\"_stencilMaskSeparateBack\", [1]);\n            d.set(\"_stencilMaskSeparateFrontAndBack\", [1]);\n            d.set(\"stencilOp\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFront\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFrontAndBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"vertexAttrib1f\", []);\n            d.set(\"vertexAttrib1fv\", []);\n            d.set(\"vertexAttrib2f\", []);\n            d.set(\"vertexAttrib2fv\", []);\n            d.set(\"vertexAttrib3f\", []);\n            d.set(\"vertexAttrib3fv\", []);\n            d.set(\"vertexAttrib4f\", []);\n            d.set(\"vertexAttrib4fv\", []);\n        }\n        return this._defaultSettings\n    }\n\n    static _getTextureTargetIndex(target) {\n        switch(target) {\n            case 0x0DE1:\n                /* TEXTURE_2D */\n                return 0;\n            case 0x8513:\n                /* TEXTURE_CUBE_MAP */\n                return 1;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown texture target: ' + target);\n        }\n    }\n\n    static _getTextureTargetByIndex(index) {\n        if (!this._textureTargetIndices) {\n            this._textureTargetIndices = [0x0DE1, 0x8513];\n        }\n        return this._textureTargetIndices[index]\n    }\n\n    static _getTextureIndex(index) {\n        return index - 0x84C0 /* GL_TEXTURE0 */;\n    }\n\n    static _getTextureByIndex(index) {\n        return index + 0x84C0;\n    }\n\n    static _getPixelStoreiIndex(pname) {\n        switch(pname) {\n            case 0x0D05:\n                /* PACK_ALIGNMENT */\n                return 0;\n            case 0x0CF5:\n                /* UNPACK_ALIGNMENT */\n                return 1;\n            case 0x9240:\n                /* UNPACK_FLIP_Y_WEBGL */\n                return 2;\n            case 0x9241:\n                /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */\n                return 3;\n            case 0x9243:\n                /* UNPACK_COLORSPACE_CONVERSION_WEBGL */\n                return 4;\n                //@todo: support WebGL2 properties, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\n            case 0x9245:\n                /* UNPACK_FLIP_BLUE_RED */\n                return 5;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown pixelstorei: ' + pname);\n        }\n    }\n\n    static _getPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiIndices) {\n            this._pixelStoreiIndices = [0x0D05, 0x0CF5, 0x9240, 0x9241, 0x9243];\n        }\n        return this._pixelStoreiIndices[index]\n    }\n\n    static _getDefaultPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiDefaults) {\n            this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];\n        }\n        return this._pixelStoreiDefaults[index]\n    }\n}\n\nclass WebGLStateManager {\n\n    _initStateManager(id = \"default\") {\n        this._states = {};\n        this._state = this._getState(id);\n    }\n\n    _getState(id) {\n        if (!this._states[id]) {\n            this._states[id] = new WebGLState(id, this);\n        }\n        return this._states[id];\n    }\n\n    switchState(id = \"default\") {\n        if (this._state._id !== id) {\n            const newState = this._getState(id);\n            this._state.migrate(newState);\n            this._state = newState;\n        }\n    }\n\n    $useProgram(program) {\n        if (this._state.setProgram(program))\n            this._useProgram(program);\n    }\n\n    $bindBuffer(target, fb) {\n        if (this._state.setBuffer(target, fb))\n            this._bindBuffer(target, fb);\n    }\n\n    $bindFramebuffer(target, fb) {\n        if (this._state.setFramebuffer(target, fb))\n            this._bindFramebuffer(target, fb);\n    }\n\n    $bindRenderbuffer(target, fb) {\n        if (this._state.setRenderbuffer(target, fb))\n            this._bindRenderbuffer(target, fb);\n    }\n\n    $enable(cap) {\n        if (this._state.setFlag(cap, true))\n            this._enable(cap);\n    }\n\n    $disable(cap) {\n        if (this._state.setFlag(cap, false))\n            this._disable(cap);\n    }\n\n    $viewport(x, y, w, h) {\n        if (this._state.setSetting(this._viewport, [x, y, w, h]))\n            this._viewport(x, y, w, h);\n    }\n\n    $scissor(x, y, w, h) {\n        if (this._state.setSetting(this._scissor, [x, y, w, h]))\n            this._scissor(x, y, w, h);\n    }\n\n    $disableVertexAttribArray(index) {\n        if (this._state.disableVertexAttribArray(index))\n            this._disableVertexAttribArray(index);\n    }\n\n    $enableVertexAttribArray(index) {\n        if (this._state.enableVertexAttribArray(index))\n            this._enableVertexAttribArray(index);\n    }\n\n    $vertexAttribPointer(index, size, type, normalized, stride, offset) {\n        if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))\n            this._vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n\n    $activeTexture(texture) {\n        if (this._state.setActiveTexture(texture))\n            this._activeTexture(texture);\n    }\n\n    $bindTexture(target, texture) {\n        if (this._state.bindTexture(target, texture))\n            this._bindTexture(target, texture);\n    }\n\n    $pixelStorei(pname, param) {\n        if (this._state.setPixelStorei(pname, param)) {\n            this._pixelStorei(pname, param);\n        }\n    }\n\n    $stencilFuncSeparate(face, func, ref, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilFuncSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilFuncSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilFuncSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [func, ref, mask]))\n            f.apply(this, [func, ref, mask]);\n    }\n\n    _stencilFuncSeparateFront(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT, func, ref, mask);\n    }\n\n    _stencilFuncSeparateBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.BACK, func, ref, mask);\n    }\n\n    _stencilFuncSeparateFrontAndBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);\n    }\n\n    $stencilMaskSeparate(face, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilMaskSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilMaskSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilMaskSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [mask]))\n            f.apply(this, [mask]);\n    }\n\n    _stencilMaskSeparateFront(mask) {\n        this._stencilMaskSeparate(this.FRONT, mask);\n    }\n\n    _stencilMaskSeparateBack(mask) {\n        this._stencilMaskSeparate(this.BACK, mask);\n    }\n\n    _stencilMaskSeparateFrontAndBack(mask) {\n        this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);\n    }\n\n    $stencilOpSeparate(face, fail, zfail, zpass) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilOpSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilOpSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilOpSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [fail, zfail, zpass]))\n            f.apply(this, [fail, zfail, zpass]);\n    }\n\n    _stencilOpSeparateFront(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.BACK, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);\n    }\n\n    $blendColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))\n            this._blendColor(red, green, blue, alpha);\n    }\n\n    $blendEquation(mode) {\n        if (this._state.setSetting(this._blendEquation, [mode]))\n            this._blendEquation(mode);\n    }\n\n    $blendEquationSeparate(modeRGB, modeAlpha) {\n        if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))\n            this._blendEquationSeparate(modeRGB, modeAlpha);\n    }\n\n    $blendFunc(sfactor, dfactor) {\n        if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))\n            this._blendFunc(sfactor, dfactor);\n    }\n\n    $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n        if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))\n            this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n    }\n\n    $clearColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))\n            this._clearColor(red, green, blue, alpha);\n    }\n\n    $clearDepth(depth) {\n        if (this._state.setSetting(this._clearDepth, [depth]))\n            this._clearDepth(depth);\n    }\n\n    $clearStencil(s) {\n        if (this._state.setSetting(this._clearStencil, [s]))\n            this._clearStencil(s);\n    }\n\n    $colorMask(red, green, blue, alpha) {\n        if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))\n            this._colorMask(red, green, blue, alpha);\n    }\n\n    $cullFace(mode) {\n        if (this._state.setSetting(this._cullFace, [mode]))\n            this._cullFace(mode);\n    }\n\n    $depthFunc(func) {\n        if (this._state.setSetting(this._depthFunc, [func]))\n            this._depthFunc(func);\n    }\n\n    $depthMask(flag) {\n        if (this._state.setSetting(this._depthMask, [flag]))\n            this._depthMask(flag);\n    }\n\n    $depthRange(zNear, zFar) {\n        if (this._state.setSetting(this._depthRange, [zNear, zFar]))\n            this._depthRange(zNear, zFar);\n    }\n\n    $frontFace(mode) {\n        if (this._state.setSetting(this._frontFace, [mode]))\n            this._frontFace(mode);\n    }\n\n    $lineWidth(width) {\n        if (this._state.setSetting(this._lineWidth, [width]))\n            this._lineWidth(width);\n    }\n\n    $polygonOffset(factor, units) {\n        if (this._state.setSetting(this._polygonOffset, [factor, units]))\n            this._polygonOffset(factor, units);\n    }\n\n    $sampleCoverage(value, invert) {\n        if (this._state.setSetting(this._sampleCoverage, [value, invert]))\n            this._sampleCoverage(value, invert);\n    }\n\n    $stencilFunc(func, ref, mask) {\n        if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))\n            this._stencilFunc(func, ref, mask);\n    }\n\n    $stencilMask(mask) {\n        if (this._state.setSetting(this._stencilMask, [mask]))\n            this._stencilMask(mask);\n    }\n\n    $stencilOp(fail, zfail, zpass) {\n        if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))\n            this._stencilOp(fail, zfail, zpass);\n    }\n\n    $vertexAttrib1f(indx, x) {\n        if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))\n            this._vertexAttrib1f(indx, x);\n    }\n\n    $vertexAttrib1fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))\n            this._vertexAttrib1fv(indx, values);\n    }\n\n    $vertexAttrib2f(indx, x, y) {\n        if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))\n            this._vertexAttrib2f(indx, x, y);\n    }\n\n    $vertexAttrib2fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))\n            this._vertexAttrib2fv(indx, values);\n    }\n\n    $vertexAttrib3f(indx, x, y, z) {\n        if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))\n            this._vertexAttrib3f(indx, x, y, z);\n    }\n\n    $vertexAttrib3fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))\n            this._vertexAttrib3fv(indx, values);\n    }\n\n    $vertexAttrib4f(indx, x, y, z, w) {\n        if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))\n            this._vertexAttrib4f(indx, x, y, z, w);\n    }\n\n    $vertexAttrib4fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))\n            this._vertexAttrib4fv(indx, values);\n    }\n\n    /**\n     * Sets up the rendering context for context sharing.\n     * @param {WebGLRenderingContext} gl\n     * @param {string} id\n     */\n    static enable(gl, id = \"default\") {\n        const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);\n        const WebGLRenderingContextProto = gl.__proto__;\n        names.forEach(name => {\n            if (name !== \"constructor\") {\n                const method = WebGLStateManager.prototype[name];\n                if (name.charAt(0) === \"$\") {\n                    name = name.substr(1);\n                }\n                if (gl[name] !== method) {\n                    if (gl[name]) {\n                        if (!gl[name].name) {\n                            // We do this for compatibility with the Chrome WebGL Inspector plugin.\n                            gl[name].xname = name;\n                        }\n                        gl['_' + name] = gl[name];\n                    }\n                    gl[name] = method;\n                }\n            }\n        });\n\n        WebGLStateManager.prototype._initStateManager.call(gl, id);\n\n        return gl;\n    }\n\n}\n\nexport default WebGLStateManager;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from \"./TextureSource.mjs\";\nimport Stage from './Stage.mjs';\n\nexport default class TextureManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        /**\n         * The currently used amount of texture memory.\n         * @type {number}\n         */\n        this._usedMemory = 0;\n\n        /**\n         * All uploaded texture sources.\n         * @type {TextureSource[]}\n         */\n        this._uploadedTextureSources = [];\n\n        /**\n         * The texture source lookup id to texture source hashmap.\n         * @type {Map<String, TextureSource>}\n         */\n        this.textureSourceHashmap = new Map();\n\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            this._nativeFreeTextureSource(this._uploadedTextureSources[i]);\n        }\n        \n        this.textureSourceHashmap.clear();\n        this._usedMemory = 0;\n    }\n\n    getReusableTextureSource(id) {\n        return this.textureSourceHashmap.get(id);\n    }\n\n    getTextureSource(func, id) {\n        // Check if texture source is already known.\n        let textureSource = id ? this.textureSourceHashmap.get(id) : null;\n        if (!textureSource) {\n            // Create new texture source.\n            textureSource = new TextureSource(this, func);\n\n            if (id) {\n                textureSource.lookupId = id;\n                this.textureSourceHashmap.set(id, textureSource);\n            }\n        }\n\n        return textureSource;\n    }\n\n    uploadTextureSource(textureSource, options) {\n        if (textureSource.isLoaded()) return;\n\n        this._addMemoryUsage(textureSource.w * textureSource.h);\n\n        // Load texture.\n        const nativeTexture = this._nativeUploadTextureSource(textureSource, options);\n\n        textureSource._nativeTexture = nativeTexture;\n\n        // We attach w and h to native texture (we need it in CoreRenderState._isRenderTextureReusable).\n        nativeTexture.w = textureSource.w;\n        nativeTexture.h = textureSource.h;\n\n        nativeTexture.update = this.stage.frameCounter;\n\n        this._uploadedTextureSources.push(textureSource);\n        \n        this.addToLookupMap(textureSource);\n\n        // add VRAM tracking if using the webgl renderer\n        this._updateVramUsage(textureSource, 1);\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    _updateVramUsage(textureSource, sign) {\n        const nativeTexture = textureSource.nativeTexture;\n        var usage;\n\n        // do nothing if webgl isn't even supported\n        if (!Stage.isWebglSupported())\n            return;\n\n        // or if there is no native texture\n        if (!textureSource.isLoaded())\n            return;\n\n        // or, finally, if there is no bytes per pixel specified\n        if (!nativeTexture.hasOwnProperty('bytesPerPixel') || isNaN(nativeTexture.bytesPerPixel))\n            return;\n\n        usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);\n\n        this.stage.addVramUsage(usage, textureSource.hasAlpha);\n    }\n\n    addToLookupMap(textureSource) {\n        const lookupId = textureSource.lookupId;\n        if (lookupId) {\n            if (!this.textureSourceHashmap.has(lookupId)) {\n                this.textureSourceHashmap.set(lookupId, textureSource);\n            }\n        }\n    }\n\n    gc() {\n        this.freeUnusedTextureSources();\n        this._cleanupLookupMap();\n    }\n    \n    freeUnusedTextureSources() {\n        let remainingTextureSources = [];\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            let ts = this._uploadedTextureSources[i];\n            if (ts.allowCleanup()) {\n                this._freeManagedTextureSource(ts);\n            } else {\n                remainingTextureSources.push(ts);\n            }\n        }\n\n        this._uploadedTextureSources = remainingTextureSources;\n\n        this._cleanupLookupMap();\n    }\n\n    _freeManagedTextureSource(textureSource) {\n        if (textureSource.isLoaded()) {\n            this._nativeFreeTextureSource(textureSource);\n            this._addMemoryUsage(-textureSource.w * textureSource.h);\n\n            // add VRAM tracking if using the webgl renderer\n            this._updateVramUsage(textureSource, -1);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _cleanupLookupMap() {\n        // We keep those that still have value (are being loaded or already loaded, or are likely to be reused).\n        this.textureSourceHashmap.forEach((textureSource, lookupId) => {\n            if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {\n                this.textureSourceHashmap.delete(lookupId);\n            }\n        });\n    }\n\n    /**\n     * Externally free texture source.\n     * @param textureSource\n     */\n    freeTextureSource(textureSource) {\n        const index = this._uploadedTextureSources.indexOf(textureSource);\n        const managed = (index !== -1);\n\n        if (textureSource.isLoaded()) {\n            if (managed) {\n                this._addMemoryUsage(-textureSource.w * textureSource.h);\n                this._uploadedTextureSources.splice(index, 1);\n            }\n            this._nativeFreeTextureSource(textureSource);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _nativeUploadTextureSource(textureSource, options) {\n        return this.stage.renderer.uploadTextureSource(textureSource, options);\n    }\n\n    _nativeFreeTextureSource(textureSource) {\n        this.stage.renderer.freeTextureSource(textureSource);\n        textureSource.clearNativeTexture();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows throttling of loading texture sources, keeping the app responsive.\n */\nexport default class TextureThrottler {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.genericCancelCb = (textureSource) => {\n            this._remove(textureSource);\n        };\n\n        this._sources = [];\n        this._data = [];\n    }\n\n    destroy() {\n        this._sources = [];\n        this._data = [];\n        this.stage = null;\n\n        delete this._sources;\n        delete this._data;\n        delete this.stage;\n    }\n\n    processSome() {\n        if (this._sources.length) {\n            const start = Date.now();\n            do {\n                this._processItem();\n            } while(this._sources.length && (Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME));\n        }\n    }\n\n    _processItem() {\n        const source = this._sources.pop();\n        const data = this._data.pop();\n        if (source.isLoading()) {\n            source.processLoadedSource(data);\n        }\n    }\n\n    add(textureSource, data) {\n        this._sources.push(textureSource);\n        this._data.push(data);\n    }\n\n    _remove(textureSource) {\n        const index = this._sources.indexOf(textureSource);\n        if (index >= 0) {\n            this._sources.splice(index, 1);\n            this._data.splice(index, 1);\n        }\n    }\n\n}\n\nTextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreContext {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.root = null;\n\n        this.updateTreeOrder = 0;\n\n        this.renderState = this.stage.renderer.createCoreRenderState(this);\n\n        this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);\n        this.renderExec.init();\n\n        this._usedMemory = 0;\n        this._renderTexturePool = [];\n\n        this._renderTextureId = 1;\n\n        this._zSorts = [];\n\n        this.renderToTextureCount = 0;\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        this._renderTexturePool.forEach(texture => this._freeRenderTexture(texture));\n        this._usedMemory = 0;\n\n        this.stage = null;\n        this.root = null;\n\n        this.renderState = null;\n        this.renderExec = null;\n        this._renderTexturePool = null;\n        this._zSorts = null;\n\n        delete this.stage;\n        delete this.root;\n        delete this.renderState;\n        delete this.renderExec;\n        delete this._renderTexturePool;\n        delete this._zSorts;\n    }\n\n    hasRenderUpdates() {\n        return !!this.root._parent._hasRenderUpdates;\n    }\n\n    render() {\n        // Clear flag to identify if anything changes before the next frame.\n        this.root._parent._hasRenderUpdates = 0;\n\n        this._render();\n    }\n\n    update() {\n        this._update();\n\n        // Due to the boundsVisibility flag feature (and onAfterUpdate hook), it is possible that other elements were\n        // changed during the update loop (for example due to the txLoaded event). We process these changes immediately\n        // (but not recursively to prevent infinite loops).\n        if (this.root._hasUpdates) {\n            this._update();\n        }\n\n        this._performForcedZSorts();\n    }\n\n    /**\n     * Certain ElementCore items may be forced to zSort to strip out references to prevent memleaks..\n     */\n    _performForcedZSorts() {\n        const n = this._zSorts.length;\n        if (n) {\n            // Forced z-sorts (ElementCore may force a z-sort in order to free memory/prevent memory leaks).\n            for (let i = 0, n = this._zSorts.length; i < n; i++) {\n                if (this._zSorts[i].zSort) {\n                    this._zSorts[i].sortZIndexedChildren();\n                }\n            }\n            this._zSorts = [];\n        }\n    }\n\n    _update() {\n        this.updateTreeOrder = 0;\n\n        this.root.update();\n    }\n\n    _render() {\n        const debugFrame = this.stage.getOption('debugFrame');\n        // Obtain a sequence of the quad operations.\n        this._fillRenderState();\n\n        if (this.stage.getOption('readPixelsBeforeDraw')) {\n            this._readPixels();\n        }\n\n        // Now run them with the render executor.\n        this._performRender();\n\n        if (debugFrame) {\n            console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`)\n        }\n\n        // Block OpenGL pipeline to prevent framebuffer flickering\n        // on certain devices\n        if (this.stage.getOption('readPixelsAfterDraw') &&\n            this.renderToTextureCount >= this.stage.getOption('readPixelsAfterDrawThreshold')\n        ) {\n            if (debugFrame) {\n                console.log(`[Lightning] readPixelsAfterDraw behavior triggered`)\n            }\n            this._readPixels();\n        }\n\n        this.renderToTextureCount = 0;\n    }\n\n    _readPixels() {\n        const pixels = new Uint8Array(4);\n        const gl = this.stage.gl;\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n\n    _fillRenderState() {\n        this.renderState.reset();\n        this.root.render();\n        this.renderState.finish();\n    }\n\n    _performRender() {\n        this.renderExec.execute();\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    allocateRenderTexture(w, h) {\n        let prec = this.stage.getRenderPrecision();\n        let pw = Math.max(1, Math.round(w * prec));\n        let ph = Math.max(1, Math.round(h * prec));\n\n        // Search last item first, so that last released render texture is preferred (may cause memory cache benefits).\n        const n = this._renderTexturePool.length;\n        for (let i = n - 1; i >= 0; i--) {\n            const texture = this._renderTexturePool[i];\n            // We don't want to reuse the same render textures within the same frame because that will create gpu stalls.\n            if (texture.w === pw && texture.h === ph && (texture.update !== this.stage.frameCounter)) {\n                texture.f = this.stage.frameCounter;\n                this._renderTexturePool.splice(i, 1);\n                return texture;\n            }\n        }\n\n        const texture = this._createRenderTexture(w, h, pw, ph);\n        texture.precision = prec;\n        return texture;\n    }\n\n    releaseRenderTexture(texture) {\n        this._renderTexturePool.push(texture);\n    }\n\n    freeUnusedRenderTextures(maxAge = 60) {\n        // Clean up all textures that are no longer used.\n        // This cache is short-lived because it is really just meant to supply running shaders that are\n        // updated during a number of frames.\n        let limit = this.stage.frameCounter - maxAge;\n\n        this._renderTexturePool = this._renderTexturePool.filter(texture => {\n            if (texture.f <= limit) {\n                this._freeRenderTexture(texture);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    _createRenderTexture(w, h, pw, ph) {\n        this._addMemoryUsage(pw * ph);\n\n        const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);\n        texture.id = this._renderTextureId++;\n        texture.f = this.stage.frameCounter;\n        texture.ow = w;\n        texture.oh = h;\n        texture.w = pw;\n        texture.h = ph;\n\n        return texture;\n    }\n\n    _freeRenderTexture(nativeTexture) {\n        this.stage.renderer.freeRenderTexture(nativeTexture);\n        this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);\n    }\n\n    forceZSort(elementCore) {\n        this._zSorts.push(elementCore);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class TransitionSettings {\n    constructor(stage) {\n        this.stage = stage;\n        this._timingFunction = 'ease';\n        this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);\n        this.delay = 0;\n        this.duration = 0.2;\n        this.merger = null;\n    }\n\n    get timingFunction() {\n        return this._timingFunction;\n    }\n\n    set timingFunction(v) {\n        this._timingFunction = v;\n        this._timingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get timingFunctionImpl() {\n        return this._timingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n}\n\nTransitionSettings.prototype.isTransitionSettings = true;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TransitionManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All transitions that are running and attached.\n         * (we don't support transitions on un-attached elements to prevent memory leaks)\n         * @type {Set<Transition>}\n         */\n        this.active = new Set();\n\n        this.defaultTransitionSettings = new TransitionSettings(this.stage);\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                a.progress(dt);\n                if (!a.isRunning()) {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => (t.isRunning())));\n            }\n        }\n    }\n\n    createSettings(settings) {\n        const transitionSettings = new TransitionSettings();\n        Base.patchObject(transitionSettings, settings);\n        return transitionSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n\n    removeActive(transition) {\n        this.active.delete(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport TransitionSettings from \"./TransitionSettings.mjs\";\nimport Transition from \"./Transition.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class MultiSpline {\n\n    constructor() {\n        this._clear();\n    }\n\n    _clear() {\n        this._p = [];\n        this._pe = [];\n        this._idp = [];\n        this._f = [];\n        this._v = [];\n        this._lv = [];\n        this._sm = [];\n        this._s = [];\n        this._ve = [];\n        this._sme = [];\n        this._se = [];\n\n        this._length = 0;\n    }\n\n    parse(rgba, def) {\n        let i, n;\n        if (!Utils.isObjectLiteral(def)) {\n            def = {0: def}\n        }\n\n        let defaultSmoothness = 0.5;\n\n        let items = [];\n        for (let key in def) {\n            if (def.hasOwnProperty(key)) {\n                let obj = def[key];\n                if (!Utils.isObjectLiteral(obj)) {\n                    obj = {v: obj}\n                }\n\n                let p = parseFloat(key);\n\n                if (key === \"sm\") {\n                    defaultSmoothness = obj.v;\n                } else if (!isNaN(p) && p >= 0 && p <= 2) {\n                    obj.p = p;\n\n                    obj.f = Utils.isFunction(obj.v);\n                    obj.lv = obj.f ? obj.v(0, 0) : obj.v;\n\n                    items.push(obj);\n                }\n            }\n        }\n\n        // Sort by progress value.\n        items = items.sort(function(a, b) {return a.p - b.p});\n\n        n = items.length;\n\n        for (i = 0; i < n; i++) {\n            let last = (i === n - 1);\n            if (!items[i].hasOwnProperty('pe')) {\n                // Progress.\n                items[i].pe = last ? (items[i].p <= 1 ? 1 : 2 /* support onetotwo stop */) : items[i + 1].p;\n            } else {\n                // Prevent multiple items at the same time.\n                const max = i < n - 1 ? items[i + 1].p : 1;\n                if (items[i].pe > max) {\n                    items[i].pe = max;\n                }\n            }\n            if (items[i].pe === items[i].p) {\n                items[i].idp = 0;\n            } else {\n                items[i].idp = 1 / (items[i].pe - items[i].p);\n            }\n        }\n\n        // Color merger: we need to split/combine RGBA components.\n\n        // Calculate bezier helper values.;\n        for (i = 0; i < n; i++) {\n            if (!items[i].hasOwnProperty('sm')) {\n                // Smoothness.;\n                items[i].sm = defaultSmoothness;\n            }\n            if (!items[i].hasOwnProperty('s')) {\n                // Slope.;\n                if (i === 0 || i === n - 1 || (items[i].p === 1 /* for onetotwo */)) {\n                    // Horizontal slope at start and end.;\n                    items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                } else {\n                    const pi = items[i - 1];\n                    const ni = items[i + 1];\n                    if (pi.p === ni.p) {\n                        items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                    } else {\n                        if (rgba) {\n                            const nc = MultiSpline.getRgbaComponents(ni.lv);\n                            const pc = MultiSpline.getRgbaComponents(pi.lv);\n                            const d = 1 / (ni.p - pi.p);\n                            items[i].s = [\n                                d * (nc[0] - pc[0]),\n                                d * (nc[1] - pc[1]),\n                                d * (nc[2] - pc[2]),\n                                d * (nc[3] - pc[3])\n                            ];\n                        } else {\n                            items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0; i < n - 1; i++) {\n            // Calculate value function.;\n            if (!items[i].f) {\n\n                let last = (i === n - 1);\n                if (!items[i].hasOwnProperty('ve')) {\n                    items[i].ve = last ? items[i].lv : items[i + 1].lv;\n                }\n\n                // We can only interpolate on numeric values. Non-numeric values are set literally when reached time.\n                if (Utils.isNumber(items[i].v) && Utils.isNumber(items[i].lv)) {\n                    if (!items[i].hasOwnProperty('sme')) {\n                        items[i].sme = last ? defaultSmoothness : items[i + 1].sm;\n                    }\n                    if (!items[i].hasOwnProperty('se')) {\n                        items[i].se = last ? (rgba ? [0, 0, 0, 0] : 0) : items[i + 1].s;\n                    }\n\n                    // Generate spline.;\n                    if (rgba) {\n                        items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    } else {\n                        items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    }\n\n                    items[i].f = true;\n                }\n            }\n        }\n\n        if (this.length) {\n            this._clear();\n        }\n\n        for (i = 0, n = items.length; i < n; i++) {\n            this._add(items[i]);\n        }\n    }\n\n    _add(item) {\n        this._p.push(item.p || 0);\n        this._pe.push(item.pe || 0);\n        this._idp.push(item.idp || 0);\n        this._f.push(item.f || false);\n        this._v.push(item.hasOwnProperty('v') ? item.v : 0 /* v might be false or null */ );\n        this._lv.push(item.lv || 0);\n        this._sm.push(item.sm || 0);\n        this._s.push(item.s || 0);\n        this._ve.push(item.ve || 0);\n        this._sme.push(item.sme || 0);\n        this._se.push(item.se || 0);\n        this._length++;\n    }\n\n    _getItem(p) {\n        const n = this._length;\n        if (!n) {\n            return -1;\n        }\n\n        if (p < this._p[0]) {\n            return 0;\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (this._p[i] <= p && p < this._pe[i]) {\n                return i;\n            }\n        }\n\n        return n - 1;\n    }\n\n    getValue(p) {\n        const i = this._getItem(p);\n        if (i === -1) {\n            return undefined;\n        } else {\n            if (this._f[i]) {\n                const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));\n                return this._v[i](o);\n            } else {\n                return this._v[i];\n            }\n        }\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1 *= dp;\n        s2 *= dp;\n\n        let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);\n        if (!helpers) {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return v2 * p + v1 * (1 - p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n                return MultiSpline.calculateSpline(helpers, p);\n            };\n        }\n    };\n\n    static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1[0] *= dp;\n        s1[1] *= dp;\n        s1[2] *= dp;\n        s1[3] *= dp;\n        s2[0] *= dp;\n        s2[1] *= dp;\n        s2[2] *= dp;\n        s2[3] *= dp;\n\n        let cv1 = MultiSpline.getRgbaComponents(v1);\n        let cv2 = MultiSpline.getRgbaComponents(v2);\n\n        let helpers = [\n            MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),\n            MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),\n            MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),\n            MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])\n        ];\n\n        if (!helpers[0]) {\n            return function (p) {\n                // Linear.\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.mergeColors(v2, v1, p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.getArgbNumber([\n                    Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[3], p))\n                ]);\n            };\n        }\n\n    };\n\n    /**\n     * Creates helpers to be used in the spline function.\n     * @param {number} v1\n     *   From value.\n     * @param {number} v2\n     *   To value.\n     * @param {number} o1\n     *   From smoothness (0 = linear, 1 = smooth).\n     * @param {number} s1\n     *   From slope (0 = horizontal, infinite = vertical).\n     * @param {number} i2\n     *   To smoothness.\n     * @param {number} s2\n     *   To slope.\n     * @returns {Number[]}\n     *   The helper values to be supplied to the spline function.\n     *   If the configuration is actually linear, null is returned.\n     */\n    static getSplineHelpers(v1, v2, o1, i2, s1, s2) {\n        if (!o1 && !i2) {\n            // Linear.\n            return null;\n        }\n\n        // Cubic bezier points.\n        // http://cubic-bezier.com/\n        let csx = o1;\n        let csy = v1 + s1 * o1;\n        let cex = 1 - i2;\n        let cey = v2 - s2 * i2;\n\n        let xa = 3 * csx - 3 * cex + 1;\n        let xb = -6 * csx + 3 * cex;\n        let xc = 3 * csx;\n\n        let ya = 3 * csy - 3 * cey + v2 - v1;\n        let yb = 3 * (cey + v1) - 6 * csy;\n        let yc = 3 * (csy - v1);\n        let yd = v1;\n\n        return [xa, xb, xc, ya, yb, yc, yd];\n    };\n\n    /**\n     * Calculates the intermediate spline value based on the specified helpers.\n     * @param {number[]} helpers\n     *   Obtained from getSplineHelpers.\n     * @param {number} p\n     * @return {number}\n     */\n    static calculateSpline(helpers, p) {\n        let xa = helpers[0];\n        let xb = helpers[1];\n        let xc = helpers[2];\n        let ya = helpers[3];\n        let yb = helpers[4];\n        let yc = helpers[5];\n        let yd = helpers[6];\n\n        if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {\n            // Linear.\n            return p;\n        }\n\n        // Find t for p.\n        let t = 0.5, cbx, dx;\n\n        for (let it = 0; it < 20; it++) {\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c).\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            // Cubic bezier derivative function: f'(t)=t*(t*(3*a)+2*b)+c\n            let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n\n            t += dx / cbxd;\n        }\n\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c)+d.\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            if (dx < 0) {\n                maxT = t;\n            } else {\n                minT = t;\n            }\n        }\n\n        return t;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationActionSettings {\n\n    constructor(animationSettings) {\n\n        this.animationSettings = animationSettings;\n\n        /**\n         * The selector that selects the elements.\n         * @type {string}\n         */\n        this._selector = \"\";\n\n        /**\n         * The value items, ordered by progress offset.\n         * @type {MultiSpline}\n         * @private;\n         */\n        this._items = new MultiSpline();\n\n        /**\n         * The affected properties (paths).\n         * @private;\n         */\n        this._props = [];\n\n        /**\n         * Property setters, indexed according to props.\n         * @private;\n         */\n        this._propSetters = [];\n\n        this._resetValue = undefined;\n        this._hasResetValue = false;\n\n        this._hasColorProperty = undefined;\n    }\n\n    getResetValue() {\n        if (this._hasResetValue) {\n            return this._resetValue;\n        } else {\n            return this._items.getValue(0);\n        }\n    }\n\n    apply(element, p, factor) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this._items.getValue(p);\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        if (factor !== 1) {\n            // Stop factor.;\n            let sv = this.getResetValue();\n\n            if (Utils.isNumber(v) && Utils.isNumber(sv)) {\n                if (this.hasColorProperty()) {\n                    v = StageUtils.mergeColors(v, sv, factor);\n                } else {\n                    v = StageUtils.mergeNumbers(v, sv, factor);\n                }\n            }\n        }\n\n        // Apply transformation to all components.;\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    getAnimatedElements(element) {\n        return element.select(this._selector);\n    }\n\n    reset(element) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this.getResetValue();\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        // Apply transformation to all components.\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    set selector(v) {\n        this._selector = v;\n    }\n\n    set t(v) {\n        this.selector = v;\n    }\n\n    get resetValue() {\n        return this._resetValue;\n    }\n    \n    set resetValue(v) {\n        this._resetValue = v;\n        this._hasResetValue = (v !== undefined);\n    }\n\n    set rv(v) {\n        this.resetValue = v;\n    }\n\n    set value(v) {\n        this._items.parse(this.hasColorProperty(), v);\n    }\n\n    set v(v) {\n        this.value = v;\n    }\n\n    set properties(v) {\n        if (!Array.isArray(v)) {\n            v = [v];\n        }\n\n        this._props = [];\n\n        v.forEach((prop) => {\n            this._props.push(prop);\n            this._propSetters.push(Element.getSetter(prop));\n        });\n    }\n\n    set property(v) {\n        this._hasColorProperty = undefined;\n        this.properties = v;\n    }\n\n    set p(v) {\n        this.properties = v;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    hasColorProperty() {\n        if (this._hasColorProperty === undefined) {\n            this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;\n        }\n        return this._hasColorProperty;\n    }\n}\n\nAnimationActionSettings.prototype.isAnimationActionSettings = true;\n\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\nimport Element from \"../tree/Element.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport AnimationActionSettings from \"./AnimationActionSettings.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class AnimationSettings {\n    constructor() {\n        /**\n         * @type {AnimationActionSettings[]}\n         */\n        this._actions = [];\n\n        this.delay = 0;\n        this.duration = 1;\n\n        this.repeat = 0;\n        this.repeatOffset = 0;\n        this.repeatDelay = 0;\n\n        this.autostop = false;\n\n        this.stopMethod = AnimationSettings.STOP_METHODS.FADE;\n        this._stopTimingFunction = 'ease';\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);\n        this.stopDuration = 0;\n        this.stopDelay = 0;\n    }\n\n    get actions() {\n        return this._actions;\n    }\n\n    set actions(v) {\n        this._actions = [];\n        for (let i = 0, n = v.length; i < n; i++) {\n            const e = v[i];\n            if (!e.isAnimationActionSettings) {\n                const aas = new AnimationActionSettings(this);\n                aas.patch(e);\n                this._actions.push(aas);\n            } else {\n                this._actions.push(e);\n            }\n        }\n    }\n\n    /**\n     * Applies the animation to the specified element, for the specified progress between 0 and 1.\n     * @param {Element} element;\n     * @param {number} p;\n     * @param {number} factor;\n     */\n    apply(element, p, factor = 1) {\n        this._actions.forEach(function(action) {\n            action.apply(element, p, factor);\n        });\n    }\n\n    /**\n     * Resets the animation to the reset values.\n     * @param {Element} element;\n     */\n    reset(element) {\n        this._actions.forEach(function(action) {\n            action.reset(element);\n        });\n    }\n\n    get stopTimingFunction() {\n        return this._stopTimingFunction;\n    }\n\n    set stopTimingFunction(v) {\n        this._stopTimingFunction = v;\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get stopTimingFunctionImpl() {\n        return this._stopTimingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nAnimationSettings.STOP_METHODS = {\n    FADE: 'fade',\n    REVERSE: 'reverse',\n    FORWARD: 'forward',\n    IMMEDIATE: 'immediate',\n    ONETOTWO: 'onetotwo'\n};\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\n\nexport default class Animation extends EventEmitter {\n\n    constructor(manager, settings, element) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._state = Animation.STATES.IDLE;\n\n        this._p = 0;\n        this._delayLeft = 0;\n        this._repeatsLeft = 0;\n\n        this._stopDelayLeft = 0;\n        this._stopP = 0;\n    }\n\n    start() {\n        if (this._element && this._element.attached) {\n            this._p = 0;\n            this._delayLeft = this.settings.delay;\n            this._repeatsLeft = this.settings.repeat;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('start');\n            this.checkActive();\n        } else {\n            console.warn(\"[Lightning] Element must be attached before starting animation\");\n        }\n    }\n\n    play() {\n        if (this._state === Animation.STATES.PAUSED) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.checkActive();\n            this.emit('resume');\n        } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('stopContinue');\n        } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {\n            // Restart.;\n            this.start();\n        }\n    }\n\n    pause() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._state = Animation.STATES.PAUSED;\n            this.emit('pause');\n        }\n    }\n\n    replay() {\n        if (this._state == Animation.STATES.FINISHED) {\n            this.start();\n        } else {\n            this.play();\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n        this._stopDelayLeft = 0;\n    }\n\n    finish() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._delayLeft = 0;\n            this._p = 1;\n        } else if (this._state === Animation.STATES.STOPPING) {\n            this._stopDelayLeft = 0;\n            this._p = 0;\n        }\n    }\n\n    stop() {\n        if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE) return;\n\n        this._stopDelayLeft = this.settings.stopDelay || 0;\n\n        if (((this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE) && !this._stopDelayLeft) || this._delayLeft > 0) {\n            // Stop upon next progress.;\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        } else {\n            if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                this._stopP = 0;\n            }\n\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        }\n\n        this.checkActive();\n    }\n\n    stopNow() {\n        if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {\n            this._state = Animation.STATES.STOPPING;\n            this._p = 0;\n            this.emit('stop');\n            this.reset();\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        }\n    }\n\n    isPaused() {\n        return this._state === Animation.STATES.PAUSED;\n    }\n\n    isPlaying() {\n        return this._state === Animation.STATES.PLAYING;\n    }\n\n    isStopping() {\n        return this._state === Animation.STATES.STOPPING;\n    }\n\n    isFinished() {\n        return this._state === Animation.STATES.FINISHED;\n    }\n\n    checkActive() {\n        if (this.isActive()) {\n            this.manager.addActive(this);\n        }\n    }\n\n    isActive() {\n        return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;\n    }\n\n    progress(dt) {\n        if (!this._element) return;\n        this._progress(dt);\n        this.apply();\n    }\n\n    _progress(dt) {\n        if (this._state == Animation.STATES.STOPPING) {\n            this._stopProgress(dt);\n            return;\n        }\n\n        if (this._state != Animation.STATES.PLAYING) {\n            return;\n        }\n\n        if (this._delayLeft > 0) {\n            this._delayLeft -= dt;\n\n            if (this._delayLeft < 0) {\n                dt = -this._delayLeft;\n                this._delayLeft = 0;\n\n                this.emit('delayEnd');\n            } else {\n                return;\n            }\n        }\n\n        if (this.settings.duration === 0) {\n            this._p = 1;\n        } else if (this.settings.duration > 0) {\n            this._p += dt / this.settings.duration;\n        }\n        if (this._p >= 1) {\n            // Finished!;\n            if (this.settings.repeat == -1 || this._repeatsLeft > 0) {\n                if (this._repeatsLeft > 0) {\n                    this._repeatsLeft--;\n                }\n                this._p = this.settings.repeatOffset;\n                this.emit('progress', this._p);\n                \n                if (this.settings.repeatDelay) {\n                    this._delayLeft = this.settings.repeatDelay;\n                }\n\n                this.emit('repeat', this._repeatsLeft);\n            } else {\n                this._p = 1;\n                this.emit('progress', this._p);\n                \n                this._state = Animation.STATES.FINISHED;\n                this.emit('finish');\n                if (this.settings.autostop) {\n                    this.stop();\n                }\n            }\n        } else {\n            this.emit('progress', this._p);\n        }\n    }\n    \n    _stopProgress(dt) {\n        let duration = this._getStopDuration();\n\n        if (this._stopDelayLeft > 0) {\n            this._stopDelayLeft -= dt;\n\n            if (this._stopDelayLeft < 0) {\n                dt = -this._stopDelayLeft;\n                this._stopDelayLeft = 0;\n\n                this.emit('stopDelayEnd');\n            } else {\n                return;\n            }\n        }\n        if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            if (duration === 0) {\n                this._p = 0;\n            } else if (duration > 0) {\n                this._p -= dt / duration;\n            }\n\n            if (this._p <= 0) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {\n            this._progressStopTransition(dt);\n            if (this._stopP >= 1) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {\n            if (this._p < 2) {\n                if (duration === 0) {\n                    this._p = 2;\n                } else if (duration > 0) {\n                    if (this._p < 1) {\n                        this._p += dt / this.settings.duration;\n                    } else {\n                        this._p += dt / duration;\n                    }\n                }\n                if (this._p >= 2) {\n                    this._p = 2;\n                    this._state = Animation.STATES.STOPPED;\n                    this.emit('stopFinish');\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n            if (this._p < 1) {\n                if (this.settings.duration == 0) {\n                    this._p = 1;\n                } else {\n                    this._p += dt / this.settings.duration;\n                }\n                if (this._p >= 1) {\n                    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n                        this._p = 1;\n                        this._state = Animation.STATES.STOPPED;\n                        this.emit('stopFinish');\n                    } else {\n                        if (this._repeatsLeft > 0) {\n                            this._repeatsLeft--;\n                            this._p = 0;\n                            this.emit('repeat', this._repeatsLeft);\n                        } else {\n                            this._p = 1;\n                            this._state = Animation.STATES.STOPPED;\n                            this.emit('stopFinish');\n                        }\n                    }\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        }\n        \n    }\n    \n    _progressStopTransition(dt) {\n        if (this._stopP < 1) {\n            if (this._stopDelayLeft > 0) {\n                this._stopDelayLeft -= dt;\n\n                if (this._stopDelayLeft < 0) {\n                    dt = -this._stopDelayLeft;\n                    this._stopDelayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n            \n            const duration = this._getStopDuration();\n\n            if (duration == 0) {\n                this._stopP = 1;\n            } else {\n                this._stopP += dt / duration;\n            }\n            if (this._stopP >= 1) {\n                // Finished!;\n                this._stopP = 1;\n            }\n        }\n    }\n\n    _getStopDuration() {\n        return this.settings.stopDuration || this.settings.duration;\n    }\n\n    apply() {\n        if (this._state === Animation.STATES.STOPPED) {\n            this.reset();\n        } else {\n            let factor = 1;\n            if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                factor = (1 - this.settings.stopTimingFunctionImpl(this._stopP));\n            }\n            this._settings.apply(this._element, this._p, factor);\n        }\n    }\n\n    reset() {\n        this._settings.reset(this._element);\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get frame() {\n        return Math.round(this._p * this._settings.duration * 60);\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n}\n\nAnimation.STATES = {\n    IDLE: 0,\n    PLAYING: 1,\n    STOPPING: 2,\n    STOPPED: 3,\n    FINISHED: 4,\n    PAUSED: 5\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All running animations on attached subjects.\n         * @type {Set<Animation>}\n         */\n        this.active = new Set();\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                if (a.isActive()) {\n                    a.progress(dt);\n                } else {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => t.isActive()));\n            }\n        }\n    }\n\n    createAnimation(element, settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            // Convert plain object to proper settings object.\n            settings = this.createSettings(settings);\n        }\n\n        return new Animation(\n            this,\n            settings,\n            element\n        );\n    }\n\n    createSettings(settings) {\n        const animationSettings = new AnimationSettings();\n        Base.patchObject(animationSettings, settings);\n        return animationSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\nimport Animation from \"./Animation.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class RectangleTexture extends Texture {\n\n    _getLookupId() {\n        return '__whitepix';\n    }\n\n    _getSourceLoader() {\n        return function(cb) {\n            var whitePixel = new Uint8Array([255, 255, 255, 255]);\n            cb(null, {source: whitePixel, w: 1, h: 1, permanent: true});\n        }\n    }\n\n    isAutosizeTexture() {\n        return false;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Application render tree.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Utils from \"./Utils.mjs\";\nimport WebGLRenderer from \"../renderer/webgl/WebGLRenderer.mjs\";\nimport C2dRenderer from \"../renderer/c2d/C2dRenderer.mjs\";\nimport SparkRenderer from \"../renderer/spark/SparkRenderer.mjs\";\nimport PlatformLoader from \"../platforms/PlatformLoader.mjs\";\nimport WebGLStateManager from \"../tools/WebGLStateManager.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Stage extends EventEmitter {\n\n    constructor(options = {}) {\n        super();\n        this._setOptions(options);\n\n        this._usedMemory = 0;\n        this._lastGcFrame = 0;\n\n        // attempt to track VRAM usage more accurately by accounting for different color channels\n        this._usedVramAlpha = 0;\n        this._usedVramNonAlpha = 0;\n\n        const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);\n        this.platform = new platformType();\n\n        if (this.platform.init) {\n            this.platform.init(this);\n        }\n\n        this.gl = null;\n        this.c2d = null;\n\n        const context = this.getOption('context');\n        if (context) {\n            if (context.useProgram) {\n                this.gl = context;\n            } else {\n                this.c2d = context;\n            }\n        } else {\n            if (Utils.isWeb && (!Stage.isWebglSupported() || this.getOption('canvas2d'))) {\n                this.c2d = this.platform.createCanvasContext(this.getOption('w'), this.getOption('h'));\n            } else {\n                this.gl = this.platform.createWebGLContext(this.getOption('w'), this.getOption('h'));\n            }\n        }\n\n        if (this.gl) {\n            // Wrap in WebGLStateManager.\n            // This prevents unnecessary double WebGL commands from being executed, and allows context switching.\n            // Context switching is necessary when reusing the same context for Three.js.\n            // Note that the user must make sure that the WebGL context is untouched before creating the application,\n            //  when manually passing over a canvas or context in the options.\n            WebGLStateManager.enable(this.gl, \"lightning\")\n        }\n\n        this._mode = this.gl ? 0 : 1;\n\n        // Override width and height.\n        if (this.getCanvas()) {\n            if (this.getOption('devicePixelRatio') !== 1) {\n                const ratio = this.getOption('devicePixelRatio');\n                // set correct display sie\n                this.getCanvas().style.width = this._options['w'] / ratio  + 'px';\n                this.getCanvas().style.height = this._options['h'] / ratio + 'px';\n            }\n\n            // set display buffer size\n            this._options.w = this.getCanvas().width;\n            this._options.h = this.getCanvas().height;\n        }\n\n        if (this._mode === 0) {\n            if (Utils.isSpark) {\n                this._renderer = new SparkRenderer(this);\n            } else {\n                this._renderer = new WebGLRenderer(this);\n            }\n        } else {\n            this._renderer = new C2dRenderer(this);\n        }\n\n        this.setClearColor(this.getOption('clearColor'));\n\n        this.frameCounter = 0;\n\n        this.transitions = new TransitionManager(this);\n        this.animations = new AnimationManager(this);\n\n        this.textureManager = new TextureManager(this);\n        this.textureThrottler = new TextureThrottler(this);\n\n        this.startTime = 0;\n        this.currentTime = 0;\n        this.dt = 0;\n\n        // Preload rectangle texture, so that we can skip some border checks for loading textures.\n        this.rectangleTexture = new RectangleTexture(this);\n        this.rectangleTexture.load();\n\n        // Never clean up because we use it all the time.\n        this.rectangleTexture.source.permanent = true;\n\n        this.ctx = new CoreContext(this);\n\n        this._updateSourceTextures = new Set();\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    static isWebglSupported() {\n        if (Utils.isNode) {\n            return true;\n        }\n\n        try {\n            return !!window.WebGLRenderingContext;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns the rendering mode.\n     * @returns {number}\n     *  0: WebGL\n     *  1: Canvas2d\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    isWebgl() {\n        return this.mode === 0;\n    }\n\n    isC2d() {\n        return this.mode === 1;\n    }\n\n    getOption(name) {\n        return this._options[name];\n    }\n\n    _setOptions(o) {\n        this._options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this._options[name] = def;\n            } else {\n                this._options[name] = value;\n            }\n        }\n\n        opt('canvas', null);\n        opt('context', null);\n        opt('w', 1920);\n        opt('h', 1080);\n        opt('srcBasePath', null);\n        opt('memoryPressure', 24e6);\n        opt('bufferMemory', 2e6);\n        opt('textRenderIssueMargin', 0);\n        opt('fontSharp', { precision: 0.6666666667, fontSize: 24 })\n        opt('clearColor', [0, 0, 0, 0]);\n        opt('defaultFontFace', 'sans-serif');\n        opt('fixedDt', 0);\n        opt('useImageWorker', true);\n        opt('autostart', true);\n        opt('precision', 1);\n        opt('canvas2d', false);\n        opt('platform', null);\n        opt('readPixelsBeforeDraw', false);\n        opt('devicePixelRatio', 1)       \n        opt('readPixelsAfterDraw', false);\n        opt('readPixelsAfterDrawThreshold', 0);\n        opt('debugFrame', false);\n        opt('forceTxCanvasSource', false);\n        opt('pauseRafLoopOnIdle', false);\n\n        if (o['devicePixelRatio'] != null && o['devicePixelRatio'] !== 1) {\n            this._options['precision'] *= o['devicePixelRatio']\n            this._options['w'] *= o['devicePixelRatio']\n            this._options['h'] *= o['devicePixelRatio']\n        }\n    }\n\n    setApplication(app) {\n        this.application = app;\n    }\n\n    init() {\n\n        if (this.application.getOption('debug') && this.platform._imageWorker) {\n            console.log('[Lightning] Using image worker!');\n        }\n\n        if (this.application.getOption('debug') && this.c2d) {\n            console.log('[Lightning] Using canvas2d renderer');\n        }\n\n        this.application.setAsRoot();\n        if (this.getOption('autostart')) {\n            this.platform.startLoop();\n        }\n    }\n\n    destroy() {\n        this.platform.stopLoop();\n        this.platform.destroy();\n        this.ctx.destroy();\n        this.textureManager.destroy();\n        this._renderer.destroy();\n\n        // clear last rendered frame\n        if (this.gl) {\n            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        } else if (this.c2d) {\n            this.c2d.clearRect(\n                0, 0, this.c2d.canvas.width, this.c2d.canvas.height\n            );\n        }\n\n        this.gl = null;\n        this.c2d = null;\n        this.ctx = null;\n        this._options = null;\n        this.platform = null;\n        this.textureManager = null;\n        this._renderer = null;\n\n        delete this.gl;\n        delete this.c2d;\n        delete this.ctx;\n        delete this._options;\n        delete this.platform;\n        delete this.textureManager;\n        delete this._renderer;\n    }\n\n    stop() {\n        this.platform.stopLoop();\n    }\n\n    resume() {\n        this.platform.startLoop();\n    }\n\n    get root() {\n        return this.application;\n    }\n\n    getCanvas() {\n        return this._mode ? this.c2d.canvas : this.gl.canvas;\n    }\n\n    getRenderPrecision() {\n        return this._options.precision;\n    }\n\n    /**\n     * Marks a texture for updating it's source upon the next drawFrame.\n     * @param texture\n     */\n    addUpdateSourceTexture(texture) {\n        if (this._updatingFrame) {\n            // When called from the upload loop, we must immediately load the texture in order to avoid a 'flash'.\n            texture._performUpdateSource();\n        } else {\n            this._updateSourceTextures.add(texture);\n        }\n    }\n\n    removeUpdateSourceTexture(texture) {\n        if (this._updateSourceTextures) {\n            this._updateSourceTextures.delete(texture);\n        }\n    }\n\n    hasUpdateSourceTexture(texture) {\n        return (this._updateSourceTextures && this._updateSourceTextures.has(texture));\n    }\n\n\n    _performUpdateSource() {\n        if (this._updateSourceTextures.size) {\n            this._updateSourceTextures.forEach(texture => {\n                texture._performUpdateSource();\n            });\n            this._updateSourceTextures = new Set();\n        }\n    }\n\n    _calculateDt() {\n        this.startTime = this.currentTime;\n        this.currentTime = this.platform.getHrTime();\n\n        if (this._options.fixedDt) {\n            this.dt = this._options.fixedDt;\n        } else {\n            this.dt = (!this.startTime) ? .02 : .001 * (this.currentTime - this.startTime);\n        }\n    }\n\n    updateFrame() {\n        this._calculateDt();\n        this.emit('frameStart');\n        this._performUpdateSource();\n        this.emit('update');\n    }\n\n    idleFrame() {\n        this.textureThrottler.processSome();\n        this.emit('frameEnd');\n        this.frameCounter++;\n    }\n\n    renderFrame() {\n        const changes = this.ctx.hasRenderUpdates();\n\n        // Update may cause textures to be loaded in sync, so by processing them here we may be able to show them\n        // during the current frame already.\n        this.textureThrottler.processSome();\n\n        if (changes) {\n            this._updatingFrame = true;\n            this.ctx.update();\n            this.ctx.render();\n            this._updatingFrame = false;\n        }\n\n        this.platform.nextFrame(changes);\n\n        this.emit('frameEnd');\n\n        this.frameCounter++;\n    }\n\n    isUpdatingFrame() {\n        return this._updatingFrame;\n    }\n\n    drawFrame() {\n        // Maintain original functionality of `drawFrame()` while retaining the\n        // RAF mitigration feature from: https://github.com/rdkcentral/Lightning/pull/402\n        // The full functionality of this method is relied directly by our own unit tests and\n        // the unit tests of third party users\n        this.updateFrame();\n        this.renderFrame();\n    }\n\n    forceRenderUpdate() {\n        // Enforce re-rendering.\n        if (this.root) {\n            this.root.core._parent.setHasRenderUpdates(1);\n        }\n    }\n\n    setClearColor(clearColor) {\n        this.forceRenderUpdate();\n        if (clearColor === null) {\n            // Do not clear.\n            this._clearColor = null;\n        } else if (Array.isArray(clearColor)) {\n            this._clearColor = clearColor;\n        } else {\n            this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);\n        }\n    }\n\n    getClearColor() {\n        return this._clearColor;\n    }\n\n    createElement(settings) {\n        if (settings) {\n            return this.element(settings);\n        } else {\n            return new Element(this);\n        }\n    }\n\n    createShader(settings) {\n        return Shader.create(this, settings);\n    }\n\n    element(settings) {\n        if (settings.isElement) return settings;\n\n        let element;\n        if (settings.type) {\n            element = new settings.type(this);\n        } else {\n            element = new Element(this);\n        }\n\n        element.patch(settings);\n\n        return element;\n    }\n\n    c(settings) {\n        return this.element(settings);\n    }\n\n    get w() {\n        return this._options.w;\n    }\n\n    get h() {\n        return this._options.h;\n    }\n\n    get coordsWidth() {\n        return this.w / this._options.precision;\n    }\n\n    get coordsHeight() {\n        return this.h / this._options.precision;\n    }\n\n    addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        if (this._lastGcFrame !== this.frameCounter) {\n            if (this._usedMemory > this.getOption('memoryPressure')) {\n                this.gc(false);\n                if (this._usedMemory > this.getOption('memoryPressure') - 2e6) {\n                    // Too few released. Aggressive cleanup.\n                    this.gc(true);\n                }\n            }\n        }\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    addVramUsage(delta, alpha) {\n        if (alpha) {\n            this._usedVramAlpha += delta;\n        }\n        else {\n            this._usedVramNonAlpha += delta;\n        }\n    }\n\n    get usedVramAlpha() {\n        return this._usedVramAlpha;\n    }\n\n    get usedVramNonAlpha() {\n        return this._usedVramNonAlpha;\n    }\n\n    get usedVram() {\n        return this._usedVramAlpha + this._usedVramNonAlpha;\n    }\n\n    gc(aggressive) {\n        if (this._lastGcFrame !== this.frameCounter) {\n            this._lastGcFrame = this.frameCounter;\n            const memoryUsageBefore = this._usedMemory;\n            this.gcTextureMemory(aggressive);\n            this.gcRenderTextureMemory(aggressive);\n            this.renderer.gc(aggressive);\n\n            if (this.application.getOption('debug')) {\n                console.log(`[Lightning] GC${aggressive ? \"[aggressive]\" : \"\"}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);\n                const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;\n                console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);\n            }\n        }\n    }\n\n    gcTextureMemory(aggressive = false) {\n        if (aggressive && this.ctx.root.visible) {\n            // Make sure that ALL textures are cleaned;\n            this.ctx.root.visible = false;\n            this.textureManager.gc();\n            this.ctx.root.visible = true;\n        } else {\n            this.textureManager.gc();\n        }\n    }\n\n    gcRenderTextureMemory(aggressive = false) {\n        if (aggressive && this.root.visible) {\n            // Make sure that ALL render textures are cleaned;\n            this.root.visible = false;\n            this.ctx.freeUnusedRenderTextures(0);\n            this.root.visible = true;\n        } else {\n            this.ctx.freeUnusedRenderTextures(0);\n        }\n    }\n\n    getDrawingCanvas() {\n        return this.platform.getDrawingCanvas();\n    }\n\n    update() {\n        this.ctx.update()\n    }\n\n    addServiceProvider(serviceprovider) {\n        if (Utils.isSpark) {\n            this.platform.addServiceProvider(serviceprovider);\n        }\n    }\n\n    getChildrenByPosition(x, y) {\n        const children = [];\n        this.root.core.update();\n        this.root.core.collectAtCoord(x, y, children);\n\n        return children;\n    }\n}\n\nimport Element from \"./Element.mjs\";\nimport StageUtils from \"./StageUtils.mjs\";\nimport TextureManager from \"./TextureManager.mjs\";\nimport TextureThrottler from \"./TextureThrottler.mjs\";\nimport CoreContext from \"./core/CoreContext.mjs\";\nimport TransitionManager from \"../animation/TransitionManager.mjs\";\nimport AnimationManager from \"../animation/AnimationManager.mjs\";\nimport RectangleTexture from \"../textures/RectangleTexture.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"./Component.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class Application extends Component {\n\n    constructor(options = {}, properties) {\n        // Save options temporarily to avoid having to pass it through the constructor.\n        Application._temp_options = options;\n\n        // Booting flag is used to postpone updateFocusSettings;\n        Application.booting = true;\n        const stage = new Stage(options.stage);\n        super(stage, properties);\n        Application.booting = false;\n\n        this.__updateFocusCounter = 0;\n        this.__keypressTimers = new Map();\n        this.__hoveredChild = null;\n\n        // We must construct while the application is not yet attached.\n        // That's why we 'init' the stage later (which actually emits the attach event).\n        this.stage.init();\n\n        // Initially, the focus settings are updated after both the stage and application are constructed.\n        this.updateFocusSettings();\n\n        this.__keymap = this.getOption('keys');\n\n        if (this.__keymap) {\n            this.stage.platform.registerKeydownHandler((e) => {\n                this._receiveKeydown(e);\n            });\n\n            this.stage.platform.registerKeyupHandler((e) => {\n                this._receiveKeyup(e);\n            });\n        }\n\n        if (this.getOption(\"enablePointer\")) {\n            this.stage.platform.registerClickHandler((e) => {\n                this._receiveClick(e);\n            });\n\n            this.stage.platform.registerHoverHandler((e) => {\n                this._receiveHover(e);\n            });\n\n            this.stage.platform.registerScrollWheelHandler((e) => {\n                this._recieveScrollWheel(e);\n            });\n\n            this.cursor = 'default';\n        }\n    }\n\n    getOption(name) {\n        return this.__options[name];\n    }\n\n    _setOptions(o) {\n        this.__options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this.__options[name] = def;\n            } else {\n                this.__options[name] = value;\n            }\n        }\n\n        opt('debug', false);\n        opt('keys', {\n            38: \"Up\",\n            40: \"Down\",\n            37: \"Left\",\n            39: \"Right\",\n            13: \"Enter\",\n            8: \"Back\",\n            27: \"Exit\"\n        });\n        opt('enablePointer', false);\n    }\n\n    __construct() {\n        this.stage.setApplication(this);\n\n        this._setOptions(Application._temp_options);\n        delete Application._temp_options;\n\n        super.__construct();\n    }\n\n    __init() {\n        super.__init();\n        this.__updateFocus();\n    }\n\n    updateFocusPath() {\n        this.__updateFocus();\n    }\n\n    __updateFocus() {\n        const notOverridden = this.__updateFocusRec();\n\n        if (!Application.booting && notOverridden) {\n            this.updateFocusSettings();\n        }\n    }\n\n    __updateFocusRec() {\n        const updateFocusId = ++this.__updateFocusCounter;\n        this.__updateFocusId = updateFocusId;\n\n        const newFocusPath = this.__getFocusPath();\n        const newFocusedComponent = newFocusPath[newFocusPath.length - 1];\n        const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : undefined;\n\n        if (!prevFocusedComponent) {\n            // Focus events.\n            this._focusPath = [];\n            for (let i = 0, n = newFocusPath.length; i < n; i++) {\n                this._focusPath.push(newFocusPath[i]);\n                this._focusPath[i]._focus(newFocusedComponent, undefined);\n                const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                if (focusOverridden) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            let m = Math.min(this._focusPath.length, newFocusPath.length);\n            let index;\n            for (index = 0; index < m; index++) {\n                if (this._focusPath[index] !== newFocusPath[index]) {\n                    break;\n                }\n            }\n\n            if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {\n\n                if (this.getOption('debug')) {\n                    console.log('[Lightning] Focus changed: ' + newFocusedComponent.getLocationString());\n                }\n\n                // Unfocus events.\n                for (let i = this._focusPath.length - 1; i >= index; i--) {\n                    const unfocusedElement = this._focusPath.pop();\n                    unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus events.\n                for (let i = index, n = newFocusPath.length; i < n; i++) {\n                    this._focusPath.push(newFocusPath[i]);\n                    this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus changed events.\n                for (let i = 0; i < index; i++) {\n                    this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    updateFocusSettings() {\n        const focusedComponent = this._focusPath[this._focusPath.length - 1];\n\n        // Get focus settings. These can be used for dynamic application-wide settings that depend on the\n        // focus directly (such as the application background).\n        const focusSettings = {};\n        const defaultSetFocusSettings = Component.prototype._setFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {\n                this._focusPath[i]._setFocusSettings(focusSettings);\n            }\n        }\n\n        const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {\n                this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);\n            }\n        }\n\n        this.__prevFocusSettings = focusSettings;\n    }\n\n    _handleFocusSettings(settings, prevSettings, focused, prevFocused) {\n        // Override to handle focus-based settings.\n    }\n\n    __getFocusPath() {\n        const path = [this];\n        let current = this;\n        do {\n            const nextFocus = current._getFocused();\n            if (!nextFocus || (nextFocus === current)) {\n                // Found!;\n                break;\n            }\n\n\n            let ptr = nextFocus.cparent;\n            if (ptr === current) {\n                path.push(nextFocus);\n            } else {\n                // Not an immediate child: include full path to descendant.\n                const newParts = [nextFocus];\n                do {\n                    if (!ptr) {\n                        current._throwError(\"Return value for _getFocused must be an attached descendant component but its '\" + nextFocus.getLocationString() + \"'\");\n                    }\n                    newParts.push(ptr);\n                    ptr = ptr.cparent;\n                } while (ptr !== current);\n\n                // Add them reversed.\n                for (let i = 0, n = newParts.length; i < n; i++) {\n                    path.push(newParts[n - i - 1]);\n                }\n            }\n\n            current = nextFocus;\n        } while(true);\n\n        return path;\n    }\n\n    get focusPath() {\n        return this._focusPath;\n    }\n\n    /**\n     * Injects an event in the state machines, top-down from application to focused component.\n     */\n    focusTopDownEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = 0; i < n; i++) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Injects an event in the state machines, bottom-up from focused component to application.\n     */\n    focusBottomUpEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = n - 1; i >= 0; i--) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _receiveKeydown(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n        const path = this.focusPath;\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                const hasTimer = this.__keypressTimers.has(keys[i]);\n                // prevent event from getting fired when the timeout is still active\n                if (path[path.length - 1].longpress && hasTimer) {\n                    return;\n                }\n\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, \"_captureKey\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, \"_handleKey\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKey\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKey\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        const consumer = path[path.length - 1];\n\n        if (keys && consumer.longpress) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                this._startLongpressTimer(keys[i], consumer);\n            }\n        }\n    }\n\n    /**\n     * Keyup listener\n     * To take away some confusion we add `Release` to the event to prevent ending up with method names like:\n     *  _handleLeftUp / _handleUpUp / _handleEnterUp etc\n     *\n     * @param e\n     * @private\n     */\n    _receiveKeyup(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, \"_captureKeyRelease\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, \"_handleKeyRelease\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKeyRelease\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKeyRelease\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (this.__keypressTimers.has(keys[i])) {\n                    // keyup has fired before end of timeout so we clear it\n                    clearTimeout(this.__keypressTimers.get(keys[i]));\n                    // delete so we can register it again\n                    this.__keypressTimers.delete(keys[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Registers and starts a timer for the pressed key. Timer will be cleared when the key is released\n     * before the timer goes off.\n     *\n     * If key is not release (keyup) the longpress handler will be fired.\n     * Configuration can be via the Components template:\n     *\n     * static _template() {\n     *     return {\n     *         w:100, h:100,\n     *         longpress:{up:700, down:500}\n     *     }\n     * }     *\n     * // this will get called when up has been pressed for 700ms\n     * _handleUpLong() {\n     *\n     * }\n     *\n     * @param key\n     * @param element\n     * @private\n     */\n    _startLongpressTimer(key, element) {\n        const config = element.longpress;\n        const lookup = key.toLowerCase();\n\n        if (config[lookup]) {\n            const timeout = config[lookup];\n            if (!Utils.isNumber(timeout)) {\n                element._throwError(\"config value for longpress must be a number\");\n            } else {\n                this.__keypressTimers.set(key, setTimeout(() => {\n                    if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, \"_captureKey\"], {})) {\n                        this.stage.application.focusBottomUpEvent([`_handle${key}Long`, \"_handleKey\"], {});\n                    }\n\n                    this.__keypressTimers.delete(key);\n                }, timeout || 500 /* prevent 0ms */));\n            }\n        }\n        return;\n    }\n\n    _recieveScrollWheel(e) {\n        const obj = e;\n        const {clientX, clientY} = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            if (!this.fireTopDownScrollWheelHandler(\"_captureScroll\", obj)) {\n                this.fireBottomUpScrollWheelHandler(\"_handleScroll\", obj);\n            }\n        }\n    }\n\n    fireTopDownScrollWheelHandler(event, obj) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children).reverse();\n        let n = affected.length;\n\n        while(n--) {\n            const child = affected[n];\n            if (child && child[event]) {\n                child._captureScroll(obj);\n                return true; \n            }\n        }\n        return false;\n    }\n\n    fireBottomUpScrollWheelHandler(event, obj) {\n        const {clientX, clientY} = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[event]) {\n                child._handleScroll(obj);\n                return true;\n            }\n            child = child.parent;\n        }\n        return false;\n    }\n\n    _receiveClick(e) {\n        const obj = e;\n        const {clientX, clientY} = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpClickHandler(obj);\n        }\n    }\n\n    fireBottomUpClickHandler(obj) {\n        const {clientX, clientY} = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[\"_handleClick\"]) {\n                child._handleClick(target);\n                break;\n            }\n            child = child.parent;\n        }\n    }\n\n    _receiveHover(e) {\n        const obj = e;\n        const {clientX, clientY} = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpHoverHandler(obj);\n        }\n    }\n\n    fireBottomUpHoverHandler(obj) {\n        const {clientX, clientY} = obj;\n        const target = this._getTargetChild(clientX, clientY);\n\n        // Only fire handlers when pointer target changes\n        if (target !== this.__hoveredChild) {\n\n            let hoveredBranch = new Set();\n            let newHoveredBranch = new Set();\n\n            if (target) {\n                newHoveredBranch = new Set(target.getAncestors());\n            }\n\n            if (this.__hoveredChild) {\n                hoveredBranch = new Set(this.__hoveredChild.getAncestors());\n                for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {\n                    const c = Component.getComponent(elem);\n                    if (c[\"_handleUnhover\"]) {\n                        c._handleUnhover(elem);\n                    }\n                    if (elem.parent && elem.parent.cursor) {\n                        this.stage.getCanvas().style.cursor = elem.parent.cursor;\n                    }\n                }\n            }\n\n            this.__hoveredChild = target;\n\n            const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e))\n            for (const elem of diffBranch) {\n                const c = Component.getComponent(elem);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(elem);\n                }\n            }\n\n            // New element hover cursor\n            const lastElement = diffBranch[0];\n            if (lastElement && lastElement.cursor) {\n                this.stage.getCanvas().style.cursor = lastElement.cursor;\n            }\n\n            // Rerun _handleHover for target element in case it's been hovered\n            // back from its child\n            if (diffBranch.length === 0 && target) {\n                const c = Component.getComponent(target);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(target);\n                }\n            }\n        }\n    }\n\n    _getTargetChild(clientX, clientY) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children);\n        let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);\n\n        hoverableChildren.sort((a,b) => {\n            // Sort by zIndex and then id\n            if (a.zIndex > b.zIndex) {\n                return 1;\n            } else if (a.zIndex < b.zIndex) {\n                return -1;\n            } else {\n                return a.id > b.id ? 1: -1;\n            }\n        });\n\n        if (hoverableChildren.length) {\n            // Assume target has highest zIndex (id when zIndex equal)\n            return hoverableChildren.slice(-1)[0];\n        } else {\n            return null;\n        }\n    }\n\n    _findChildren(bucket, children) {\n        let n = children.length;\n        while (n--) {\n            const child = children[n];\n            // only add active children\n            if (child.__active && child.collision) {\n                if (child.collision === true) {\n                    bucket.push(child);\n                }\n                if (child.hasChildren()) {\n                    this._findChildren(bucket, child.children);\n                }\n            }\n        }\n        return bucket;\n    }\n\n    _withinClickableRange(affectedChildren, cursorX, cursorY) {\n        let n = affectedChildren.length;\n        const candidates = [];\n\n        // loop through affected children\n        // and perform collision detection\n        while (n--) {\n            const child = affectedChildren[n];\n            const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n            const ctx = child.core._worldContext;\n\n            const cx = ctx.px * precision;\n            const cy = ctx.py * precision;\n            const cw = child.finalW * ctx.ta * precision;\n            const ch = child.finalH * ctx.td * precision;\n\n            if (cx > this.stage.w || cy > this.stage.h) {\n                continue;\n            }\n\n            if (child.parent.core._scissor) {\n                const scissor = child.parent.core._scissor.map((v) => v * precision);\n                if (!this._testCollision(cursorX, cursorY, ...scissor))\n                    continue\n            }\n\n            if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {\n                candidates.push(child);\n            }\n        }\n        return candidates;\n    }\n\n    _testCollision(px, py, cx, cy, cw, ch) {\n        if (px >= cx &&\n            px <= cx + cw &&\n            py >= cy &&\n            py <= cy + ch) {\n            return true;\n        }\n        return false;\n    }\n\n    destroy() {\n        if (!this._destroyed) {\n            this._destroy();\n            this.stage.destroy();\n            this._destroyed = true;\n        }\n    }\n\n    _destroy() {\n        // This forces the _detach, _disabled and _active events to be called.\n        this.stage.setApplication(undefined);\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n\n        if (this.__keypressTimers.size) {\n            for (const timer of this.__keypressTimers.values()) {\n                clearTimeout(timer);\n            }\n\n            this.__keypressTimers.clear();\n        }\n    }\n\n    getCanvas() {\n        return this.stage.getCanvas();\n    }\n\n}\n\nimport Stage from \"../tree/Stage.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticCanvasTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._factory = undefined;\n        this._lookupId = undefined;\n    }\n\n    set content({factory, lookupId = undefined}) {\n        this._factory = factory;\n        this._lookupId = lookupId;\n        this._changed();\n    }\n\n    _getIsValid() {\n        return !!this._factory;\n    }\n\n    _getLookupId() {\n        return this._lookupId;\n    }\n\n    _getSourceLoader() {\n        const f = this._factory;\n        return (cb) => {\n            return f((err, canvas) => {\n                if (err) {\n                    return cb(err);\n                }\n                cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));\n            }, this.stage);\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport StaticCanvasTexture from \"../textures/StaticCanvasTexture.mjs\"\n\nexport default class Tools {\n\n    static getCanvasTexture(canvasFactory, lookupId) {\n        return {type: StaticCanvasTexture, content: {factory: canvasFactory, lookupId: lookupId}}\n    }\n\n    static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);\n            } else {\n                cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));\n            }\n        };\n        let id = 'rect' + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (fill === undefined) fill = true;\n        if (strokeWidth === undefined) strokeWidth = 0;\n\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + strokeWidth + 2;\n        canvas.height = h + strokeWidth + 2;\n\n        ctx.beginPath();\n        let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n\n        if (fill) {\n            if (Utils.isNumber(fillColor)) {\n                ctx.fillStyle = StageUtils.getRgbaString(fillColor);\n            } else {\n                ctx.fillStyle = \"white\";\n            }\n            ctx.fill();\n        }\n\n        if (strokeWidth) {\n            if (Utils.isNumber(strokeColor)) {\n                ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);\n            } else {\n                ctx.strokeStyle = \"white\";\n            }\n            ctx.lineWidth = strokeWidth;\n            ctx.stroke();\n        }\n\n        return canvas;\n    }\n\n    static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);\n            } else {\n                cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));\n            }\n        };\n        let id = 'shadow' + [w, h, blur, margin].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createShadowRect(stage, w, h, radius, blur, margin) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + margin * 2;\n        canvas.height = h + margin * 2;\n\n        // WpeWebKit bug: we experienced problems without this with shadows in noncompositedwebgl mode.\n        ctx.globalAlpha = 0.01;\n        ctx.fillRect(0, 0, 0.01, 0.01);\n        ctx.globalAlpha = 1.0;\n\n        ctx.shadowColor = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.fillStyle = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.shadowBlur = blur;\n        ctx.shadowOffsetX = (w + 10) + margin;\n        ctx.shadowOffsetY = margin;\n\n        ctx.beginPath();\n        const x = -(w + 10);\n        const y = 0;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n        ctx.fill();\n\n        return canvas;\n    }\n\n    static getSvgTexture(url, w, h) {\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createSvg(cb, stage, url, w, h);\n            } else {\n                this.createSvg(cb, stage, url, w, h);\n            }\n        };\n        let id = 'svg' + [w, h, url].join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createSvg(cb, stage, url, w, h) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        let img = new Image();\n        img.onload = () => {\n            canvas.width = w;\n            canvas.height = h;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            cb(null, canvas);\n        }\n        img.onError = (err) => {\n            cb(err);\n        }\n\n        // On the PS4 platform setting the `crossOrigin` attribute on images\n        // can cause CORS failures.\n        if (!Utils.isPS4) {\n            img.crossOrigin = \"Anonymous\";\n        }\n\n        img.src = url;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class ObjMerger {\n\n    static isMf(f) {\n        return Utils.isFunction(f) && f.__mf;\n    }\n\n    static mf(f) {\n        // Set as merge function.\n        f.__mf = true;\n        return f;\n    }\n\n    static merge(a, b) {\n        const aks = Object.keys(a);\n        const bks = Object.keys(b);\n\n        if (!bks.length) {\n            return a;\n        }\n\n        // Create index array for all elements.\n        const ai = {};\n        const bi = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n            ai[key] = -1;\n            bi[key] = i;\n        }\n        for (let i = 0, n = aks.length; i < n; i++) {\n            const key = aks[i];\n            ai[key] = i;\n            if (bi[key] === undefined) {\n                bi[key] = -1;\n            }\n        }\n\n        const aksl = aks.length;\n\n        const result = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n\n            // Prepend all items in a that are not in b - before the now added b attribute.\n            const aIndex = ai[key];\n            let curIndex = aIndex;\n            while(--curIndex >= 0) {\n                const akey = aks[curIndex];\n                if (bi[akey] !== -1) {\n                    // Already found? Stop processing.\n                    // Not yet found but exists in b? Also stop processing: wait until we find it in b.\n                    break;\n                }\n            }\n            while(++curIndex < aIndex) {\n                const akey = aks[curIndex];\n                result[akey] = a[akey];\n            }\n\n            const bv = b[key];\n            const av = a[key];\n            let r;\n            if (this.isMf(bv)) {\n                r = bv(av);\n            } else {\n                if (!Utils.isObjectLiteral(av) || !Utils.isObjectLiteral(bv)) {\n                    r = bv;\n                } else {\n                    r = ObjMerger.merge(av, bv);\n                }\n            }\n\n            // When marked as undefined, property is deleted.\n            if (r !== undefined) {\n                result[key] = r;\n            }\n        }\n\n        // Append remaining final items in a.\n        let curIndex = aksl;\n        while(--curIndex >= 0) {\n            const akey = aks[curIndex];\n            if (bi[akey] !== -1) {\n                break;\n            }\n        }\n        while(++curIndex < aksl) {\n            const akey = aks[curIndex];\n            result[akey] = a[akey];\n        }\n\n        return result;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"../tree/ObjectList.mjs\";\n\nexport default class ObjectListProxy extends ObjectList {\n\n    constructor(target) {\n        super();\n        this._target = target;\n    }\n\n    onAdd(item, index) {\n        this._target.addAt(item, index);\n    }\n\n    onRemove(item, index) {\n        this._target.removeAt(index);\n    }\n\n    onSync(removed, added, order) {\n        this._target._setByArray(order);\n    }\n\n    onSet(item, index) {\n        this._target.setAt(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._target.setAt(item, toIndex);\n    }\n\n    createItem(object) {\n        return this._target.createItem(object);\n    }\n\n    isItem(object) {\n        return this._target.isItem(object);\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectListProxy from \"./ObjectListProxy.mjs\";\n\nexport default class ObjectListWrapper extends ObjectListProxy {\n\n    constructor(target, wrap) {\n        super(target);\n        this._wrap = wrap;\n    }\n\n    wrap(item) {\n        let wrapper = this._wrap(item);\n        item._wrapper = wrapper;\n        return wrapper;\n    }\n\n    onAdd(item, index) {\n        item = this.wrap(item);\n        super.onAdd(item, index);\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n    }\n\n    onSync(removed, added, order) {\n        added.forEach(a => this.wrap(a));\n        order = order.map(a => a._wrapper);\n        super.onSync(removed, added, order);\n    }\n\n    onSet(item, index) {\n        item = this.wrap(item);\n        super.onSet(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        super.onMove(item, fromIndex, toIndex);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class NoiseTexture extends Texture {\n\n    _getLookupId() {\n        return '__noise';\n    }\n\n    _getSourceLoader() {\n        const gl = this.stage.gl;\n        return function(cb) {\n            const noise = new Uint8Array(128 * 128 * 4);\n            for (let i = 0; i < 128 * 128 * 4; i+=4) {\n                const v = Math.floor(Math.random() * 256);\n                noise[i] = v;\n                noise[i+1] = v;\n                noise[i+2] = v;\n                noise[i+3] = 255;\n            }\n            const texParams = {}\n\n            if (gl) {\n                texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;\n                texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;\n                texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            cb(null, {source: noise, w: 128, h: 128, texParams: texParams});\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class HtmlTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._htmlElement = undefined;\n        this._scale = 1;\n    }\n\n    set htmlElement(v) {\n        this._htmlElement = v;\n        this._changed();\n    }\n\n    get htmlElement() {\n        return this._htmlElement;\n    }\n\n    set scale(v) {\n        this._scale = v;\n        this._changed();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set html(v) {\n        if (!v) {\n            this.htmlElement = undefined;\n        } else {\n            const d = document.createElement('div');\n            d.innerHTML = \"<div>\" + v + \"</div>\";\n            this.htmlElement = d.firstElementChild;\n        }\n    }\n\n    get html() {\n        return this._htmlElement.innerHTML;\n    }\n\n    _getIsValid() {\n        return this.htmlElement;\n    }\n\n    _getLookupId() {\n        return this._scale + \":\" + this._htmlElement.innerHTML;\n    }\n\n    _getSourceLoader() {\n        const htmlElement = this._htmlElement;\n        const scale = this._scale;\n        return function(cb) {\n            if (!window.html2canvas) {\n                return cb(new Error(\"Please include html2canvas (https://html2canvas.hertzen.com/)\"));\n            }\n\n            const area = HtmlTexture.getPreloadArea();\n            area.appendChild(htmlElement);\n\n            html2canvas(htmlElement, {backgroundColor: null, scale: scale}).then(function(canvas) {\n                area.removeChild(htmlElement);\n                if (canvas.height === 0) {\n                    return cb(new Error(\"Canvas height is 0\"));\n                }\n                cb(null, {source: canvas, width: canvas.width, height: canvas.height});\n            }).catch(e => {\n                console.error('[Lightning]', e);\n            });\n        }\n    }\n\n    static getPreloadArea() {\n        if (!this._preloadArea) {\n            // Preload area must be included in document body and must be visible to trigger html element rendering.\n            this._preloadArea = document.createElement('div');\n            if (this._preloadArea.attachShadow) {\n                // Use a shadow DOM if possible to prevent styling from interfering.\n                this._preloadArea.attachShadow({mode: 'closed'});\n            }\n            this._preloadArea.style.opacity = 0;\n            this._preloadArea.style.pointerEvents = 'none';\n            this._preloadArea.style.position = 'fixed';\n            this._preloadArea.style.display = 'block';\n            this._preloadArea.style.top = '100vh';\n            this._preloadArea.style.overflow = 'hidden';\n            document.body.appendChild(this._preloadArea);\n        }\n        return this._preloadArea;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticTexture extends Texture {\n\n    constructor(stage, options) {\n        super(stage);\n\n        this._options = options;\n    }\n\n    set options(v) {\n        if (this._options !== v) {\n            this._options = v;\n            this._changed();\n        }\n    }\n\n    get options() {\n        return this._options;\n    }\n\n    _getIsValid() {\n        return !!this._options;\n    }\n\n    _getSourceLoader() {\n        return (cb) => {\n            cb(null, this._options);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class ListComponent extends Component {\n\n    constructor(stage) {\n        super(stage);\n\n        this._wrapper = super._children.a({});\n\n        this._reloadVisibleElements = false;\n\n        this._visibleItems = new Set();\n\n        this._index = 0;\n\n        this._started = false;\n\n        /**\n         * The transition definition that is being used when scrolling the items.\n         * @type TransitionSettings\n         */\n        this._scrollTransitionSettings = this.stage.transitions.createSettings({});\n\n        /**\n         * The scroll area size in pixels per item.\n         */\n        this._itemSize = 100;\n\n        this._viewportScrollOffset = 0;\n\n        this._itemScrollOffset = 0;\n\n        /**\n         * Should the list jump when scrolling between end to start, or should it be continuous, like a carrousel?\n         */\n        this._roll = false;\n\n        /**\n         * Allows restricting the start scroll position.\n         */\n        this._rollMin = 0;\n\n        /**\n         * Allows restricting the end scroll position.\n         */\n        this._rollMax = 0;\n\n        /**\n         * Definition for a custom animation that is applied when an item is (partially) selected.\n         * @type AnimationSettings\n         */\n        this._progressAnimation = null;\n\n        /**\n         * Inverts the scrolling direction.\n         * @type {boolean}\n         * @private\n         */\n        this._invertDirection = false;\n\n        /**\n         * Layout the items horizontally or vertically?\n         * @type {boolean}\n         * @private\n         */\n        this._horizontal = true;\n\n        this.itemList = new ListItems(this);\n    }\n\n    _allowChildrenAccess() {\n        return false;\n    }\n\n    get items() {\n        return this.itemList.get();\n    }\n\n    set items(children) {\n        this.itemList.patch(children);\n    }\n\n    start() {\n        this._wrapper.transition(this.property, this._scrollTransitionSettings);\n        this._scrollTransition = this._wrapper.transition(this.property);\n        this._scrollTransition.on('progress', p => this.update());\n\n        this.setIndex(0, true, true);\n\n        this._started = true;\n\n        this.update();\n    }\n\n    setIndex(index, immediate = false, closest = false) {\n        let nElements = this.length;\n        if (!nElements) return;\n\n        this.emit('unfocus', this.getElement(this.realIndex), this._index, this.realIndex);\n\n        if (closest) {\n            // Scroll to same offset closest to the index.\n            let offset = Utils.getModuloIndex(index, nElements);\n            let o = Utils.getModuloIndex(this.index, nElements);\n            let diff = offset - o;\n            if (diff > 0.5 * nElements) {\n                diff -= nElements;\n            } else if (diff < -0.5 * nElements) {\n                diff += nElements;\n            }\n            this._index += diff;\n        } else {\n            this._index = index;\n        }\n\n        if (this._roll || (this.viewportSize > this._itemSize * nElements)) {\n            this._index = Utils.getModuloIndex(this._index, nElements);\n        }\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = direction * this._index * this._itemSize;\n\n        if (this._roll) {\n            let min, max, scrollDelta;\n            if (direction == 1) {\n                max = (nElements - 1) * this._itemSize;\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max -= scrollDelta;\n\n                min = this.viewportSize - (this._itemSize + scrollDelta);\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.max(Math.min(value, max), min);\n            } else {\n                max = (nElements * this._itemSize - this.viewportSize);\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max += scrollDelta;\n\n                let min = scrollDelta;\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.min(Math.max(-max, value), -min);\n            }\n        }\n\n        this._scrollTransition.start(value);\n\n        if (immediate) {\n            this._scrollTransition.finish();\n        }\n\n        this.emit('focus', this.getElement(this.realIndex), this._index, this.realIndex);\n    }\n\n    getAxisPosition() {\n        let target = -this._scrollTransition._targetValue;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = -direction * this._index * this._itemSize;\n\n        return this._viewportScrollOffset * this.viewportSize + (value - target);\n    }\n\n    update() {\n        if (!this._started) return;\n\n        let nElements = this.length;\n        if (!nElements) return;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n\n        // Map position to index value.\n        let v = (this._horizontal ? this._wrapper.x : this._wrapper.y);\n\n        let viewportSize = this.viewportSize;\n        let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;\n        v += scrollDelta;\n\n        let s, e, ps, pe;\n        if (direction == -1) {\n            s = Math.floor(-v / this._itemSize);\n            ps = 1 - ((-v / this._itemSize) - s);\n            e = Math.floor((viewportSize - v) / this._itemSize);\n            pe = (((viewportSize - v) / this._itemSize) - e);\n        } else {\n            s = Math.ceil(v / this._itemSize);\n            ps = 1 + (v / this._itemSize) - s;\n            e = Math.ceil((v - viewportSize) / this._itemSize);\n            pe = e - ((v - viewportSize) / this._itemSize);\n        }\n        if (this._roll || (viewportSize > this._itemSize * nElements)) {\n            // Don't show additional items.\n            if (e >= nElements) {\n                e = nElements - 1;\n                pe = 1;\n            }\n            if (s >= nElements) {\n                s = nElements - 1;\n                ps = 1;\n            }\n            if (e <= -1) {\n                e = 0;\n                pe = 1;\n            }\n            if (s <= -1) {\n                s = 0;\n                ps = 1;\n            }\n        }\n\n        let offset = -direction * s * this._itemSize;\n\n        let item;\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n\n            let element = this.getElement(realIndex);\n            item = element.parent;\n            this._visibleItems.delete(item);\n            if (this._horizontal) {\n                item.x = offset + scrollDelta;\n            } else {\n                item.y = offset + scrollDelta;\n            }\n\n            let wasVisible = item.visible;\n            item.visible = true;\n\n            if (!wasVisible || this._reloadVisibleElements) {\n                // Turned visible.\n                this.emit('visible', index, realIndex);\n            }\n\n\n\n            if (this._progressAnimation) {\n                let p = 1;\n                if (index == s) {\n                    p = ps;\n                } else if (index == e) {\n                    p = pe;\n                }\n\n                // Use animation to progress.\n                this._progressAnimation.apply(element, p);\n            }\n\n            offset += this._itemSize;\n        }\n\n        // Handle item visibility.\n        let self = this;\n        this._visibleItems.forEach(function(invisibleItem) {\n            invisibleItem.visible = false;\n            self._visibleItems.delete(invisibleItem);\n        });\n\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n            this._visibleItems.add(this.getWrapper(realIndex));\n        }\n\n        this._reloadVisibleElements = false;\n    }\n\n    setPrevious() {\n        this.setIndex(this._index - 1);\n    }\n\n    setNext() {\n        this.setIndex(this._index + 1);\n    }\n\n    getWrapper(index) {\n        return this._wrapper.children[index];\n    }\n\n    getElement(index) {\n        let e = this._wrapper.children[index];\n        return e ? e.children[0] : null;\n    }\n\n    reload() {\n        this._reloadVisibleElements = true;\n        this.update();\n    }\n\n    get element() {\n        let e = this._wrapper.children[this.realIndex];\n        return e ? e.children[0] : null;\n    }\n\n    get length() {\n        return this._wrapper.children.length;\n    }\n\n    get property() {\n        return this._horizontal ? 'x' : 'y';\n    }\n\n    get viewportSize() {\n        return this._horizontal ? this.w : this.h;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get realIndex() {\n        return Utils.getModuloIndex(this._index, this.length);\n    }\n\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    set itemSize(v) {\n        this._itemSize = v;\n        this.update();\n    }\n\n    get viewportScrollOffset() {\n        return this._viewportScrollOffset;\n    }\n\n    set viewportScrollOffset(v) {\n        this._viewportScrollOffset = v;\n        this.update();\n    }\n\n    get itemScrollOffset() {\n        return this._itemScrollOffset;\n    }\n\n    set itemScrollOffset(v) {\n        this._itemScrollOffset = v;\n        this.update();\n    }\n\n    get scrollTransitionSettings() {\n        return this._scrollTransitionSettings;\n    }\n\n    set scrollTransitionSettings(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    set scrollTransition(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    get scrollTransition() {\n        return this._scrollTransition;\n    }\n\n    get progressAnimation() {\n        return this._progressAnimation;\n    }\n\n    set progressAnimation(v) {\n        if (Utils.isObjectLiteral(v)) {\n            this._progressAnimation = this.stage.animations.createSettings(v);\n        } else {\n            this._progressAnimation = v;\n        }\n        this.update();\n    }\n\n    get roll() {\n        return this._roll;\n    }\n\n    set roll(v) {\n        this._roll = v;\n        this.update();\n    }\n\n    get rollMin() {\n        return this._rollMin;\n    }\n\n    set rollMin(v) {\n        this._rollMin = v;\n        this.update();\n    }\n\n    get rollMax() {\n        return this._rollMax;\n    }\n\n    set rollMax(v) {\n        this._rollMax = v;\n        this.update();\n    }\n\n    get invertDirection() {\n        return this._invertDirection;\n    }\n\n    set invertDirection(v) {\n        if (!this._started) {\n            this._invertDirection = v;\n        }\n    }\n\n    get horizontal() {\n        return this._horizontal;\n    }\n\n    set horizontal(v) {\n        if (v !== this._horizontal) {\n            if (!this._started) {\n                this._horizontal = v;\n            }\n        }\n    }\n\n}\n\nimport ObjectListWrapper from \"../tools/ObjectListWrapper.mjs\";\nclass ListItems extends ObjectListWrapper {\n    constructor(list) {\n        let wrap = (item => {\n            let parent = item.stage.createElement();\n            parent.add(item);\n            parent.visible = false;\n            return parent;\n        })\n\n        super(list._wrapper._children, wrap);\n        this.list = list;\n    }\n\n    onAdd(item, index) {\n        super.onAdd(item, index);\n        this.checkStarted(index);\n    }\n\n    checkStarted(index) {\n        this.list._reloadVisibleElements = true;\n        if (!this.list._started) {\n            this.list.start();\n        } else {\n            if (this.list.length === 1) {\n                this.list.setIndex(0, true, true);\n            } else {\n                if (this.list._index >= this.list.length) {\n                    this.list.setIndex(0);\n                }\n            }\n            this.list.update();\n        }\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n        let ri = this.list.realIndex;\n        if (ri === index) {\n            if (ri === this.list.length) {\n                ri--;\n            }\n            if (ri >= 0) {\n                this.list.setIndex(ri);\n            }\n        } else if (ri > index) {\n            this.list.setIndex(ri - 1);\n        }\n\n        this.list._reloadVisibleElements = true;\n    }\n\n    onSet(item, index) {\n        super.onSet(item, index);\n        this.checkStarted(index);\n    }\n\n    onSync(removed, added, order) {\n        super.onSync(removed, added, order);\n        this.checkStarted(0);\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nimport Utils from \"../tree/Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class LinearBlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n\n        this._direction = new Float32Array([1, 0]);\n        this._kernelRadius = 1;\n    }\n\n    get x() {\n        return this._direction[0];\n    }\n\n    set x(v) {\n        this._direction[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._direction[1];\n    }\n\n    set y(v) {\n        this._direction[1] = v;\n        this.redraw();\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n\n    useDefault() {\n        return (this._kernelRadius === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"direction\", this._direction, this.gl.uniform2fv);\n        this._setUniform(\"kernelRadius\", this._kernelRadius, this.gl.uniform1i);\n\n        const w = operation.getRenderWidth();\n        const h = operation.getRenderHeight();\n        this._setUniform(\"resolution\", new Float32Array([w, h]), this.gl.uniform2fv);\n    }\n}\n\nLinearBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 resolution;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 direction;\n    uniform int kernelRadius;\n    \n    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3333333333333333) * direction;\n        color += texture2D(image, uv) * 0.29411764705882354;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n        return color; \n    }\n    \n    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n    }\n    \n    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.411764705882353) * direction;\n        vec2 off2 = vec2(3.2941176470588234) * direction;\n        vec2 off3 = vec2(5.176470588235294) * direction;\n        color += texture2D(image, uv) * 0.1964825501511404;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n        return color;\n    }    \n\n    void main(void){\n        if (kernelRadius == 1) {\n            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else if (kernelRadius == 2) {\n            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else {\n            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * 4x4 box blur shader which works in conjunction with a 50% rescale.\n */\nexport default class BoxBlurShader extends DefaultShader {\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const dx = 1.0 / operation.getTextureWidth(0);\n        const dy = 1.0 / operation.getTextureHeight(0);\n        this._setUniform(\"stepTextureCoord\", new Float32Array([dx, dy]), this.gl.uniform2fv);\n    }\n\n}\n\nBoxBlurShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 stepTextureCoord;\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec4 vColor;\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoordUl = aTextureCoord - stepTextureCoord;\n        vTextureCoordBr = aTextureCoord + stepTextureCoord;\n        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);\n        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nBoxBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));\n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class BlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._kernelRadius = 1;\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"blur(\" + this._kernelRadius + \"px)\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\nimport C2dBlurShader from \"../renderer/c2d/shaders/BlurShader.mjs\";\nimport Shader from \"../tree/Shader.mjs\";\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\n\nexport default class FastBlurComponent extends Component {\n    static _template() {\n        return {}\n    }\n\n    get wrap() {\n        return this.tag(\"Wrap\");\n    }\n\n    set content(v) {\n        return this.wrap.content = v;\n    }\n\n    get content() {\n        return this.wrap.content;\n    }\n\n    set padding(v) {\n        this.wrap._paddingX = v;\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this.wrap._paddingX = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set amount(v) {\n        return this.wrap.amount = v;\n    }\n\n    get amount() {\n        return this.wrap.amount;\n    }\n\n    _onResize() {\n        this.wrap.w = this.renderWidth;\n        this.wrap.h = this.renderHeight;\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    _build() {\n        this.patch({\n            Wrap: {type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent}\n        });\n    }\n\n}\n\n\nclass C2dFastBlurComponent extends Component {\n\n    static _template() {\n        return {\n            forceZIndexContext: true,\n            rtt: true,\n            Textwrap: {shader: {type: C2dBlurShader}, Content: {}}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n\n    }\n\n    static getSpline() {\n        if (!this._multiSpline) {\n            this._multiSpline = new MultiSpline();\n            this._multiSpline.parse(false, {0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39});\n        }\n        return this._multiSpline;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        this._wrapper.x = paddingX;\n        this._textwrap.x = -paddingX;\n\n        this._wrapper.y = paddingY;\n        this._textwrap.y = -paddingY;\n\n        this._textwrap.w = w + paddingX * 2;\n        this._textwrap.h = h + paddingY * 2;\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);\n    }\n\n    static _amountToKernelRadius(v) {\n        return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nclass WebGLFastBlurComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {}},\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            },\n            Result: {shader: {type: FastBlurOutputShader}, visible: false}\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n        this._layers = this.sel(\"Layers\");\n        this._output = this.sel(\"Result\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _buildLayers() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:1},{x:0,y:1,kernelRadius:1},{x:1.5,y:0,kernelRadius:1},{x:0,y:1.5,kernelRadius:1}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = Shader.create(this.stage, Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._output.x = -paddingX;\n        this._textwrap.x = -paddingX;\n        this._output.w = fw;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._output.y = -paddingY;\n        this._textwrap.y = -paddingY;\n        this._output.h = fh;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v === 0) {\n            this._textwrap.renderToTexture = false;\n            this._output.shader.otherTextureSource = null;\n            this._output.visible = false;\n        } else {\n            this._textwrap.renderToTexture = true;\n            this._output.visible = true;\n\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n\n            if (v <= 1) {\n                this._output.texture = this._textwrap.getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(0).getTexture();\n                this._output.shader.a = v;\n            } else if (v <= 2) {\n                this._output.texture = this.getLayer(0).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(1).getTexture();\n                this._output.shader.a = v - 1;\n            } else if (v <= 3) {\n                this._output.texture = this.getLayer(1).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(2).getTexture();\n                this._output.shader.a = v - 2;\n            } else if (v <= 4) {\n                this._output.texture = this.getLayer(2).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(3).getTexture();\n                this._output.shader.a = v - 3;\n            }\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._buildLayers();\n    }\n\n}\n\n/**\n * Shader that combines two textures into one output.\n */\nclass FastBlurOutputShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._a = 0;\n        this._otherTextureSource = null;\n    }\n\n    get a() {\n        return this._a;\n    }\n\n    set a(v) {\n        this._a = v;\n        this.redraw();\n    }\n\n    set otherTextureSource(v) {\n        this._otherTextureSource = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"a\", this._a, this.gl.uniform1f);\n        this._setUniform(\"uSampler2\", 1, this.gl.uniform1i);\n    }\n\n    beforeDraw(operation) {\n        let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;\n\n        let gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n}\n\nFastBlurOutputShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uSampler2;\n    uniform float a;\n    void main(void){\n        if (a == 1.0) {\n            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;\n        } else {\n            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\n\nexport default class BloomComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true,\n                BloomBase: {shader: {type: BloomBaseShader},\n                    Content: {}\n                }\n            },\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, scale: 2, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, scale: 4, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, scale: 8, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, scale: 16, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap.Content\");\n        this._layers = this.sel(\"Layers\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _build() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:3},{x:0,y:1,kernelRadius:3},{x:1.5,y:0,kernelRadius:3},{x:0,y:1.5,kernelRadius:3}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = this.stage.createShader(Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap.Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap.Content').patch(v);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._textwrap.x = -paddingX;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._textwrap.y = -paddingY;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v > 0) {\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._build();\n    }\n\n}\n\nclass BloomBaseShader extends DefaultShader {\n}\n\nBloomBaseShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float m = max(max(color.r, color.g), color.b);\n        float c = max(0.0, (m - 0.80)) * 5.0;\n        color = color * c;\n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class SmoothScaleComponent extends Component {\n\n    static _template() {\n        return {\n            ContentWrap: {renderOffscreen: true, forceZIndexContext: true, onAfterUpdate: SmoothScaleComponent._updateDimensions,\n                Content: {}\n            },\n            Scale: {visible: false}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._smoothScale = 1;\n        this._iterations = 0;\n    }\n\n    get content() {\n        return this.tag('Content');\n    }\n\n    set content(v) {\n        this.tag('Content').patch(v, true);\n    }\n\n    get smoothScale() {\n        return this._smoothScale;\n    }\n\n    set smoothScale(v) {\n        if (this._smoothScale !== v) {\n            let its = 0;\n            while(v < 0.5 && its < 12) {\n                its++;\n                v = v * 2;\n            }\n\n            this.scale = v;\n            this._setIterations(its);\n\n            this._smoothScale = v;\n        }\n    }\n\n    _setIterations(its) {\n        if (this._iterations !== its) {\n            const scalers = this.sel(\"Scale\").childList;\n            const content = this.sel(\"ContentWrap\");\n            while (scalers.length < its) {\n                const first = scalers.length === 0;\n                const texture = (first ? content.getTexture() : scalers.last.getTexture());\n                scalers.a({rtt: true, renderOffscreen: true, texture: texture});\n            }\n\n            SmoothScaleComponent._updateDimensions(this.tag(\"ContentWrap\"), true);\n\n            const useScalers = (its > 0);\n            this.patch({\n                ContentWrap: {renderToTexture: useScalers},\n                Scale: {visible: useScalers}\n            });\n\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                scalers.getAt(i).patch({\n                    visible: i < its,\n                    renderOffscreen: i !== its - 1\n                });\n            }\n            this._iterations = its;\n        }\n    }\n\n    static _updateDimensions(contentWrap, force) {\n        const content = contentWrap.children[0];\n        let w = content.renderWidth;\n        let h = content.renderHeight;\n        if (w !== contentWrap.w || h !== contentWrap.h || force) {\n            contentWrap.w = w;\n            contentWrap.h = h;\n\n            const scalers = contentWrap.parent.tag(\"Scale\").children;\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                w = w * 0.5;\n                h = h * 0.5;\n                scalers[i].w = w;\n                scalers[i].h = h;\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class BorderComponent extends Component {\n\n    static _template() {\n        return {\n            Content: {},\n            Borders: {\n                Top: {rect: true, visible: false, mountY: 1},\n                Right: {rect: true, visible: false},\n                Bottom: {rect: true, visible: false},\n                Left: {rect: true, visible: false, mountX: 1}\n            }\n        };\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._borderTop = this.tag(\"Top\");\n        this._borderRight = this.tag(\"Right\");\n        this._borderBottom = this.tag(\"Bottom\");\n        this._borderLeft = this.tag(\"Left\");\n\n        this.onAfterUpdate = function (element) {\n            const content = element.childList.first;\n            let w = element.core.w || content.renderWidth;\n            let h = element.core.h || content.renderHeight;\n            element._borderTop.w = w;\n            element._borderBottom.y = h;\n            element._borderBottom.w = w;\n            element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderLeft.y = -element._borderTop.h;\n            element._borderRight.x = w;\n            element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderRight.y = -element._borderTop.h;\n        };\n\n        this.borderWidth = 1;\n    }\n\n    get content() {\n        return this.sel('Content');\n    }\n\n    set content(v) {\n        this.sel('Content').patch(v, true);\n    }\n\n    get borderWidth() {\n        return this.borderWidthTop;\n    }\n\n    get borderWidthTop() {\n        return this._borderTop.h;\n    }\n\n    get borderWidthRight() {\n        return this._borderRight.w;\n    }\n\n    get borderWidthBottom() {\n        return this._borderBottom.h;\n    }\n\n    get borderWidthLeft() {\n        return this._borderLeft.w;\n    }\n\n    set borderWidth(v) {\n        this.borderWidthTop = v;\n        this.borderWidthRight = v;\n        this.borderWidthBottom = v;\n        this.borderWidthLeft = v;\n    }\n\n    set borderWidthTop(v) {\n        this._borderTop.h = v;\n        this._borderTop.visible = (v > 0);\n    }\n\n    set borderWidthRight(v) {\n        this._borderRight.w = v;\n        this._borderRight.visible = (v > 0);\n    }\n\n    set borderWidthBottom(v) {\n        this._borderBottom.h = v;\n        this._borderBottom.visible = (v > 0);\n    }\n\n    set borderWidthLeft(v) {\n        this._borderLeft.w = v;\n        this._borderLeft.visible = (v > 0);\n    }\n\n    get colorBorder() {\n        return this.colorBorderTop;\n    }\n\n    get colorBorderTop() {\n        return this._borderTop.color;\n    }\n\n    get colorBorderRight() {\n        return this._borderRight.color;\n    }\n\n    get colorBorderBottom() {\n        return this._borderBottom.color;\n    }\n\n    get colorBorderLeft() {\n        return this._borderLeft.color;\n    }\n\n    set colorBorder(v) {\n        this.colorBorderTop = v;\n        this.colorBorderRight = v;\n        this.colorBorderBottom = v;\n        this.colorBorderLeft = v;\n    }\n\n    set colorBorderTop(v) {\n        this._borderTop.color = v;\n    }\n\n    set colorBorderRight(v) {\n        this._borderRight.color = v;\n    }\n\n    set colorBorderBottom(v) {\n        this._borderBottom.color = v;\n    }\n\n    set colorBorderLeft(v) {\n        this._borderLeft.color = v;\n    }\n\n    get borderTop() {\n        return this._borderTop;\n    }\n\n    set borderTop(settings) {\n        this.borderTop.patch(settings);\n    }\n\n    get borderRight() {\n        return this._borderRight;\n    }\n\n    set borderRight(settings) {\n        this.borderRight.patch(settings);\n    }\n\n    get borderBottom() {\n        return this._borderBottom;\n    }\n\n    set borderBottom(settings) {\n        this.borderBottom.patch(settings);\n    }\n\n    get borderLeft() {\n        return this._borderLeft;\n    }\n\n    set borderLeft(settings) {\n        this.borderLeft.patch(settings);\n    }\n\n    set borders(settings) {\n        this.borderTop = settings;\n        this.borderLeft = settings;\n        this.borderBottom = settings;\n        this.borderRight = settings;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dDefaultShader from \"../../c2d/shaders/DefaultShader.mjs\";\nimport WebGLDefaultShader from \"../../webgl/shaders/DefaultShader.mjs\";\n\nexport class WebGLGrayscaleShader extends WebGLDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getC2d() {\n        return C2dGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nWebGLGrayscaleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;\n        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);\n    }\n`;\n\nexport class C2dGrayscaleShader extends C2dDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getWebGL() {\n        return WebGLGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"grayscale(\" + this._amount + \")\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport NoiseTexture from \"../../../textures/NoiseTexture.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * This shader can be used to fix a problem that is known as 'gradient banding'.\n */\nexport default class DitheringShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._noiseTexture = new NoiseTexture(ctx.stage);\n\n        this._graining = 1/256;\n\n        this._random = false;\n    }\n\n    set graining(v) {\n        this._graining = v;\n        this.redraw();\n    }\n\n    set random(v) {\n        this._random = v;\n        this.redraw();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Make sure that the noise texture is uploaded to the GPU.\n        this._noiseTexture.load();\n\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            // Calculate noise texture coordinates so that it spans the full element.\n            let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();\n            let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();\n\n            let ulx = 0;\n            let uly = 0;\n            if (this._random) {\n                ulx = Math.random();\n                uly = Math.random();\n\n                brx += ulx;\n                bry += uly;\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = ulx;\n                    ulx = brx;\n                    brx = t;\n                }\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = uly;\n                    uly = bry;\n                    bry = t;\n                }\n            }\n\n            // Specify all corner points.\n            floats[offset] = ulx;\n            floats[offset + 1] = uly;\n\n            floats[offset + 2] = brx;\n            floats[offset + 3] = uly;\n\n            floats[offset + 4] = brx;\n            floats[offset + 5] = bry;\n\n            floats[offset + 6] = ulx;\n            floats[offset + 7] = bry;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aNoiseTextureCoord\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n\n        let glTexture = this._noiseTexture.source.nativeTexture;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"uNoiseSampler\", 1, this.gl.uniform1i);\n        this._setUniform(\"graining\", 2 * this._graining, this.gl.uniform1f);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    useDefault() {\n        return this._graining === 0;\n    }\n\n    afterDraw(operation) {\n        if (this._random) {\n            this.redraw();\n        }\n    }\n\n}\n\nDitheringShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec2 aNoiseTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vNoiseTextureCoord = aNoiseTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDitheringShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uNoiseSampler;\n    uniform float graining;\n    void main(void){\n        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../../tree/Utils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class CircularPushShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._inputValue = 0;\n\n        this._maxDerivative = 0.01;\n\n        this._normalizedValue = 0;\n\n        // The offset between buckets. A value between 0 and 1.\n        this._offset = 0;\n\n        this._amount = 0.1;\n\n        this._aspectRatio = 1;\n\n        this._offsetX = 0;\n\n        this._offsetY = 0;\n\n        this.buckets = 100;\n    }\n\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n\n    set aspectRatio(v) {\n        this._aspectRatio = v;\n        this.redraw();\n    }\n\n    get offsetX() {\n        return this._offsetX;\n    }\n\n    set offsetX(v) {\n        this._offsetX = v;\n        this.redraw();\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        this._offsetY = v;\n        this.redraw();\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    set inputValue(v) {\n        this._inputValue = v;\n    }\n\n    get inputValue() {\n        return this._inputValue;\n    }\n\n    set maxDerivative(v) {\n        this._maxDerivative = v;\n    }\n\n    get maxDerivative() {\n        return this._maxDerivative;\n    }\n\n    set buckets(v) {\n        if (v > 100) {\n            console.warn(\"[Lightning] CircularPushShader: supports max 100 buckets\");\n            v = 100;\n        }\n\n        // This should be set before starting.\n        this._buckets = v;\n\n        // Init values array in the correct length.\n        this._values = new Uint8Array(this._getValues(v));\n\n        this.redraw();\n    }\n\n    get buckets() {\n        return this._buckets;\n    }\n\n    _getValues(n) {\n        const v = [];\n        for (let i = 0; i < n; i++) {\n            v.push(this._inputValue);\n        }\n        return v;\n    }\n\n    /**\n     * Progresses the shader with the specified (fractional) number of buckets.\n     * @param {number} o;\n     *   A number from 0 to 1 (1 = all buckets).\n     */\n    progress(o) {\n        this._offset += o * this._buckets;\n        const full = Math.floor(this._offset);\n        this._offset -= full;\n        this._shiftBuckets(full);\n        this.redraw();\n    }\n\n    _shiftBuckets(n) {\n        for (let i = this._buckets - 1; i >= 0; i--) {\n            const targetIndex = i - n;\n            if (targetIndex < 0) {\n                this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));\n                this._values[i] = 255 * this._normalizedValue;\n            } else {\n                this._values[i] = this._values[targetIndex];\n            }\n        }\n    }\n\n    set offset(v) {\n        this._offset = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"aspectRatio\", this._aspectRatio, this.gl.uniform1f);\n        this._setUniform(\"offsetX\", this._offsetX, this.gl.uniform1f);\n        this._setUniform(\"offsetY\", this._offsetY, this.gl.uniform1f);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n        this._setUniform(\"offset\", this._offset, this.gl.uniform1f);\n        this._setUniform(\"buckets\", this._buckets, this.gl.uniform1f);\n        this._setUniform(\"uValueSampler\", 1, this.gl.uniform1i);\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    beforeDraw(operation) {\n        const gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        if (!this._valuesTexture) {\n            this._valuesTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (Utils.isNode) {\n                gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);\n            }\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n        }\n\n        // Upload new values.\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    cleanup() {\n        if (this._valuesTexture) {\n            this.gl.deleteTexture(this._valuesTexture);\n        }\n    }\n\n\n}\n\nCircularPushShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    uniform float offsetX;\n    uniform float offsetY;\n    uniform float aspectRatio;\n    varying vec2 vTextureCoord;\n    varying vec2 vPos;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vPos = vTextureCoord * 2.0 - 1.0;\n        vPos.y = vPos.y * aspectRatio;\n        vPos.y = vPos.y + offsetY;\n        vPos.x = vPos.x + offsetX;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nCircularPushShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vPos;\n    uniform float amount;\n    uniform float offset;\n    uniform float values[100];\n    uniform float buckets;\n    uniform sampler2D uSampler;\n    uniform sampler2D uValueSampler;\n    void main(void){\n        float l = length(vPos);\n        float m = (l * buckets * 0.678 - offset) / buckets;\n        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;\n        vec2 unit = vPos / l;\n        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;\n    }\n`;\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class InversionShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nInversionShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); \n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class OutlineShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._width = 5;\n        this._col = 0xFFFFFFFF;\n        this._color = [1,1,1,1];\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    get color() {\n        return this._col;\n    }\n\n    set color(v) {\n        if (this._col !== v) {\n            const col = StageUtils.getRgbaComponentsNormalized(v);\n            col[0] = col[0] * col[3];\n            col[1] = col[1] * col[3];\n            col[2] = col[2] * col[3];\n\n            this._color = col;\n\n            this.redraw();\n\n            this._col = v;\n        }\n    }\n\n    useDefault() {\n        return (this._width === 0 || this._col[3] === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"color\", new Float32Array(this._color), gl.uniform4fv);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            const elementCore = operation.getElementCore(i);\n\n            // We are setting attributes such that if the value is < 0 or > 1, a border should be drawn.\n            const ddw = this._width / elementCore.w;\n            const dw = ddw / (1 - 2 * ddw);\n            const ddh = this._width / elementCore.h;\n            const dh = ddh / (1 - 2 * ddh);\n\n            // Specify all corner points.\n            floats[offset] = -dw;\n            floats[offset + 1] = -dh;\n\n            floats[offset + 2] = 1 + dw;\n            floats[offset + 3] = -dh;\n\n            floats[offset + 4] = 1 + dw;\n            floats[offset + 5] = 1 + dh;\n\n            floats[offset + 6] = -dw;\n            floats[offset + 7] = 1 + dh;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aCorner\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n}\n\nOutlineShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aCorner;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vCorner;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vCorner = aCorner;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nOutlineShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vCorner;\n    uniform vec4 color;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec2 m = min(vCorner, 1.0 - vCorner);\n        float value = step(0.0, min(m.x, m.y));\n        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * @see https://github.com/pixijs/pixi-filters/tree/master/filters/pixelate/src\n */\nexport default class PixelateShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._size = new Float32Array([4, 4]);\n    }\n\n    get x() {\n        return this._size[0];\n    }\n\n    set x(v) {\n        this._size[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._size[1];\n    }\n\n    set y(v) {\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    get size() {\n        return this._size[0];\n    }\n\n    set size(v) {\n        this._size[0] = v;\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return ((this._size[0] === 0) && (this._size[1] === 0));\n    }\n\n    static getWebGLImpl() {\n        return WebGLPixelateShaderImpl;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"size\", new Float32Array(this._size), gl.uniform2fv);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            let w = operation.quads.getTextureWidth(operation.index + i);\n            let h = operation.quads.getTextureHeight(operation.index + i);\n\n            floats[offset] = w;\n            floats[offset + 1] = h;\n            floats[offset + 2] = w;\n            floats[offset + 3] = h;\n            floats[offset + 4] = w;\n            floats[offset + 5] = h;\n            floats[offset + 6] = w;\n            floats[offset + 7] = h;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aTextureRes\"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));\n    }\n}\n\nPixelateShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aTextureRes;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        vTextureRes = aTextureRes;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPixelateShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n\n    uniform vec2 size;\n    uniform sampler2D uSampler;\n    \n    vec2 mapCoord( vec2 coord )\n    {\n        coord *= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 unmapCoord( vec2 coord )\n    {\n        coord /= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 pixelate(vec2 coord, vec2 size)\n    {\n        return floor( coord / size ) * size;\n    }\n    \n    void main(void)\n    {\n        vec2 coord = mapCoord(vTextureCoord);\n        coord = pixelate(coord, size);\n        coord = unmapCoord(coord);\n        gl_FragColor = texture2D(uSampler, coord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class RadialFilterShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._radius = 0;\n        this._cutoff = 1;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set cutoff(v) {\n        this._cutoff = v;\n        this.redraw();\n    }\n\n    get cutoff() {\n        return this._cutoff;\n    }\n    \n    useDefault() {\n        return this._radius === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        // We substract half a pixel to get a better cutoff effect.\n        this._setUniform(\"radius\", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);\n        this._setUniform(\"cutoff\", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);\n    }\n\n}\n\nRadialFilterShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 pos;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n        pos = gl_Position.xy;\n    }\n`;\n\nRadialFilterShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 pos;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float radius;\n    uniform float cutoff;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RoundedRectangleShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._blend = 0;\n        this._radius = [1, 1, 1, 1];\n        this._stroke = 0;\n        this._fc = 0x00ffffff;\n        this._fillColor = this._getNormalizedColor(0xffffffff);\n        this._strokeColor = this._getNormalizedColor(0x00ffffff);\n    }\n\n    set blend(p) {\n        this._blend = Math.min(Math.max(p, 0), 1);\n    }\n\n    set radius(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._radius = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._radius = [v[0], v[1], v[2], this._radius[3]];\n            }\n            else if (v.length === 4) {\n                this._radius = v;\n            }\n            else {\n                this._radius = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._radius = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set topLeft(num) {\n        this._radius[0] = num;\n        this.redraw();\n    }\n\n    get topLeft() {\n        return this._radius[0];\n    }\n\n    set topRight(num) {\n        this._radius[1] = num;\n        this.redraw();\n    }\n\n    get topRight() {\n        return this._radius[1];\n    }\n\n    set bottomRight(num) {\n        this._radius[2] = num;\n        this.redraw();\n    }\n\n    get bottomRight() {\n        return this._radius[2];\n    }\n\n    set bottomLeft(num) {\n        this._radius[3] = num;\n        this.redraw();\n    }\n\n    get bottomLeft() {\n        return this._radius[4];\n    }\n\n    set strokeColor(argb) {\n        this._sc = argb;\n        this._strokeColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get strokeColor() {\n        return this._sc;\n    }\n\n    set fillColor(argb) {\n        this._fc = argb;\n        this._fillColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get fillColor() {\n        return this._fc;\n    }\n\n    set stroke(num) {\n        this._stroke = num;\n        this.redraw();\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision)\n        this._setUniform('radius', new Float32Array(_radius), this.gl.uniform4fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('blend', this._blend, this.gl.uniform1f);\n        this._setUniform('strokeColor', this._strokeColor, this.gl.uniform4fv);\n        this._setUniform('fillColor', this._fillColor, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nRoundedRectangleShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nRoundedRectangleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n\n    #define PI 3.14159265359\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 radius;\n    uniform float stroke;\n    uniform vec4 strokeColor;\n    uniform vec4 fillColor;\n    uniform float alpha;\n    uniform float fill;\n    uniform float blend;\n    \n    float boxDist(vec2 p, vec2 size, float radius){\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    float innerBorderMask(float dist, float width){\n        float alpha1 = clamp(dist + width, 0.0, 1.0);\n        float alpha2 = clamp(dist, 0.0, 1.0);\n        return alpha1 - alpha2;\n    }\n\n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        float r = 0.0;\n        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[0];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[1];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {\n            r = radius[2];\n        } else {\n            r = radius[3];\n        }\n        \n        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);\n        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;\n        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     \n        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));\n        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b, stroke));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from './DefaultShader.mjs';\n\nexport default class FadeOutShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._fade = [0, 0, 0, 0];\n    }\n\n    set top(num) {\n        this._fade[0] = num;\n        this.redraw();\n    }\n\n    get top() {\n        return this._fade[0];\n    }\n\n    set right(num) {\n        this._fade[1] = num;\n        this.redraw();\n    }\n\n    get right() {\n        return this._fade[1];\n    }\n\n    set bottom(num) {\n        this._fade[2] = num;\n        this.redraw();\n    }\n\n    get bottom() {\n        return this._fade[2];\n    }\n\n    set left(num) {\n        this._fade[3] = num;\n        this.redraw();\n    }\n\n    get left() {\n        return this._fade[3];\n    }\n\n    set fade(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._fade = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._fade = [v[0], v[1], v[2], this._fade[3]];\n            }\n            else if (v.length === 4) {\n                this._fade = v;\n            }\n            else {\n                this._fade = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._fade = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get fade() {\n        return this._fade;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const fade = this._fade.map((f) => f * renderPrecision);\n        this._setUniform('fade',  new Float32Array(fade), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nFadeOutShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 fade;\n    \n    void main() {\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 point = vTextureCoord.xy * resolution.xy;\n        \n        vec2 pos1;\n        vec2 pos2;\n        vec2 d;\n        float c;\n        float t = 0.0;\n             \n        if(fade[0] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x, point.y + fade[0]);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[1] > 0.0) {\n            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);\n            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[2] > 0.0) {\n            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);\n            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[3] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x + fade[3], point.y);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class VignetteShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._magnitude = 1.3;\n        this._intensity = 0.7;\n        this._pivot = [0.5, 0.5];\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        this._setUniform(\"magnitude\", this._magnitude , this.gl.uniform1f);\n        this._setUniform(\"intensity\", this._intensity, this.gl.uniform1f);\n        this._setUniform('pivot', new Float32Array(this._pivot), this.gl.uniform2fv);\n        this.redraw()\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v)) {\n            this._pivot = v;\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    set pivotX(v) {\n        this._pivot[0] = v;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotY(v) {\n        this._pivot[1] = v;\n        this.redraw();\n    }\n\n    get intensity() {\n        return this._intensity;\n    }\n\n    set intensity(v) {\n        this._intensity = v;\n        this.redraw();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n\n    }\n\n    set magnitude(v) {\n        this._magnitude = v;\n        this.redraw();\n    }\n}\n\nVignetteShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nVignetteShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float magnitude;\n    uniform float intensity;\n    uniform vec2 pivot;\n\n    void main() {\n        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);\n        uv.x = clamp(uv.x, 0.0, 1.0);\n        uv.y = clamp(uv.y, 0.0, 1.0);\n   \n        uv *=  1.00 - uv.yx;\n        float vig = uv.x * uv.y * 25.0 * intensity;\n        vig = pow(vig, 0.45 * magnitude);\n        vec4 fragColor = vec4(vig) * vColor;\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;\n\n    }\n`\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from '../../../tree/StageUtils.mjs'\n\nexport default class SpinnerShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._radius = 100;\n        this._width = 50;\n        this._period = 1;\n        this._angle = 0.5;\n        this._smooth = 0.005;\n        this._color = 0xffffffff;\n        this._backgroundColor = 0xff000000;\n        this._time = Date.now();\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    set period(v) {\n        this._period = v;\n        this.redraw();\n    }\n\n    set angle(v) {\n        this._angle = v\n        this.redraw();\n    }\n\n    set smooth(v) {\n        this._smooth = v;\n        this.redraw();\n    }\n\n    set color(v) {\n        this._color = v;\n        this.redraw();\n    }\n\n    set backgroundColor(v) {\n        this._backgroundColor = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner\n\n        this._setUniform(\"iTime\", Date.now() - this._time, this.gl.uniform1f);\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        this._setUniform('radius', this._radius * renderPrecision, this.gl.uniform1f);\n        this._setUniform('width', this._width * renderPrecision, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('angle', this._angle, this.gl.uniform1f);\n        this._setUniform('smooth', this._smooth, this.gl.uniform1f);\n        this._setUniform('color', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);\n        this._setUniform('backgroundColor', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv)\n\n        this.redraw()\n    }\n}\n\nSpinnerShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nSpinnerShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float iTime;\n    uniform float radius;\n    uniform float width;\n    uniform float period;\n    uniform float angle;\n    uniform float smooth;\n    uniform vec2 resolution;\n\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n\n    float ratio = resolution.y / resolution.x;\n\n    vec2 transpose_pos(vec2 pos) {\n        if (ratio < 1.) {\n            float diff = 0.5 - pos.x;\n            pos.x = 0.5 - diff / ratio;\n        } else {\n            float diff = 0.5 - pos.y;\n            pos.y = 0.5 - diff * ratio;\n        }\n        return pos;\n    }\n\n    float get_angle(vec2 pos) {\n        pos = transpose_pos(pos);\n        float a = atan(pos.y - 0.5, pos.x - 0.5);\n        a = (1.0+a/3.14159)/2.0;\n        \n        return a;\n    }\n\n    float dist(vec2 pos1, vec2 pos2) {\n        pos1 = transpose_pos(pos1);\n        return distance(pos1, pos2);\n    }\n\n    void main()\n    {\n        vec2 fragCoord = vTextureCoord;\n        vec4 fragColor = vColor;\n        \n        vec2 st = vTextureCoord;\n        float pct = dist(st, vec2(0.5));\n\n        float a = get_angle(st);\n        float t = iTime / 1000.0 / period;\n\n        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);\n        float outer = max(radius / resolution.x, radius / resolution.y);\n\n        float x1 = mod(t, 1.0);\n        float x2 = mod(t + angle, 1.0);\n\n        if (x1 < x2) {\n            if (a > x1 && a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        } else {\n            if (a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else if (a > x1) {\n                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        }\n\n        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));\n        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class HoleShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n        this._radius = 0;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        this._x = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        this._y = v;\n        this.redraw();\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        this._w = v;\n        this.redraw();\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        this._h = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision()\n\n        this._setUniform(\"x\", this._x * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"y\", this._y * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"w\", this._w * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"h\", this._h * renderPrecision, this.gl.uniform1f);\n        this._setUniform('radius',  (this._radius + .5) * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n\n    useDefault() {\n        return (this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0)\n    }\n}\n\nHoleShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nHoleShader.fragmentShaderSource = `\n   #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float x;\n    uniform float y;\n    uniform float w;\n    uniform float h;\n    uniform vec2 resolution;\n    uniform float radius;\n\n    float roundBox(vec2 p, vec2 b, float r) {\n        float d = length(max(abs(p)-b+r, 0.1))-r;\n        return smoothstep(1.0, 0.0, d);\n    }\n\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n        vec2 size = vec2(w, h) / 2.0;\n        float b = roundBox(pos, size, radius);\n        gl_FragColor = mix(color, vec4(0.0), b);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RadialGradientShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._pivot = [0, 0];\n        this._ic = 0xffffffff;\n        this._normalizedIC = this._getNormalizedColor(this._ic);\n        this._oc = 0x00ffffff;\n        this._normalizedOC = this._getNormalizedColor(this._oc);\n        this._radius = 0;\n    }\n\n    set radiusX(v) {\n        this.radius = v;\n    }\n\n    get radiusX() {\n        return this._radius;\n    }\n\n    set radiusY(v) {\n        this._radiusY = v;\n        this.redraw();\n    }\n\n    get radiusY() {\n        return this._radiusY;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set innerColor(argb) {\n        this._ic = argb;\n        this._normalizedIC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get innerColor() {\n        return this._ic;\n    }\n\n    set outerColor(argb) {\n        this._oc = argb;\n        this._normalizedOC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    set color(argb) {\n        this.innerColor = argb;\n    }\n\n    get color() {\n        return this.innerColor;\n    }\n\n    get outerColor() {\n        return this._ic;\n    }\n\n    set x(f) {\n        this._x = f;\n        this.redraw();\n    }\n\n    set y(f) {\n        this._y = f;\n        this.redraw();\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v) && v.length === 2) {\n            this._pivot = v;\n        }\n        else if(Array.isArray(v)) {\n            this._pivot = [v[0], v[1] || v[0]];\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivot() {\n        return this._pivot[0];\n    }\n\n    set pivotY(f) {\n        this._pivot[1] = f;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotX(f) {\n        this._pivot[0] = f;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        if(this._x) {\n            this._pivot[0] = this._x / owner.w;\n        }\n        if(this._y) {\n            this._pivot[1] = this._y / owner.h;\n        }\n\n        if(this._radius === 0) {\n            this._radius = owner.w * 0.5;\n        }\n\n        this._setUniform('innerColor', this._normalizedIC, this.gl.uniform4fv);\n        this._setUniform('fill', StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);\n        this._setUniform('outerColor', this._normalizedOC, this.gl.uniform4fv);\n        this._setUniform('pivot', new Float32Array(this._pivot),  this.gl.uniform2fv);\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('radius',  this._radius, this.gl.uniform1f);\n        this._setUniform('radiusY',  (this._radiusY || this._radius), this.gl.uniform1f);\n    }\n}\n\nRadialGradientShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec2 pivot;\n    uniform vec4 innerColor;\n    uniform vec4 outerColor;\n    uniform float radius;\n    uniform float radiusY;\n    uniform float alpha;\n    uniform float fill;\n    uniform float aspectRatio;\n    \n    void main() {\n        vec2 point = vTextureCoord.xy * resolution;\n        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);\n        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));\n        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);\n        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class Light3dShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._strength = 0.5;\n        this._ambient = 0.5;\n        this._fudge = 0.4;\n\n        this._rx = 0;\n        this._ry = 0;\n\n        this._z = 0;\n        this._pivotX = NaN;\n        this._pivotY = NaN;\n        this._pivotZ = 0;\n\n        this._lightY = 0;\n        this._lightZ = 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        let vr = operation.shaderOwner;\n        let element = vr.element;\n\n        let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;\n        let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;\n        let coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n\n        let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        let gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"lightY\", this.lightY, gl.uniform1f);\n        this._setUniform(\"lightZ\", this.lightZ, gl.uniform1f);\n        this._setUniform(\"strength\", this._strength, gl.uniform1f);\n        this._setUniform(\"ambient\", this._ambient, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set strength(v) {\n        this._strength = v;\n        this.redraw();\n    }\n\n    get strength() {\n        return this._strength;\n    }\n\n    set ambient(v) {\n        this._ambient = v;\n        this.redraw();\n    }\n\n    get ambient() {\n        return this._ambient;\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        this._pivotX = v + 1;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        this._pivotY = v + 1;\n        this.redraw();\n    }\n\n    get lightY() {\n        return this._lightY;\n    }\n\n    set lightY(v) {\n        this._lightY = v;\n        this.redraw();\n    }\n\n    get pivotZ() {\n        return this._pivotZ;\n    }\n\n    set pivotZ(v) {\n        this._pivotZ = v;\n        this.redraw();\n    }\n\n    get lightZ() {\n        return this._lightZ;\n    }\n\n    set lightZ(v) {\n        this._lightZ = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1);\n    }\n\n}\n\nLight3dShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float fudge;\n    uniform float strength;\n    uniform float ambient;\n    uniform float z;\n    uniform float lightY;\n    uniform float lightZ;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Set depth perspective\n        float perspective = 1.0 + fudge * pos.z;\n\n        pos.z += lightZ * projection.x;\n\n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, perspective);\n\n        // Correct light source position.\n        pos.y += lightY * abs(projection.y);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nLight3dShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec3 pos;\n    uniform sampler2D uSampler;\n    uniform float ambient;\n    uniform float strength;\n    void main(void){\n        vec4 rgba = texture2D(uSampler, vTextureCoord);\n        float d = length(pos);\n        float n = 1.0 / max(0.1, d);\n        rgba.rgb = rgba.rgb * (strength * n + ambient);\n        gl_FragColor = rgba * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class PerspectiveShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._fudge = 0.2;\n        this._rx = 0;\n        this._ry = 0;\n        this._z = 1.0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const vr = operation.shaderOwner;\n        const element = vr.element;\n\n        const pivotX = element.pivotX * vr.w;\n        const pivotY = element.pivotY * vr.h;\n        const coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n        const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        const gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0);\n    }\n\n}\n\nPerspectiveShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float z;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, z);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPerspectiveShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform vec3 rot;\n    uniform float fudge;\n\n    void main(void) {\n        vec2 coords = vTextureCoord;\n\n        coords.xy -= vec2(0.5);\n        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;\n        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;\n        coords.xy += vec2(0.5);\n\n        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {\n            gl_FragColor = vec4(0.0);\n        } else {\n            gl_FragColor = texture2D(uSampler, coords) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class MagnifierShader extends DefaultShader {\n\tconstructor(context) {\n\t  super(context);\n\t  this._x = 0;\n\t  this._y = 0;\n\t  this._w = 0;\n\t  this._h = 0;\n\t  this._radius = 0;\n\t  this._magnification = 0.6;\n\t}\n  \n\tget x() {\n\t  return this._x;\n\t}\n  \n\tset x(v) {\n\t  this._x = v;\n\t  this.redraw();\n\t}\n  \n\tget y() {\n\t  return this._y;\n\t}\n  \n\tset y(v) {\n\t  this._y = v;\n\t  this.redraw();\n\t}\n  \n\tget w() {\n\t  return this._w;\n\t}\n  \n\tset w(v) {\n\t  this._w = v;\n\t  this.redraw();\n\t}\n  \n\tget h() {\n\t  return this._h;\n\t}\n  \n\tset h(v) {\n\t  this._h = v;\n\t  this.redraw();\n\t}\n  \n\tget magnification() {\n\t  return this._magnification;\n\t}\n  \n\tset magnification(v) {\n\t  this._magnification = v;\n\t  this.redraw();\n\t}\n  \n\tget radius() {\n\t  return this._radius;\n\t}\n  \n\tset radius(v) {\n\t  this._radius = v;\n\t  this.redraw();\n\t}\n  \n\tsetupUniforms(operation) {\n\t  super.setupUniforms(operation);\n  \n\t  const owner = operation.shaderOwner;\n\t  const renderPrecision = this.ctx.stage.getRenderPrecision();\n\t  this._setUniform('x', this._x * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('y', this._y * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('w', this._w * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('h', this._h * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('magnification', this._magnification, this.gl.uniform1f);\n\t  this._setUniform(\n\t\t'radius',\n\t\t(this._radius + 0.5) * renderPrecision,\n\t\tthis.gl.uniform1f\n\t  );\n\t  this._setUniform(\n\t\t'resolution',\n\t\tnew Float32Array([\n\t\t  owner._w * renderPrecision,\n\t\t  owner._h * renderPrecision\n\t\t]),\n\t\tthis.gl.uniform2fv\n\t  );\n\t}\n \n\tuseDefault() {\n\t  return this._w === 0 && this._h === 0;\n\t}\n  }\n  \n  MagnifierShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n  \n  MagnifierShader.fragmentShaderSource = `\n\t  #ifdef GL_ES\n\t\t# ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\t# else\n\t\tprecision lowp float;\n\t\t# endif\n\t  #endif\n\n\t  varying vec2 vTextureCoord;\n\t  varying vec4 vColor;\n\t  uniform sampler2D uSampler;\n\t  uniform float x;\n\t  uniform float y;\n\t  uniform float w;\n\t  uniform float h;\n\t  uniform vec2 resolution;\n\t  uniform float radius;\n\t  uniform float magnification;\n  \n\t  float roundBox(vec2 p, vec2 b, float r) {\n\t\t  float d = length(max(abs(p)-b+r, 0.1))-r;\n\t\t  return smoothstep(1.0, 0.0, d);\n\t  }\n\n\t  float inside(vec2 v) {\n\t\tvec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);\n\t\treturn s.x * s.y;   \n      }\n  \n\t  void main(void) {\n\t\tvec4 color = texture2D(uSampler, vTextureCoord);\n\t\tvec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n\t\tvec2 size = vec2(w, h) / 2.0;\n\t\tfloat b = roundBox(pos, size, radius);\n\t\tvec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;\n\t\tgl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;\n\t  }\n  `;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class SpinnerShader2 extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._period = 1;\n        this._stroke = 0;\n        this._showDot = true;\n        this._clockwise = true;\n        this._bc = 0xff000000;\n        this._normalizedBC = this._getNormalizedColor(this._bc);\n        this._c = 0xffffffff;\n        this._normalizedC = this._getNormalizedColor(this._c);\n    }\n\n    set radius(v) {\n        if(v === 0) {\n            v = 1;\n        }\n        this._radius = v;\n    }\n\n    set stroke(value) {\n        this._stroke = Math.abs(value);\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    set color(argb) {\n        this._c = argb;\n        this._normalizedC = this._getNormalizedColor(argb);\n    }\n\n    get color() {\n        return this._c;\n    }\n\n    set backgroundColor(argb) {\n        this._bc = argb;\n        this._normalizedBC = this._getNormalizedColor(argb);\n    }\n\n    get backgroundColor() {\n        return this._sc;\n    }\n\n    set showDot(bool) {\n        this._showDot = bool;\n    }\n\n    get showDot() {\n        return this._showDot;\n    }\n\n    set clockwise(bool) {\n        this._clockwise = bool;\n    }\n\n    get clockwise() {\n        return this._clockwise;\n    }\n\n    set period(v) {\n        this._period = v;\n    }\n\n    get period() {\n        return this._period;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const radius = this._radius || (owner._w / 2);\n\n        if(this._stroke === 0) {\n            this._stroke = radius * 0.33;\n        }\n\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('color', this._normalizedC, this.gl.uniform4fv);\n        this._setUniform('backgroundColor', this._normalizedBC, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke, this.gl.uniform1f);\n        this._setUniform('radius',  radius, this.gl.uniform1f);\n        this._setUniform('direction',  this._clockwise ? -1 : 1, this.gl.uniform1f);\n        this._setUniform('showDot', !!this._showDot, this.gl.uniform1f);\n        this._setUniform('time', Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n\n        if(this._sc !== this._bc || this._stroke !== radius * 0.5) {\n            this.redraw();\n        }\n    }\n}\n\nSpinnerShader2.spinSync = Date.now();\n\nSpinnerShader2.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    \n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n    uniform float direction;\n    uniform float radius;\n    uniform float time;\n    uniform float stroke;\n    uniform float showDot;\n    uniform float period;\n    uniform float alpha;\n    \n    float circleDist(vec2 p, float radius){\n        return length(p) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 center = vTextureCoord.xy * resolution - halfRes;\n        \n        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));\n        float rot = -(time / 1000.0 / period) * 6.0 * direction;\n        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n        \n        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;\n        \n        float strokeRad = stroke * 0.5;\n        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);\n        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));\n        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Application from \"./application/Application.mjs\";\nimport Component from \"./application/Component.mjs\";\nimport Base from \"./tree/Base.mjs\";\nimport Utils from \"./tree/Utils.mjs\";\nimport StageUtils from \"./tree/StageUtils.mjs\";\nimport Element from \"./tree/Element.mjs\";\nimport ElementCore from \"./tree/core/ElementCore.mjs\";\nimport ElementTexturizer from \"./tree/core/ElementTexturizer.mjs\";\nimport Texture from \"./tree/Texture.mjs\";\n\nimport Tools from \"./tools/Tools.mjs\";\nimport ObjMerger from \"./tools/ObjMerger.mjs\";\nimport ObjectListProxy from \"./tools/ObjectListProxy.mjs\";\nimport ObjectListWrapper from \"./tools/ObjectListWrapper.mjs\";\n\nimport RectangleTexture from \"./textures/RectangleTexture.mjs\";\nimport NoiseTexture from \"./textures/NoiseTexture.mjs\";\nimport TextTexture from \"./textures/TextTexture.mjs\";\nimport ImageTexture from \"./textures/ImageTexture.mjs\";\nimport HtmlTexture from \"./textures/HtmlTexture.mjs\";\nimport StaticTexture from \"./textures/StaticTexture.mjs\";\nimport StaticCanvasTexture from \"./textures/StaticCanvasTexture.mjs\";\nimport SourceTexture from \"./textures/SourceTexture.mjs\";\n\nimport ListComponent from \"./components/ListComponent.mjs\";\nimport FastBlurComponent from \"./components/FastBlurComponent.mjs\";\nimport BloomComponent from \"./components/BloomComponent.mjs\";\nimport SmoothScaleComponent from \"./components/SmoothScaleComponent.mjs\";\nimport BorderComponent from \"./components/BorderComponent.mjs\";\nimport EventEmitter from \"./EventEmitter.mjs\";\n\nimport WebGLShader from \"./renderer/webgl/WebGLShader.mjs\";\nimport WebGLDefaultShader from \"./renderer/webgl/shaders/DefaultShader.mjs\";\nimport { WebGLGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport BoxBlurShader from \"./renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DitheringShader from \"./renderer/webgl/shaders/DitheringShader.mjs\";\nimport CircularPushShader from \"./renderer/webgl/shaders/CircularPushShader.mjs\";\nimport InversionShader from \"./renderer/webgl/shaders/InversionShader.mjs\";\nimport LinearBlurShader from \"./renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport OutlineShader from \"./renderer/webgl/shaders/OutlineShader.mjs\";\nimport PixelateShader from \"./renderer/webgl/shaders/PixelateShader.mjs\";\nimport RadialFilterShader from \"./renderer/webgl/shaders/RadialFilterShader.mjs\";\nimport RoundedRectangleShader from \"./renderer/webgl/shaders/RoundedRectangleShader.mjs\";\nimport FadeOutShader from \"./renderer/webgl/shaders/FadeOutShader.mjs\";\nimport VignetteShader from \"./renderer/webgl/shaders/VignetteShader.mjs\";\nimport SpinnerShader from \"./renderer/webgl/shaders/SpinnerShader.mjs\";\nimport HoleShader from \"./renderer/webgl/shaders/HoleShader.mjs\";\nimport RadialGradientShader from \"./renderer/webgl/shaders/RadialGradientShader.mjs\";\nimport Light3dShader from \"./renderer/webgl/shaders/Light3dShader.mjs\";\nimport PerspectiveShader from \"./renderer/webgl/shaders/PerspectiveShader.mjs\";\nimport MagnifierShader from \"./renderer/webgl/shaders/MagnifierShader.mjs\";\n\nimport C2dShader from \"./renderer/c2d/C2dShader.mjs\";\nimport C2dDefaultShader from \"./renderer/c2d/shaders/DefaultShader.mjs\";\nimport { C2dGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport C2dBlurShader from \"./renderer/c2d/shaders/BlurShader.mjs\";\n\nimport Stage from \"./tree/Stage.mjs\";\nimport SpinnerShader2 from './renderer/webgl/shaders/SpinnerShader2.mjs';\n\nconst lightning = {\n    Application,\n    Component,\n    Base,\n    Utils,\n    StageUtils,\n    Element,\n    Tools,\n    Stage,\n    ElementCore,\n    ElementTexturizer,\n    Texture,\n    EventEmitter,\n    shaders: {\n        Grayscale: WebGLGrayscaleShader,\n        BoxBlur: BoxBlurShader,\n        Dithering: DitheringShader,\n        CircularPush: CircularPushShader,\n        Inversion: InversionShader,\n        LinearBlur: LinearBlurShader,\n        Outline: OutlineShader,\n        Pixelate: PixelateShader,\n        RadialFilter: RadialFilterShader,\n        RoundedRectangle: RoundedRectangleShader,\n        Spinner2: SpinnerShader2,\n        FadeOut: FadeOutShader,\n        Hole: HoleShader,\n        Vignette: VignetteShader,\n        Spinner: SpinnerShader,\n        RadialGradient: RadialGradientShader,\n        Light3d: Light3dShader,\n        Perspective: PerspectiveShader,\n        Magnifier: MagnifierShader,\n        WebGLShader,\n        WebGLDefaultShader,\n        C2dShader,\n        C2dDefaultShader,\n        c2d: {\n            Grayscale: C2dGrayscaleShader,\n            Blur: C2dBlurShader\n        }\n    },\n    textures: {\n        RectangleTexture,\n        NoiseTexture,\n        TextTexture,\n        ImageTexture,\n        HtmlTexture,\n        StaticTexture,\n        StaticCanvasTexture,\n        SourceTexture\n    },\n    components: {\n        FastBlurComponent,\n        BloomComponent,\n        SmoothScaleComponent,\n        BorderComponent,\n        ListComponent\n    },\n    tools: {\n        ObjMerger,\n        ObjectListProxy,\n        ObjectListWrapper\n    }\n};\n\nif (Utils.isWeb) {\n    window.lng = lightning;\n}\n\nexport default lightning;\n"],"names":["StageUtils","v1","v2","p","r","g","b","a","color","toFixed","Math","floor","argb","rgba","max","min","v","c1","c2","r1","g1","b1","a1","r2","g2","b2","a2","round","c","t","n","length","i","alpha","deg","PI","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","str","getTimingBezier","s","indexOf","parts","substr","split","console","warn","parseFloat","isNaN","Utils","value","isObjectLiteral","Array","isArray","getDeepClone","obj","keys","Object","clone","obj1","obj2","type","constructor","index","arr","getModuloIndex","len","ceil","isFunction","isObject","equalObjectLiterals","equalArrays","keys1","keys2","k1","k2","equalValues","result","forEach","push","iterator","iteratorResult","next","done","charcode","isWeb","window","sparkscene","isWPE","navigator","userAgent","isSpark","isNode","isPS4","isZiggo","Base","name","settings","error","names","patchObjectProperty","setter","setSetting","defaultSetter","charAt","__local","func","SpacingCalculator","mode","numberOfItems","remainingSpace","itemGaps","spacePerGap","spacingBefore","spacingBetween","getSpacing","Error","ContentAligner","layout","_layout","_totalCrossAxisSize","_lines","_getTotalCrossAxisSize","crossAxisSize","_getSpacing","lines","_flexContainer","alignContent","growSize","currentPos","crossAxisLayoutOffset","aligner","createItemAligner","finalCrossAxisLayoutSize","crossAxisLayoutSize","setCrossAxisLayoutSize","setCrossAxisLayoutOffset","align","recursiveResizeOccured","setItemPositions","total","line","FlexUtils","item","horizontal","target","parent","getParent","flexParent","getAxisLayoutSize","getTotalPadding","w","h","funcW","_allowRelAxisSizeFunction","getParentAxisSizeWithPadding","originalWidth","funcH","originalHeight","_flex","isAxisFitToContents","x","y","pos","size","minSize","getPlainAxisMinSize","flexItemMinSize","isFlexItemEnabled","_flexItem","_getMinSizeSetting","hasLimitedMinSize","isFlexEnabled","getAxisMinSize","isShrinkable","flexItem","shrink","getRelAxisSize","isMainAxis","_horizontal","resizeMainAxis","resizeCrossAxis","setAxisLayoutSize","flex","paddingLeft","paddingTop","paddingRight","paddingBottom","marginLeft","marginTop","marginRight","marginBottom","SizeShrinker","_line","_amountRemaining","_shrunkSize","amount","totalShrinkAmount","_getTotalShrinkAmount","items","amountPerShrink","startIndex","endIndex","shrinkAmount","isShrinkableItem","_getMainAxisMinSize","_getMainAxisLayoutSize","maxShrink","isFullyShrunk","finalSize","_resizeMainAxis","abs","SizeGrower","_grownSize","totalGrowAmount","_getTotalGrowAmount","amountPerGrow","growAmount","grow","isGrowableItem","maxSize","_getMainAxisMaxSizeSetting","maxGrow","isFullyGrown","ItemPositioner","lineLayout","_setMainAxisLayoutPos","_getMainAxisLayoutSizeWithPaddingAndMargin","_availableSpace","justifyContent","ItemAligner","_crossAxisLayoutSize","_crossAxisLayoutOffset","_alignItemsSetting","_recursiveResizeOccured","_isCrossAxisFitToContents","offset","alignItems","_alignItem","alignSelf","_preventStretch","_hasRelCrossAxisSize","_resetCrossAxisLayoutSize","_alignItemFlexStart","_alignItemFlexEnd","_alignItemFlexCenter","_alignItemStretch","_setCrossAxisLayoutPos","itemCrossAxisSize","_getCrossAxisLayoutSizeWithPaddingAndMargin","center","mainAxisLayoutSizeBeforeResize","_getCrossAxisMargin","_getCrossAxisPadding","crossAxisMinSizeSetting","_getCrossAxisMinSizeSetting","crossAxisMaxSizeSetting","_getCrossAxisMaxSizeSetting","crossAxisMaxSizeSettingEnabled","_resizeCrossAxis","mainAxisLayoutSizeAfterResize","recursiveResize","hasFixedCrossAxisSize","_hasFixedCrossAxisSize","forceStretch","LineLayout","availableSpace","_setItemSizes","_calcLayoutInfo","_growItemSizes","_shrinkItemSizes","grower","getGrownSize","shrinker","getShrunkSize","positioner","position","_calcCrossAxisMaxLayoutSize","mainAxisMinSize","_getMainAxisMinSizeWithPaddingAndMargin","noSpecifiedCrossAxisSize","isCrossAxisFitToContents","resizingCrossAxis","shouldFitToContents","isWrapping","_crossAxisMaxLayoutSize","_getCrossAxisMaxLayoutSize","crossAxisMaxSize","LineLayouter","_mainAxisMinSize","_crossAxisMinSize","_mainAxisContentSize","_getCrossAxisMinSize","_setup","wrap","_layoutFlexItem","itemMainAxisSize","isOverflowing","_curMainAxisPos","_mainAxisSize","_layoutLine","_addToMainAxisPos","flexLayout","updateTreeLayout","_resetLayoutSize","mainAxisSize","_maxMainAxisPos","_getAvailableMainAxisLayoutSpace","performLayout","resizingMainAxis","isMainAxisFitToContents","crossAxisMinSize","itemCrossAxisMinSize","_getCrossAxisMinSizeWithPaddingAndMargin","getMainAxisMinSize","ItemCoordinatesUpdater","_isReverse","_reverse","_horizontalPaddingOffset","_getHorizontalPaddingOffset","_verticalPaddingOffset","_getVerticalPaddingOffset","parentFlex","getParentFlexContainer","updater","_finalizeItemAndChildren","_finalizeRoot","_finalizeItems","getAxisLayoutPos","_getHorizontalPadding","_getVerticalPadding","clearRecalcFlag","setLayout","validCache","_validateItemCache","_finalizeItem","_finalizeItemChildren","recalc","dimensionsMatchPreviousResult","performResizeMainAxis","performResizeCrossAxis","_reverseMainAxisLayoutPos","_getHorizontalMarginOffset","_getVerticalMarginOffset","endPos","_getMainAxisLayoutPos","reversedPos","FlexLayout","flexContainer","_lineLayouter","_resizingMainAxis","_resizingCrossAxis","_cachedMainAxisSizeAfterLayout","_cachedCrossAxisSizeAfterLayout","_shrunk","isSubTree","_updateSubTreeLayout","updateItemCoords","_performUpdateLayoutTree","_performUpdateLayoutTreeFromCache","_setInitialAxisSizes","_layoutAxes","_refreshLayoutCache","sizeMightHaveChanged","enableLocalRecalcFlag","finalize","_layoutMainAxis","_getMainAxisBasis","_getCrossAxisBasis","_layoutCrossAxis","_layoutLines","_fitMainAxisSizeToContents","layoutLines","mainAxisContentSize","init","totalCrossAxisSize","_fitCrossAxisSizeToContents","_hasFixedMainAxisBasis","_hasFixedCrossAxisBasis","isZeroAxisSize","_checkValidCacheMainAxisResize","isFinalMainAxisSize","targetMainAxisSize","canIgnoreCacheMiss","isShrinking","ctr","getPaddingOffset","set","FlexContainer","_item","Layout","_wrap","_alignItems","_justifyContent","_alignContent","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","changedDimensions","changedContents","f","direction","_changedContents","ALIGN_ITEMS","join","ALIGN_CONTENT","JUSTIFY_CONTENT","_changedDimensions","patchObject","FlexItem","_ctr","_grow","_shrink","SHRINK_AUTO","_alignSelf","undefined","_minWidth","_minHeight","_maxWidth","_maxHeight","_marginLeft","_marginTop","_marginRight","_marginBottom","parseInt","_changed","_getDefaultShrink","_resetHorizontalAxisLayoutSize","_resetVerticalAxisLayoutSize","_getMaxSizeSetting","setAxisLayoutPos","resizeAxis","getTotalMargin","getMarginOffset","_getMainAxisPadding","_getMainAxisMargin","_getCrossAxisLayoutSize","FlexTarget","_target","_recalc","_enabled","_originalX","_originalY","_originalWidth","_originalHeight","_flexItemDisabled","_items","isChanged","layoutTree","_disableFlex","_enableFlex","patch","_ensureFlexItem","_checkEnabled","_clearFlexItemsCache","_enableChildrenAsFlexItems","_disableChildrenAsFlexItems","children","_children","child","_enableFlexItem","_disableFlexItem","_parent","_resetOffsets","enabled","isEnabled","_enable","_disable","_setupTargetForFlex","enableFlexLayout","_restoreTargetToNonFlex","disableFlexLayout","setDimensions","_x","_y","_w","_h","from","to","isFlexContainer","_changedChildren","_getFlexItems","visible","isFlexItem","originalX","originalY","funcX","funcY","changeWidth","changeHeight","_updateRecalc","changeExternalWidth","changeExternalHeight","newRecalcFlags","getNewRecalcFlags","_updateRecalcBottomUp","triggerLayout","flags","childRecalc","newRecalc","_getRecalcFromChangedChildRecalc","mainAxisRecalcFlag","crossAxisRecalcFlag","crossAxisDimensionsChangedInChild","mainAxisDimensionsChangedInChild","mainAxisIsWrapping","crossAxisIsFitToContents","isWidthDynamic","isHeightDynamic","shrunk","localRecalc","combinedRecalc","TextureSource","manager","loader","id","stage","textures","Set","_activeTextureCount","lookupId","_cancelCb","loadingSince","_nativeTexture","permanent","renderInfo","_isResultTexture","_loadError","_imageRef","_hasAlpha","has","add","delete","becomesUsed","becomesUnused","cb","texture","elements","element","active","isUsed","load","cancel","isLoading","free","forceSync","isResultTexture","Date","getTime","err","options","destroyed","onError","source","isUpdatingFrame","throttle","textureThrottler","genericCancelCb","processLoadedSource","setSource","hasAlpha","width","height","imageRef","flipTextureY","_flipTextureY","_isNativeTexture","hasOwnProperty","uploadTextureSource","onLoad","update","frameCounter","forEachActiveElement","forceRenderUpdate","_updateTextureCoords","newNativeTexture","prevNativeTexture","onTextureSourceLoaded","_setDisplayedTexture","forEachEnabledElement","_updateDimensions","e","onTextureSourceLoadError","isLoaded","freeTextureSource","WebGLTexture","prototype","isTextureSource","ElementTexturizer","elementCore","_element","_core","ctx","lazy","_colorize","_renderTexture","_renderTextureReused","_resultTextureSource","_renderOffscreen","empty","updateRenderToTextureEnabled","setHasRenderUpdates","_setRecalc","textureManager","updateResultTexture","hasEnabledElements","resultTexture","getResultTexture","nativeTexture","replaceNativeTexture","core","_hasRenderUpdates","release","releaseRenderTexture","allocateRenderTexture","ElementCore","_onUpdate","_pRecalc","_worldContext","ElementCoreContext","_hasUpdates","_localAlpha","_onAfterCalcs","_onAfterUpdate","_localPx","_localPy","_localTa","_localTb","_localTc","_localTd","_isComplex","_dimsUnknown","_clipping","_zSort","_outOfBounds","_displayedTextureSource","_zContextUsage","_zIndexedChildren","_renderContext","renderState","_scissor","_shaderOwner","_updateTreeOrder","_colorUl","_colorUr","_colorBl","_colorBr","_optFlags","_funcX","_funcY","_funcW","_funcH","_scaleX","_scaleY","_pivotX","_pivotY","_mountX","_mountY","_rotation","_alpha","_visible","_ulx","_uly","_brx","_bry","_zIndex","_forceZIndexContext","_zParent","_isRoot","_zIndexResort","_shader","_renderToTextureEnabled","_texturizer","_useRenderToTexture","_boundsMargin","_recBoundsMargin","_withinBoundsMargin","_viewport","_clipbox","render","_renderSimple","hasFlexLayout","_disableFuncX","setOriginalXWithoutUpdatingLayout","_updateLocalTranslateDelta","forceLayout","_triggerRecalcTranslate","_disableFuncY","setOriginalYWithoutUpdatingLayout","_updateLocalTransform","scaleX","_updateLocalTranslate","prev","_updateLocalAlpha","_updateEnabledFlag","setVisible","_sr","sin","_cr","cos","_setLocalTransform","_recalcLocalTranslate","pivotXMul","pivotYMul","px","py","dy","_addLocalTranslate","_setLocalAlpha","_setHasUpdates","prevIsZContext","isZContext","prevParent","setParent","setZParent","findZContext","disableZContext","enableZContext","enableZSort","newShaderOwner","_setShaderOwnerRecursive","force","forceZSort","splice","removed","added","order","fromIndex","toIndex","isEstimate","ulx","uly","brx","bry","textureSource","root","coordsWidth","coordsHeight","newZParent","decZContextUsage","hadZContextUsage","incZContextUsage","zIndex","prevZContext","results","_getZIndexedDescs","isAncestorOf","_getZIndexedDescsRec","sortZIndexedChildren","slice","prevShader","shader","defaultShader","texturizer","_enableRenderToTexture","_disableRenderToTexture","_setShaderOwnerChildrenRecursive","_renderAdvanced","_stashedTexCoords","_stashedColors","layoutFlexTree","_applyRelativeDimFuncs","pw","ta","td","tb","tc","pr","_hasRenderContext","updateTreeOrder","useRenderToTexture","mustRenderToTexture","bboxW","bboxH","sx","sy","ex","ey","rComplex","nx","ny","isSquare","area","lx","ly","_disableWithinBoundsMargin","withinMargin","renderOffscreen","_enableWithinBoundsMargin","isIdentity","IDENTITY","updateOutOfBounds","changedDims","onDimensionsChanged","setShader","activeShader","setScissor","addQuad","hasRenderUpdates","mustRenderChildren","renderTextureInfo","prevRenderTextureInfo","hasRenderTexture","renderToTextureCount","cleared","ignore","cache","hasResultTexture","isCachingTexturizer","setRenderTextureInfo","finishedRenderTexture","reuseTextureAsRenderTexture","renderTextureReused","getRenderTexture","setTexturizer","_stashTexCoords","colorize","_stashColors","_unstashColors","_unstashTexCoords","ptr","m","j","sort","mergeResult","relX","relY","inBound","inScissor","collectAtCoord","tx","ty","getCornerPoints","sc","_ensureLayout","EventEmitter","_hasEventListeners","listener","_eventFunction","_eventListeners","current","combiner","wrapper","arg1","arg2","arg3","off","__originalFunc","on","listeners","l","map","object","addAsMixin","cls","once","removeListener","emit","listenerCount","removeAllListeners","Shader","coreContext","_initialized","_elements","cleanup","renderer","createShader","isShader","isValidShaderType","Texture","_activeCount","_source","_resizeMode","_precision","mw","mh","clipping","_mustUpdate","hasUpdateSourceTexture","_performUpdateSource","removeUpdateSourceTexture","addTexture","incActiveCount","removeTexture","decActiveCount","_checkForNewerReusableTextureSource","incActiveTextureCount","_applyResizeMode","reusable","_getReusableTextureSource","_replaceTextureSource","decActiveTextureCount","_getIsValid","_updateSource","addUpdateSourceTexture","_getTextureSource","_getLookupId","getTextureSource","_getSourceLoader","getReusableTextureSource","newSource","oldSource","loadError","clipX","clipY","_applyResizeCover","_applyResizeContain","_updatePrecision","_updateClipping","scaleY","scale","desiredSize","choppedOffPixels","_clearResizeMode","self","displayedTexture","onDisplayedTextureClippingChanged","onPrecisionChanged","nonDefaults","precision","isAutosizeTexture","getRenderWidth","getRenderHeight","isTexture","ImageTexture","_src","src","getOption","fc","charCodeAt","platform","loadSrcTexture","getFontSetting","fontFace","fontStyle","fontSize","defaultFontFace","ff","ffs","curFf","splitWords","text","regexp","match","exec","isZeroWidthSpace","space","isSpace","TextTextureRenderer","canvas","_stage","_canvas","_context","getContext","_settings","font","getPrecision","textBaseline","document","fonts","fontSetting","check","catch","then","loadPromise","_load","drawText","_draw","offsetY","lineHeight","wordWrapWidth","cutSx","cutEx","cutSy","cutEy","letterSpacing","textIndent","setFontProperties","innerWidth","textOverflow","wordWrap","suffix","maxLinesSuffix","wrapWord","linesInfo","wrapText","maxLines","usedLines","otherLines","measureText","al","remainingText","moreTextLines","maxLineWidth","lineWidths","lineWidth","baselineOffset","_calculateRenderInfo","globalAlpha","fillRect","translate","linePositionX","linePositionY","drawLines","verticalAlign","textAlign","highlight","highlightColor","hlHeight","highlightHeight","highlightOffset","hlPaddingLeft","highlightPaddingLeft","hlPaddingRight","highlightPaddingRight","fillStyle","getRgbaString","drawLine","prevShadowSettings","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","textColor","fillText","textSplit","word","suffixWidth","wordLen","wordWidth","cutoffIndex","truncWordWidth","substring","indent","allLines","realNewlines","resultLines","spaceLeft","words","spaceWidth","wordWidthWithSpace","concat","reduce","acc","char","TextTextureRendererAdvanced","baseFont","fontBaselineRatio","wordBreak","wrapWidth","tokenize","parse","measure","resetFontStyle","lineNo","lineNum","baselineOffsetInPx","vaOffset","firstWord","lastWord","shift","pop","lastLineText","filter","spl","alignLine","canvasWidth","canvasHeight","hlColor","hlOffset","defaultColor","currentColor","letters","re","delimeters","final","tokens","italic","bold","colorStack","colorRegexp","test","matched","o","parsed","applyFontStyle","breakIndex","_getBreakIndex","_objectSpread","totalWidth","initialX","prevWidth","prevX","TextTexture","_text","_fontStyle","_fontBaselineRatio","_fontSize","_fontFace","_wordWrap","_wordWrapWidth","_wordBreak","_textOverflow","_lineHeight","_textBaseline","_textAlign","_verticalAlign","_offsetY","_maxLines","_maxLinesSuffix","_textColor","_shadow","_shadowColor","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_highlight","_highlightHeight","_highlightColor","_highlightOffset","_highlightPaddingLeft","_highlightPaddingRight","_cutSx","_cutEx","_cutSy","_cutEy","_advancedRenderer","_letterSpacing","_textIndent","toString","advancedRenderer","args","cloneArgs","gl","getDrawingCanvas","draw","texParams","sharpCfg","sharpen","isBoolean","getRenderPrecision","TEXTURE_MAG_FILTER","NEAREST","assign","getTextureOptionsForDrawingCanvas","proto","SourceTexture","_textureSource","Transition","property","_getter","getGetter","_setter","getSetter","_merger","merger","getMerger","_startValue","_targetValue","_p","_delayLeft","targetValue","isAttached","_updateDrawValue","reset","delay","removeActive","stop","addActive","getDrawValue","attached","dt","delayLeft","duration","invokeListeners","timingFunctionImpl","_timingFunctionImpl","startValue","isTransition","ObjectList","_refs","addAt","currentIndex","createItem","setAt","ref","onAdd","existingItem","getByRef","replace","prevItem","getIndex","onMove","onSet","removeAt","onRemove","onSync","isItem","_setByObject","_setByArray","refs","_getRefs","crefs","cref","idx","array","same","_equalsArray","marker","newItems","_setItems","prevItems","get","ElementChildList","prevChildList","childList","removeChildAt","_setParent","_connectParent","addChildAt","gc","syncChildren","setChildAt","moveChild","createElement","isElement","Element","__id","__start","__core","__ref","__attached","__enabled","__active","__parent","__texture","__displayedTexture","__tags","__treeTags","__tagRoot","__childList","isUcChar","_throwError","removeTag","clearRef","_addTag","setRef","setAsRoot","_updateAttachedFlag","isRoot","_unsetTagsParent","_setTagsParent","_updateCollision","depth","levels","getDepth","getAncestor","o1","o2","l1","l2","_isEnabled","withinBoundsMargin","newAttached","_isAttached","_onSetup","_onAttach","_onDetach","newEnabled","_onEnabled","_setEnabledFlag","_onDisabled","_unsetEnabledFlag","addElement","_setActiveFlag","_unsetActiveFlag","removeElement","filters","_enableTexture","_onActive","_disableTexture","_hasTexturizer","deactivate","_onInactive","_getRenderWidth","_getRenderHeight","_enableTextureError","prevTexture","prevSource","displayedTextureSource","sourceChanged","setDisplayedTextureSource","unknownSize","_onResize","tx1","ty1","tx2","ty2","iw","ih","rw","rh","ph","tempty","setTextureCoords","tag","parentTreeTags","tags","iteratorToArray","tagSet","_loop","comp","Map","_loop2","setToArray","removes","adds","hasTag","currentTags","addTag","list","mtag","values","_tag","res","_getByTag","level","resn","path","select","selectors","_select","pointIdx","arrowIdx","isRef","_selectChilds","subPath","localTags","getTags","getLocationString","getSettings","getPrettyString","getNonDefaults","childArray","missing","pivotX","pivotY","pivot","mountX","mountY","mount","rotation","colorUl","colorUr","colorBl","colorBr","forceZIndexContext","clipbox","tnd","renderToTexture","renderToTextureLazy","colorizeResultTexture","boundsMargin","offsetX","disableFuncW","disableFuncH","_collision","collision","setTags","_allowChildrenAccess","rectangleTexture","enableTextTexture","isString","onUpdate","onAfterCalcs","onAfterUpdate","create","rtt","paths","firstCharCode","remove","message","animations","createAnimation","_getTransition","_setTransition","transition","setSmooth","_transitions","finish","transitions","defaultTransitionSettings","isTransitionSettings","_removeTransition","createSettings","start","tree","hasChildren","collectChildren","getProperties","colorKeys","JSON","stringify","k","childStr","isEmpty","propertyPath","getter","PROP_GETTERS","Function","PROP_SETTERS","toLowerCase","isColorProperty","mergeColors","mergeNumbers","getAt","properties","props","key","getBoolean","StateMachine","setupStateMachine","event","_hasMethod","_state","__path","statePath","currentStatePath","state","_sm","getStateByPath","currentState","__level","stateAtLevel","_getStateAtLevel","member","setStateId","_setStateCounter","_setStateId","newState","_stateMap","prevState","hasDifferentEnterMethod","$enter","hasDifferentExitMethod","$exit","sharedState","_getSharedState","context","sharedLevel","exitStates","_getStatesUntilLevel","__setState","_callExit","stateChangeOverridden","enterStates","reverse","_callEnter","_changedState","_onStateChange","hasParent","apply","_stateIndex","__index","_routedType","memberNames","cur","memberName","alias","StateMachineType","getStateMemberAlias","targetConstructor","router","setPrototypeOf","_initStateMachine","stateMachineType","states","state1","state2","state1Array","_getAncestorStates","state2Array","_type","_router","_createRouter","_getStateMap","_addStateMemberDelegatorsToRouter","arguments","_isRouter","original","_mixinStateMachineMethods","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","members","_getAllMemberNames","_addMemberRouter","statePaths","descriptors","aliases","_getDescriptor","descType","_getDescriptorType","_addMethodRouter","_addGetterSetterRouters","isValid","curState","getPrototypeOf","code","supportsSpread","_supportsSpread","functionBody","_getGetterRouter","_getSetterRouter","stateMap","_getStateMemberNames","_getStateMemberNamesForType","_isStateLocalMember","_createStateMap","_addState","parentState","__state","__name","_addStaticStateProperty","parentPath","_states","isInheritedFromParent","subStates","subState","stateName","_getStateName","isClassStateLevel","__supportsSpread","Component","tagRoot","__initialized","__firstActive","__firstEnable","__signals","__passSignals","__construct","getTemplateFunc","_build","__onStateChange","_getState","application","updateFocusPath","propObj","targetObj","targetProp","prop","propDependencies","propName","__func","__obj","__prop","__init","_attach","_detach","_firstEnable","_firstActive","_active","_inactive","_construct","_init","newTarget","prevTarget","_focusPath","cparent","ancestor","getSharedAncestor","isComponent","_signal","signalParent","_getParentSignalHandler","fireEvent","passSignal","_getSignalHandler","_signalProxy","startsWith","_doFireAncestors","fire","__propertyBinding","hasName","parseTemplate","_template","loc","store","rid","parseTemplateRec","cursor","childCursor","propKey","parseTemplatePropRec","shaderCursor","parsePropertyBindings","isNumber","subs","collectSubComponents","getComponent","CoreQuadList","quadTextures","quadElements","dataLength","WebGLCoreQuadList","byteSize","data","ArrayBuffer","floats","Float32Array","uints","Uint32Array","CoreQuadOperation","shaderOwner","scissor","quads","getTexture","getElementCore","getElement","renderWidth","renderHeight","getTextureWidth","getTextureHeight","WebGLCoreQuadOperation","extraAttribsDataByteOffset","getAttribsDataByteOffset","coords","getRenderTextureCoords","renderExec","_projection","projection","CoreRenderExecutor","_bindRenderTexture","_setScissor","_clearRenderTexture","_reset","qops","quadOperations","_processQuadOperation","quadOperation","_setupQuadOperation","_execQuadOperation","op","_renderQuadOperation","renderTexture","WebGLCoreRenderExecutor","_attribsBuffer","createBuffer","maxQuads","byteLength","allIndices","Uint16Array","_quadsBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","BLEND","disable","DEPTH_TEST","_stopShaderProgram","_setupBuffers","ARRAY_BUFFER","DYNAMIC_DRAW","_useShaderProgram","addEmpty","beforeDraw","afterDraw","operation","hasSameProgram","_currentShaderProgram","stopProgram","useProgram","setupUniforms","bindFramebuffer","FRAMEBUFFER","viewport","framebuffer","glClearColor","getClearColor","clearColor","clear","COLOR_BUFFER_BIT","SCISSOR_TEST","CoreRenderState","getDefaultShader","createCoreQuadList","_renderTextureInfo","_realShader","_check","_texturizerTemporary","_quadOperation","_temporaryTexturizers","_isCachingTexturizer","owner","useDefault","_cacheTexturizer","_createQuadOperation","_hasChanges","_finishQuadOperation","_isRenderTextureReusable","isRenderTextureReusable","q","createCoreQuadOperation","finishRenderState","WebGLShaderProgram","vertexShaderSource","fragmentShaderSource","_program","_uniformLocations","_attributeLocations","_currentUniformValues","createProgram","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","location","getUniformLocation","getAttribLocation","glFunction","_valueEquals","clonedValue","_valueClone","isMatrix","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","call","WebGLShader","shaderPrograms","glProgram","initialize","compile","setUniformValue","beforeUsage","enableAttribs","afterUsage","disableAttribs","other","getExtraAttribBytesPerVertex","getProjection","_getProjection","DefaultShader","vertexAttribPointer","_attrib","FLOAT","enableVertexAttribArray","UNSIGNED_BYTE","disableVertexAttribArray","_setUniform","uniform2fv","glTexture","bindTexture","TEXTURE_2D","drawElements","TRIANGLES","UNSIGNED_SHORT","Renderer","_defaultShader","aggressive","_createDefaultShader","shaderType","_getShaderBaseType","convertedShaderType","_getShaderAlternative","WebGLRenderer","_compressedTextureExtensions","astc","getExtension","etc1","s3tc","pvrtc","shaderProgram","destroy","getWebGL","createTexture","texImage2D","RGBA","texParameteri","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","params","format","internalFormat","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","deleteFramebuffer","deleteTexture","fmt","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","RGB","UNSIGNED_BYTE_5_6_5","compressed","premultiplyAlpha","flipBlueRed","texOptions","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_BLUE_RED","uploadCompressedGlTexture","uploadGlTexture","cloneObjShallow","bytesPerPixel","_getBytesPerPixel","mca","mergeColorAlpha","cx","cy","extra","setExtraAttribsInBuffer","copyTexSubImage2D","ow","oh","C2dCoreQuadList","renderContexts","modes","C2dCoreQuadOperation","getRenderContext","getSimpleTc","getWhite","C2dCoreRenderExecutor","_mainRenderTexture","getCanvas","_getContext","setTransform","clearRect","getRgbaStringFromArray","globalCompositeOperation","beginPath","rect","closePath","fill","restore","save","_equalScissorAreas","_restoreContext","clip","C2dShader","_rectangleTexture","_tintManager","tintManager","vc","rc","white","stc","info","_setColorGradient","_beforeDrawEl","_afterDrawEl","sourceX","sourceY","sourceW","sourceH","mergeMultiColorsEqual","rgb","tintTexture","getTintTexture","drawImage","transparency","gradient","createLinearGradient","addColorStop","getRgbString","C2dTextureTintManager","_usedMemory","_cachedNativeTextures","delta","addMemoryUsage","_hasCache","_getCache","prevMemUsage","memoryUsage","_addMemoryUsage","frame","lf","u","_tintTexture","before","reuseTexture","after","col","_tintCache","C2dTintCache","releaseBlancoTextures","_tx","_colors","_blancoTextures","_lastCleanupFrame","_memTextures","C2dRenderer","TextureTintManager","setupC2d","c2d","getC2d","buffer","imageData","ImageData","Uint8ClampedArray","putImageData","setRenderContext","setWhite","isWhite","setSimpleTc","hasSimpleTexCoords","SparkShader","elementPostion","paint","SparkRenderer","global","beginDrawing","ret","endDrawing","ImageWorker","_id","_initWorker","_worker","terminate","createWorker","blob","Blob","blobURL","URL","webkitURL","createObjectURL","Worker","postMessage","config","href","protocol","onmessage","ImageWorkerImage","image","_manager","_onError","_onLoad","ImageWorkerServer","_receiveMessage","isPathAbsolute","base","hasHashPath","_relativeBase","ImageWorkerServerItem","onFinish","imageBitmap","hasAlphaChannel","isWPEBrowser","_onFinish","_xhr","_mimeType","_canceled","XMLHttpRequest","open","responseType","onerror","oEvent","onload","response","_createImageBitmap","send","createImageBitmap","colorSpaceConversion","imageOrientation","_hasAlphaChannel","abort","WebPlatform","_looping","_awaitingLoop","_loopHandler","_idleLoopCounter","_idleLoopDelay","_imageWorker","_registerVisibilityChangeHandler","clearInterval","_removeKeyHandler","_removeClickHandler","_removeHoverHandler","_removeScrollWheelHandler","_removeVisibilityChangeHandler","loop","stopLoop","setInterval","updateFrame","idleFrame","startLoop","lp","switchLoop","renderFrame","requestAnimationFrame","view","pvr","DataView","mipmaps","compressedTexImage2D","glInternalFormat","pixelWidth","pixelHeight","HTMLImageElement","HTMLVideoElement","ImageBitmap","HTMLCanvasElement","getImageData","arraybuffer","targetIdentifier","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","kvps","formats","getCompressedTextureExtensions","includes","imageSize","pvrHeaderLength","pvrFormatEtc1","pvrWidth","pvrHeight","pvrMipmapCount","pvrMetadata","arrayBuffer","header","Int32Array","dataOffset","pvrtcData","Uint8Array","byteOffset","cancelCb","isPng","isKtx","isPvr","request","addEventListener","handleKtxLoad","handlePvrLoad","Image","crossOrigin","removeAttribute","opts","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","performance","now","changes","keyhandler","_keydownListener","_keyupListener","removeEventListener","clickHandler","_clickListener","hoverHandler","_hoverListener","registerScrollWheelHandler","_scrollWheelListener","_visibilityChangeHandler","visibilityState","PlatformLoader","WebGLState","_gl","_buffers","_framebuffers","_renderbuffers","_vertexAttribs","_nonDefaultFlags","_textures","_maxTexture","_activeTexture","TEXTURE0","_pixelStorei","cap","DITHER","def","_getDefaultFlag","change","program","va","equal","changed","activeIndex","_getTextureIndex","targetIndex","_getTextureTargetIndex","pname","param","_getPixelStoreiIndex","_migrateFlags","_useProgram","_migrateFramebuffers","_migrateRenderbuffers","buffersChanged","_migrateBuffers","_migrateAttributes","_migrateSettings","_migratePixelStorei","_migrateTextures","_getDefaultPixelStoreiByIndex","_getPixelStoreiByIndex","activeTexture","sTargets","tTargets","textureNumb","_getTextureByIndex","targetMax","_getTextureTargetByIndex","_bindTexture","_bindBuffer","_bindFramebuffer","fb","renderbuffer","_bindRenderbuffer","attrib","_disableVertexAttribArray","_vertexAttribPointer","_enableVertexAttribArray","defaults","getDefaultSettings","xname","tValue","setting","_defaultSettings","WebGLRenderingContext","FUNC_ADD","ZERO","BACK","LESS","CCW","ALWAYS","KEEP","_textureTargetIndices","_pixelStoreiIndices","_pixelStoreiDefaults","BROWSER_DEFAULT_WEBGL","WebGLStateManager","migrate","setProgram","setBuffer","setFramebuffer","setRenderbuffer","setFlag","normalized","stride","setActiveTexture","setPixelStorei","face","mask","FRONT","_stencilFuncSeparateFront","_stencilFuncSeparateBack","FRONT_AND_BACK","_stencilFuncSeparateFrontAndBack","_stencilFuncSeparate","_stencilMaskSeparateFront","_stencilMaskSeparateBack","_stencilMaskSeparateFrontAndBack","_stencilMaskSeparate","fail","zfail","zpass","_stencilOpSeparateFront","_stencilOpSeparateBack","_stencilOpSeparateFrontAndBack","_stencilOpSeparate","red","green","blue","_blendColor","_blendEquation","modeRGB","modeAlpha","_blendEquationSeparate","sfactor","dfactor","_blendFunc","srcRGB","dstRGB","srcAlpha","dstAlpha","_blendFuncSeparate","_clearColor","_clearDepth","_clearStencil","_colorMask","_cullFace","_depthFunc","flag","_depthMask","zNear","zFar","_depthRange","_frontFace","_lineWidth","factor","units","_polygonOffset","invert","_sampleCoverage","_stencilFunc","_stencilMask","_stencilOp","indx","_vertexAttrib1f","_vertexAttrib1fv","_vertexAttrib2f","_vertexAttrib2fv","z","_vertexAttrib3f","_vertexAttrib3fv","_vertexAttrib4f","_vertexAttrib4fv","__proto__","method","_initStateManager","TextureManager","_uploadedTextureSources","textureSourceHashmap","_nativeFreeTextureSource","_nativeUploadTextureSource","addToLookupMap","_updateVramUsage","sign","usage","Stage","isWebglSupported","addVramUsage","freeUnusedTextureSources","_cleanupLookupMap","remainingTextureSources","ts","allowCleanup","_freeManagedTextureSource","managed","clearNativeTexture","TextureThrottler","_remove","_sources","_data","_processItem","MAX_UPLOAD_TIME_PER_FRAME","CoreContext","createCoreRenderState","createCoreRenderExecutor","_renderTexturePool","_renderTextureId","_zSorts","_freeRenderTexture","_render","_update","_performForcedZSorts","zSort","debugFrame","_fillRenderState","_readPixels","_performRender","log","pixels","readPixels","execute","prec","_createRenderTexture","maxAge","limit","createRenderTexture","freeRenderTexture","copyRenderTexture","TransitionSettings","_timingFunction","getTimingFunction","TransitionManager","progress","isRunning","transitionSettings","MultiSpline","_clear","_pe","_idp","_f","_v","_lv","_s","_ve","_sme","_se","_length","defaultSmoothness","lv","last","pe","idp","sm","pi","ni","nc","getRgbaComponents","pc","ve","sme","se","getSplineRgbaValueFunction","getSplineValueFunction","_add","_getItem","p1","p2","i2","s1","s2","dp","helpers","getSplineHelpers","calculateSpline","cv1","cv2","getArgbNumber","csx","csy","cex","cey","yd","AnimationActionSettings","animationSettings","_selector","_props","_propSetters","_resetValue","_hasResetValue","_hasColorProperty","getValue","getAnimatedElements","sv","getResetValue","hasColorProperty","selector","resetValue","isAnimationActionSettings","AnimationSettings","_actions","repeat","repeatOffset","repeatDelay","autostop","stopMethod","STOP_METHODS","FADE","_stopTimingFunction","_stopTimingFunctionImpl","stopDuration","stopDelay","aas","action","REVERSE","FORWARD","IMMEDIATE","ONETOTWO","Animation","STATES","IDLE","_repeatsLeft","_stopDelayLeft","_stopP","PLAYING","checkActive","PAUSED","STOPPING","FINISHED","play","STOPPED","isActive","_progress","_stopProgress","_getStopDuration","_progressStopTransition","stopTimingFunctionImpl","AnimationManager","RectangleTexture","whitePixel","_setOptions","_lastGcFrame","_usedVramAlpha","_usedVramNonAlpha","platformType","createCanvasContext","createWebGLContext","_mode","ratio","style","_options","_renderer","setClearColor","startTime","currentTime","_updateSourceTextures","opt","app","_updatingFrame","getHrTime","fixedDt","_calculateDt","processSome","nextFrame","getRgbaComponentsNormalized","memoryUsageBefore","gcTextureMemory","gcRenderTextureMemory","usedMemory","freeUnusedRenderTextures","serviceprovider","addServiceProvider","Application","_temp_options","booting","__updateFocusCounter","__keypressTimers","__hoveredChild","updateFocusSettings","__keymap","registerKeydownHandler","_receiveKeydown","registerKeyupHandler","_receiveKeyup","registerClickHandler","_receiveClick","registerHoverHandler","_receiveHover","_recieveScrollWheel","__options","setApplication","__updateFocus","notOverridden","__updateFocusRec","updateFocusId","__updateFocusId","newFocusPath","__getFocusPath","newFocusedComponent","prevFocusedComponent","_focus","focusOverridden","unfocusedElement","_unfocus","_focusChange","focusedComponent","focusSettings","defaultSetFocusSettings","_setFocusSettings","defaultHandleFocusSettings","_handleFocusSettings","__prevFocusSettings","prevSettings","focused","prevFocused","nextFocus","_getFocused","newParts","events","focusPath","_getMostSpecificHandledMember","returnValue","keyCode","hasTimer","longpress","focusTopDownEvent","focusBottomUpEvent","consumer","_startLongpressTimer","clearTimeout","lookup","timeout","setTimeout","clientX","clientY","fireTopDownScrollWheelHandler","fireBottomUpScrollWheelHandler","affected","_findChildren","_captureScroll","_getTargetChild","_handleScroll","fireBottomUpClickHandler","_handleClick","fireBottomUpHoverHandler","hoveredBranch","newHoveredBranch","getAncestors","elem","_handleUnhover","diffBranch","_handleHover","lastElement","hoverableChildren","_withinClickableRange","bucket","affectedChildren","cursorX","cursorY","candidates","cw","finalW","ch","finalH","_testCollision","_destroyed","_destroy","timer","StaticCanvasTexture","_factory","_lookupId","factory","Tools","canvasFactory","content","radius","strokeWidth","strokeColor","fillColor","createRoundRect","getCanvasTexture","imageSmoothingEnabled","moveTo","lineTo","arcTo","strokeStyle","stroke","blur","margin","createShadowRect","url","createSvg","img","ObjMerger","__mf","aks","bks","ai","bi","aksl","aIndex","curIndex","akey","bv","av","isMf","merge","ObjectListProxy","ObjectListWrapper","_wrapper","NoiseTexture","noise","random","REPEAT","HtmlTexture","_htmlElement","_scale","innerHTML","htmlElement","firstElementChild","html2canvas","getPreloadArea","appendChild","backgroundColor","removeChild","_preloadArea","attachShadow","opacity","pointerEvents","display","top","overflow","body","StaticTexture","ListComponent","_reloadVisibleElements","_visibleItems","_index","_started","_scrollTransitionSettings","_itemSize","_viewportScrollOffset","_itemScrollOffset","_roll","_rollMin","_rollMax","_progressAnimation","_invertDirection","itemList","ListItems","_scrollTransition","setIndex","immediate","closest","nElements","realIndex","diff","viewportSize","scrollDelta","ps","wasVisible","invisibleItem","getWrapper","checkStarted","ri","LinearBlurShader","_direction","_kernelRadius","redraw","uniform1i","BoxBlurShader","BlurShader","_amount","FastBlurComponent","_paddingX","_paddingY","_updateBlurSize","Wrap","WebGLFastBlurComponent","C2dFastBlurComponent","_textwrap","sel","paddingX","paddingY","kernelRadius","_amountToKernelRadius","Textwrap","C2dBlurShader","Content","_multiSpline","getSpline","_layers","_output","filterShaderSettings","filterShaders","_setLayerTexture","getLayerContents","getLayer","steps","step","fw","fh","otherTextureSource","_buildLayers","Layers","L0","L1","L2","L3","Result","FastBlurOutputShader","_a","_otherTextureSource","uniform1f","TEXTURE1","BloomComponent","BloomBase","BloomBaseShader","SmoothScaleComponent","_smoothScale","_iterations","its","_setIterations","scalers","first","useScalers","ContentWrap","Scale","contentWrap","BorderComponent","_borderTop","_borderRight","_borderBottom","_borderLeft","borderWidth","borderWidthTop","borderWidthRight","borderWidthBottom","borderWidthLeft","colorBorderTop","colorBorderRight","colorBorderBottom","colorBorderLeft","borderTop","borderRight","borderBottom","borderLeft","Borders","Top","Right","Bottom","Left","WebGLGrayscaleShader","C2dGrayscaleShader","WebGLDefaultShader","C2dDefaultShader","DitheringShader","_noiseTexture","_graining","_random","getElementWidth","getElementHeight","getVertexAttribPointerOffset","CircularPushShader","_inputValue","_maxDerivative","_normalizedValue","_offset","_aspectRatio","_offsetX","buckets","_buckets","_values","_getValues","full","_shiftBuckets","_valuesTexture","ALPHA","InversionShader","OutlineShader","_width","_col","_color","uniform4fv","ddw","dw","ddh","dh","PixelateShader","_size","WebGLPixelateShaderImpl","RadialFilterShader","_radius","_cutoff","RoundedRectangleShader","_blend","_stroke","_fc","_fillColor","_getNormalizedColor","_strokeColor","num","_sc","renderPrecision","renderContext","FadeOutShader","_fade","fade","VignetteShader","_magnitude","_intensity","_pivot","SpinnerShader","_period","_angle","_smooth","_backgroundColor","_time","HoleShader","RadialGradientShader","_ic","_normalizedIC","_oc","_normalizedOC","_radiusY","innerColor","Light3dShader","_strength","_ambient","_fudge","_rx","_ry","_z","NaN","_pivotZ","_lightY","_lightZ","vr","rz","atan2","uniform3fv","lightY","lightZ","PerspectiveShader","MagnifierShader","_magnification","SpinnerShader2","_showDot","_clockwise","_bc","_normalizedBC","_c","_normalizedC","bool","spinSync","lightning","shaders","Grayscale","BoxBlur","Dithering","CircularPush","Inversion","LinearBlur","Outline","Pixelate","RadialFilter","RoundedRectangle","Spinner2","FadeOut","Hole","Vignette","Spinner","RadialGradient","Light3d","Perspective","Magnifier","Blur","components","tools","lng"],"mappings":"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"}